var wt=(i=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(i,{get:(t,e)=>(typeof require!="undefined"?require:t)[e]}):i)(function(i){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+i+'" is not supported')});import{notStrictEqual as Ds,strictEqual as vs}from"assert";var us={right:bs,center:_s},ds=0,fe=1,ps=2,he=3,Se=class{constructor(t){var e;this.width=t.width,this.wrap=(e=t.wrap)!==null&&e!==void 0?e:!0,this.rows=[]}span(...t){let e=this.div(...t);e.span=!0}resetOutput(){this.rows=[]}div(...t){if(t.length===0&&this.div(""),this.wrap&&this.shouldApplyLayoutDSL(...t)&&typeof t[0]=="string")return this.applyLayoutDSL(t[0]);let e=t.map(n=>typeof n=="string"?this.colFromString(n):n);return this.rows.push(e),e}shouldApplyLayoutDSL(...t){return t.length===1&&typeof t[0]=="string"&&/[\t\n]/.test(t[0])}applyLayoutDSL(t){let e=t.split(`
`).map(s=>s.split("	")),n=0;return e.forEach(s=>{s.length>1&&at.stringWidth(s[0])>n&&(n=Math.min(Math.floor(this.width*.5),at.stringWidth(s[0])))}),e.forEach(s=>{this.div(...s.map((o,a)=>({text:o.trim(),padding:this.measurePadding(o),width:a===0&&s.length>1?n:void 0})))}),this.rows[this.rows.length-1]}colFromString(t){return{text:t,padding:this.measurePadding(t)}}measurePadding(t){let e=at.stripAnsi(t);return[0,e.match(/\s*$/)[0].length,0,e.match(/^\s*/)[0].length]}toString(){let t=[];return this.rows.forEach(e=>{this.rowToString(e,t)}),t.filter(e=>!e.hidden).map(e=>e.text).join(`
`)}rowToString(t,e){return this.rasterize(t).forEach((n,s)=>{let o="";n.forEach((a,c)=>{let{width:b}=t[c],_=this.negatePadding(t[c]),p=a;if(_>at.stringWidth(a)&&(p+=" ".repeat(_-at.stringWidth(a))),t[c].align&&t[c].align!=="left"&&this.wrap){let m=us[t[c].align];p=m(p,_),at.stringWidth(p)<_&&(p+=" ".repeat((b||0)-at.stringWidth(p)-1))}let u=t[c].padding||[0,0,0,0];u[he]&&(o+=" ".repeat(u[he])),o+=rn(t[c],p,"| "),o+=p,o+=rn(t[c],p," |"),u[fe]&&(o+=" ".repeat(u[fe])),s===0&&e.length>0&&(o=this.renderInline(o,e[e.length-1]))}),e.push({text:o.replace(/ +$/,""),span:t.span})}),e}renderInline(t,e){let n=t.match(/^ */),s=n?n[0].length:0,o=e.text,a=at.stringWidth(o.trimRight());return e.span?this.wrap?s<a?t:(e.hidden=!0,o.trimRight()+" ".repeat(s-a)+t.trimLeft()):(e.hidden=!0,o+t):t}rasterize(t){let e=[],n=this.columnWidths(t),s;return t.forEach((o,a)=>{o.width=n[a],this.wrap?s=at.wrap(o.text,this.negatePadding(o),{hard:!0}).split(`
`):s=o.text.split(`
`),o.border&&(s.unshift("."+"-".repeat(this.negatePadding(o)+2)+"."),s.push("'"+"-".repeat(this.negatePadding(o)+2)+"'")),o.padding&&(s.unshift(...new Array(o.padding[ds]||0).fill("")),s.push(...new Array(o.padding[ps]||0).fill(""))),s.forEach((c,b)=>{e[b]||e.push([]);let _=e[b];for(let p=0;p<a;p++)_[p]===void 0&&_.push("");_.push(c)})}),e}negatePadding(t){let e=t.width||0;return t.padding&&(e-=(t.padding[he]||0)+(t.padding[fe]||0)),t.border&&(e-=4),e}columnWidths(t){if(!this.wrap)return t.map(a=>a.width||at.stringWidth(a.text));let e=t.length,n=this.width,s=t.map(a=>{if(a.width)return e--,n-=a.width,a.width}),o=e?Math.floor(n/e):0;return s.map((a,c)=>a===void 0?Math.max(o,ms(t[c])):a)}};function rn(i,t,e){return i.border?/[.']-+[.']/.test(t)?"":t.trim().length!==0?e:"  ":""}function ms(i){let t=i.padding||[],e=1+(t[he]||0)+(t[fe]||0);return i.border?e+4:e}function gs(){return typeof process=="object"&&process.stdout&&process.stdout.columns?process.stdout.columns:80}function bs(i,t){i=i.trim();let e=at.stringWidth(i);return e<t?" ".repeat(t-e)+i:i}function _s(i,t){i=i.trim();let e=at.stringWidth(i);return e>=t?i:" ".repeat(t-e>>1)+i}var at;function on(i,t){return at=t,new Se({width:(i==null?void 0:i.width)||gs(),wrap:i==null?void 0:i.wrap})}var an=new RegExp("\x1B(?:\\[(?:\\d+[ABCDEFGJKSTm]|\\d+;\\d+[Hfm]|\\d+;\\d+;\\d+m|6n|s|u|\\?25[lh])|\\w)","g");function Ie(i){return i.replace(an,"")}function ln(i,t){let[e,n]=i.match(an)||["",""];i=Ie(i);let s="";for(let o=0;o<i.length;o++)o!==0&&o%t===0&&(s+=`
`),s+=i.charAt(o);return e&&n&&(s=`${e}${s}${n}`),s}function Me(i){return on(i,{stringWidth:t=>[...t].length,stripAnsi:Ie,wrap:ln})}import{dirname as cn,resolve as fn}from"path";import{readdirSync as Os,statSync as ws}from"fs";function hn(i,t){let e=fn(".",i),n;for(ws(e).isDirectory()||(e=cn(e));;){if(n=t(e,Os(e)),n)return fn(e,n);if(e=cn(n=e),n===e)break}}import{inspect as Rs}from"util";import{readFileSync as zs}from"fs";import{fileURLToPath as Ts}from"url";import{format as Cs}from"util";import{normalize as xs,resolve as js}from"path";function vt(i){if(i!==i.toLowerCase()&&i!==i.toUpperCase()||(i=i.toLowerCase()),i.indexOf("-")===-1&&i.indexOf("_")===-1)return i;{let e="",n=!1,s=i.match(/^-+/);for(let o=s?s[0].length:0;o<i.length;o++){let a=i.charAt(o);n&&(n=!1,a=a.toUpperCase()),o!==0&&(a==="-"||a==="_")?n=!0:a!=="-"&&a!=="_"&&(e+=a)}return e}}function ue(i,t){let e=i.toLowerCase();t=t||"-";let n="";for(let s=0;s<i.length;s++){let o=e.charAt(s),a=i.charAt(s);o!==a&&s>0?n+=`${t}${e.charAt(s)}`:n+=a}return n}function de(i){return i==null?!1:typeof i=="number"||/^0x[0-9a-f]+$/i.test(i)?!0:/^0[^.]/.test(i)?!1:/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(i)}function un(i){if(Array.isArray(i))return i.map(a=>typeof a!="string"?a+"":a);i=i.trim();let t=0,e=null,n=null,s=null,o=[];for(let a=0;a<i.length;a++){if(e=n,n=i.charAt(a),n===" "&&!s){e!==" "&&t++;continue}n===s?s=null:(n==="'"||n==='"')&&!s&&(s=n),o[t]||(o[t]=""),o[t]+=n}return o}var ht;(function(i){i.BOOLEAN="boolean",i.STRING="string",i.NUMBER="number",i.ARRAY="array"})(ht||(ht={}));var jt,pe=class{constructor(t){jt=t}parse(t,e){let n=Object.assign({alias:void 0,array:void 0,boolean:void 0,config:void 0,configObjects:void 0,configuration:void 0,coerce:void 0,count:void 0,default:void 0,envPrefix:void 0,narg:void 0,normalize:void 0,string:void 0,number:void 0,__:void 0,key:void 0},e),s=un(t),o=typeof t=="string",a=ys(Object.assign(Object.create(null),n.alias)),c=Object.assign({"boolean-negation":!0,"camel-case-expansion":!0,"combine-arrays":!1,"dot-notation":!0,"duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"greedy-arrays":!0,"halt-at-non-option":!1,"nargs-eats-options":!1,"negation-prefix":"no-","parse-numbers":!0,"parse-positional-numbers":!0,"populate--":!1,"set-placeholder-key":!1,"short-option-groups":!0,"strip-aliased":!1,"strip-dashed":!1,"unknown-options-as-args":!1},n.configuration),b=Object.assign(Object.create(null),n.default),_=n.configObjects||[],p=n.envPrefix,u=c["populate--"],m=u?"--":"_",O=Object.create(null),j=Object.create(null),y=n.__||jt.format,d={aliases:Object.create(null),arrays:Object.create(null),bools:Object.create(null),strings:Object.create(null),numbers:Object.create(null),counts:Object.create(null),normalize:Object.create(null),configs:Object.create(null),nargs:Object.create(null),coercions:Object.create(null),keys:[]},v=/^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/,R=new RegExp("^--"+c["negation-prefix"]+"(.+)");[].concat(n.array||[]).filter(Boolean).forEach(function(l){let h=typeof l=="object"?l.key:l,w=Object.keys(l).map(function(g){return{boolean:"bools",string:"strings",number:"numbers"}[g]}).filter(Boolean).pop();w&&(d[w][h]=!0),d.arrays[h]=!0,d.keys.push(h)}),[].concat(n.boolean||[]).filter(Boolean).forEach(function(l){d.bools[l]=!0,d.keys.push(l)}),[].concat(n.string||[]).filter(Boolean).forEach(function(l){d.strings[l]=!0,d.keys.push(l)}),[].concat(n.number||[]).filter(Boolean).forEach(function(l){d.numbers[l]=!0,d.keys.push(l)}),[].concat(n.count||[]).filter(Boolean).forEach(function(l){d.counts[l]=!0,d.keys.push(l)}),[].concat(n.normalize||[]).filter(Boolean).forEach(function(l){d.normalize[l]=!0,d.keys.push(l)}),typeof n.narg=="object"&&Object.entries(n.narg).forEach(([l,h])=>{typeof h=="number"&&(d.nargs[l]=h,d.keys.push(l))}),typeof n.coerce=="object"&&Object.entries(n.coerce).forEach(([l,h])=>{typeof h=="function"&&(d.coercions[l]=h,d.keys.push(l))}),typeof n.config<"u"&&(Array.isArray(n.config)||typeof n.config=="string"?[].concat(n.config).filter(Boolean).forEach(function(l){d.configs[l]=!0}):typeof n.config=="object"&&Object.entries(n.config).forEach(([l,h])=>{(typeof h=="boolean"||typeof h=="function")&&(d.configs[l]=h)})),Dt(n.key,a,n.default,d.arrays),Object.keys(b).forEach(function(l){(d.aliases[l]||[]).forEach(function(h){b[h]=b[l]})});let Y=null;ce();let T=[],B=Object.assign(Object.create(null),{_:[]}),At={};for(let l=0;l<s.length;l++){let h=s[l],w=h.replace(/^-{3,}/,"---"),g,f,S,C,$,st;if(h!=="--"&&/^-/.test(h)&&Q(h))gt(h);else if(w.match(/^---+(=|$)/)){gt(h);continue}else if(h.match(/^--.+=/)||!c["short-option-groups"]&&h.match(/^-.+=/))C=h.match(/^--?([^=]+)=([\s\S]*)$/),C!==null&&Array.isArray(C)&&C.length>=3&&(N(C[1],d.arrays)?l=Lt(l,C[1],s,C[2]):N(C[1],d.nargs)!==!1?l=Qt(l,C[1],s,C[2]):V(C[1],C[2],!0));else if(h.match(R)&&c["boolean-negation"])C=h.match(R),C!==null&&Array.isArray(C)&&C.length>=2&&(f=C[1],V(f,N(f,d.arrays)?[!1]:!1));else if(h.match(/^--.+/)||!c["short-option-groups"]&&h.match(/^-[^-]+/))C=h.match(/^--?(.+)/),C!==null&&Array.isArray(C)&&C.length>=2&&(f=C[1],N(f,d.arrays)?l=Lt(l,f,s):N(f,d.nargs)!==!1?l=Qt(l,f,s):($=s[l+1],$!==void 0&&(!$.match(/^-/)||$.match(v))&&!N(f,d.bools)&&!N(f,d.counts)||/^(true|false)$/.test($)?(V(f,$),l++):V(f,J(f))));else if(h.match(/^-.\..+=/))C=h.match(/^-([^=]+)=([\s\S]*)$/),C!==null&&Array.isArray(C)&&C.length>=3&&V(C[1],C[2]);else if(h.match(/^-.\..+/)&&!h.match(v))$=s[l+1],C=h.match(/^-(.\..+)/),C!==null&&Array.isArray(C)&&C.length>=2&&(f=C[1],$!==void 0&&!$.match(/^-/)&&!N(f,d.bools)&&!N(f,d.counts)?(V(f,$),l++):V(f,J(f)));else if(h.match(/^-[^-]+/)&&!h.match(v)){S=h.slice(1,-1).split(""),g=!1;for(let rt=0;rt<S.length;rt++){if($=h.slice(rt+2),S[rt+1]&&S[rt+1]==="="){st=h.slice(rt+3),f=S[rt],N(f,d.arrays)?l=Lt(l,f,s,st):N(f,d.nargs)!==!1?l=Qt(l,f,s,st):V(f,st),g=!0;break}if($==="-"){V(S[rt],$);continue}if(/[A-Za-z]/.test(S[rt])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test($)&&N($,d.bools)===!1){V(S[rt],$),g=!0;break}if(S[rt+1]&&S[rt+1].match(/\W/)){V(S[rt],$),g=!0;break}else V(S[rt],J(S[rt]))}f=h.slice(-1)[0],!g&&f!=="-"&&(N(f,d.arrays)?l=Lt(l,f,s):N(f,d.nargs)!==!1?l=Qt(l,f,s):($=s[l+1],$!==void 0&&(!/^(-|--)[^-]/.test($)||$.match(v))&&!N(f,d.bools)&&!N(f,d.counts)||/^(true|false)$/.test($)?(V(f,$),l++):V(f,J(f))))}else if(h.match(/^-[0-9]$/)&&h.match(v)&&N(h.slice(1),d.bools))f=h.slice(1),V(f,J(f));else if(h==="--"){T=s.slice(l+1);break}else if(c["halt-at-non-option"]){T=s.slice(l);break}else gt(h)}U(B,!0),U(B,!1),D(B),et(),X(B,d.aliases,b,!0),nt(B),c["set-placeholder-key"]&&Wt(B),Object.keys(d.counts).forEach(function(l){Ct(B,l.split("."))||V(l,0)}),u&&T.length&&(B[m]=[]),T.forEach(function(l){B[m].push(l)}),c["camel-case-expansion"]&&c["strip-dashed"]&&Object.keys(B).filter(l=>l!=="--"&&l.includes("-")).forEach(l=>{delete B[l]}),c["strip-aliased"]&&[].concat(...Object.keys(a).map(l=>a[l])).forEach(l=>{c["camel-case-expansion"]&&l.includes("-")&&delete B[l.split(".").map(h=>vt(h)).join(".")],delete B[l]});function gt(l){let h=P("_",l);(typeof h=="string"||typeof h=="number")&&B._.push(h)}function Qt(l,h,w,g){let f,S=N(h,d.nargs);if(S=typeof S!="number"||isNaN(S)?1:S,S===0)return _t(g)||(Y=Error(y("Argument unexpected for: %s",h))),V(h,J(h)),l;let C=_t(g)?0:1;if(c["nargs-eats-options"])w.length-(l+1)+C<S&&(Y=Error(y("Not enough arguments following: %s",h))),C=S;else{for(f=l+1;f<w.length&&(!w[f].match(/^-[^0-9]/)||w[f].match(v)||Q(w[f]));f++)C++;C<S&&(Y=Error(y("Not enough arguments following: %s",h)))}let $=Math.min(C,S);for(!_t(g)&&$>0&&(V(h,g),$--),f=l+1;f<$+l+1;f++)V(h,w[f]);return l+$}function Lt(l,h,w,g){let f=[],S=g||w[l+1],C=N(h,d.nargs);if(N(h,d.bools)&&!/^(true|false)$/.test(S))f.push(!0);else if(_t(S)||_t(g)&&/^-/.test(S)&&!v.test(S)&&!Q(S)){if(b[h]!==void 0){let $=b[h];f=Array.isArray($)?$:[$]}}else{_t(g)||f.push(E(h,g,!0));for(let $=l+1;$<w.length&&!(!c["greedy-arrays"]&&f.length>0||C&&typeof C=="number"&&f.length>=C||(S=w[$],/^-/.test(S)&&!v.test(S)&&!Q(S)));$++)l=$,f.push(E(h,S,o))}return typeof C=="number"&&(C&&f.length<C||isNaN(C)&&f.length===0)&&(Y=Error(y("Not enough arguments following: %s",h))),V(h,f),l}function V(l,h,w=o){if(/-/.test(l)&&c["camel-case-expansion"]){let S=l.split(".").map(function(C){return vt(C)}).join(".");I(l,S)}let g=E(l,h,w),f=l.split(".");xt(B,f,g),d.aliases[l]&&d.aliases[l].forEach(function(S){let C=S.split(".");xt(B,C,g)}),f.length>1&&c["dot-notation"]&&(d.aliases[f[0]]||[]).forEach(function(S){let C=S.split("."),$=[].concat(f);$.shift(),C=C.concat($),(d.aliases[l]||[]).includes(C.join("."))||xt(B,C,g)}),N(l,d.normalize)&&!N(l,d.arrays)&&[l].concat(d.aliases[l]||[]).forEach(function(C){Object.defineProperty(At,C,{enumerable:!0,get(){return h},set($){h=typeof $=="string"?jt.normalize($):$}})})}function I(l,h){d.aliases[l]&&d.aliases[l].length||(d.aliases[l]=[h],O[h]=!0),d.aliases[h]&&d.aliases[h].length||I(h,l)}function E(l,h,w){w&&(h=Es(h)),(N(l,d.bools)||N(l,d.counts))&&typeof h=="string"&&(h=h==="true");let g=Array.isArray(h)?h.map(function(f){return P(l,f)}):P(l,h);return N(l,d.counts)&&(_t(g)||typeof g=="boolean")&&(g=$e()),N(l,d.normalize)&&N(l,d.arrays)&&(Array.isArray(h)?g=h.map(f=>jt.normalize(f)):g=jt.normalize(h)),g}function P(l,h){return!c["parse-positional-numbers"]&&l==="_"||!N(l,d.strings)&&!N(l,d.bools)&&!Array.isArray(h)&&(de(h)&&c["parse-numbers"]&&Number.isSafeInteger(Math.floor(parseFloat(`${h}`)))||!_t(h)&&N(l,d.numbers))&&(h=Number(h)),h}function D(l){let h=Object.create(null);X(h,d.aliases,b),Object.keys(d.configs).forEach(function(w){let g=l[w]||h[w];if(g)try{let f=null,S=jt.resolve(jt.cwd(),g),C=d.configs[w];if(typeof C=="function"){try{f=C(S)}catch($){f=$}if(f instanceof Error){Y=f;return}}else f=jt.require(S);H(f)}catch(f){f.name==="PermissionDenied"?Y=f:l[w]&&(Y=Error(y("Invalid JSON config file: %s",g)))}})}function H(l,h){Object.keys(l).forEach(function(w){let g=l[w],f=h?h+"."+w:w;typeof g=="object"&&g!==null&&!Array.isArray(g)&&c["dot-notation"]?H(g,f):(!Ct(B,f.split("."))||N(f,d.arrays)&&c["combine-arrays"])&&V(f,g)})}function et(){typeof _<"u"&&_.forEach(function(l){H(l)})}function U(l,h){if(typeof p>"u")return;let w=typeof p=="string"?p:"",g=jt.env();Object.keys(g).forEach(function(f){if(w===""||f.lastIndexOf(w,0)===0){let S=f.split("__").map(function(C,$){return $===0&&(C=C.substring(w.length)),vt(C)});(h&&d.configs[S.join(".")]||!h)&&!Ct(l,S)&&V(S.join("."),g[f])}})}function nt(l){let h,w=new Set;Object.keys(l).forEach(function(g){if(!w.has(g)&&(h=N(g,d.coercions),typeof h=="function"))try{let f=P(g,h(l[g]));[].concat(d.aliases[g]||[],g).forEach(S=>{w.add(S),l[S]=f})}catch(f){Y=f}})}function Wt(l){return d.keys.forEach(h=>{~h.indexOf(".")||typeof l[h]>"u"&&(l[h]=void 0)}),l}function X(l,h,w,g=!1){Object.keys(w).forEach(function(f){Ct(l,f.split("."))||(xt(l,f.split("."),w[f]),g&&(j[f]=!0),(h[f]||[]).forEach(function(S){Ct(l,S.split("."))||xt(l,S.split("."),w[f])}))})}function Ct(l,h){let w=l;c["dot-notation"]||(h=[h.join(".")]),h.slice(0,-1).forEach(function(f){w=w[f]||{}});let g=h[h.length-1];return typeof w!="object"?!1:g in w}function xt(l,h,w){let g=l;c["dot-notation"]||(h=[h.join(".")]),h.slice(0,-1).forEach(function(st){st=dn(st),typeof g=="object"&&g[st]===void 0&&(g[st]={}),typeof g[st]!="object"||Array.isArray(g[st])?(Array.isArray(g[st])?g[st].push({}):g[st]=[g[st],{}],g=g[st][g[st].length-1]):g=g[st]});let f=dn(h[h.length-1]),S=N(h.join("."),d.arrays),C=Array.isArray(w),$=c["duplicate-arguments-array"];!$&&N(f,d.nargs)&&($=!0,(!_t(g[f])&&d.nargs[f]===1||Array.isArray(g[f])&&g[f].length===d.nargs[f])&&(g[f]=void 0)),w===$e()?g[f]=$e(g[f]):Array.isArray(g[f])?$&&S&&C?g[f]=c["flatten-duplicate-arrays"]?g[f].concat(w):(Array.isArray(g[f][0])?g[f]:[g[f]]).concat([w]):!$&&Boolean(S)===Boolean(C)?g[f]=w:g[f]=g[f].concat([w]):g[f]===void 0&&S?g[f]=C?w:[w]:$&&!(g[f]===void 0||N(f,d.counts)||N(f,d.bools))?g[f]=[g[f],w]:g[f]=w}function Dt(...l){l.forEach(function(h){Object.keys(h||{}).forEach(function(w){d.aliases[w]||(d.aliases[w]=[].concat(a[w]||[]),d.aliases[w].concat(w).forEach(function(g){if(/-/.test(g)&&c["camel-case-expansion"]){let f=vt(g);f!==w&&d.aliases[w].indexOf(f)===-1&&(d.aliases[w].push(f),O[f]=!0)}}),d.aliases[w].concat(w).forEach(function(g){if(g.length>1&&/[A-Z]/.test(g)&&c["camel-case-expansion"]){let f=ue(g,"-");f!==w&&d.aliases[w].indexOf(f)===-1&&(d.aliases[w].push(f),O[f]=!0)}}),d.aliases[w].forEach(function(g){d.aliases[g]=[w].concat(d.aliases[w].filter(function(f){return g!==f}))}))})})}function N(l,h){let w=[].concat(d.aliases[l]||[],l),g=Object.keys(h),f=w.find(S=>g.includes(S));return f?h[f]:!1}function Pe(l){let h=Object.keys(d);return[].concat(h.map(g=>d[g])).some(function(g){return Array.isArray(g)?g.includes(l):g[l]})}function F(l,...h){return[].concat(...h).some(function(g){let f=l.match(g);return f&&Pe(f[1])})}function K(l){if(l.match(v)||!l.match(/^-[^-]+/))return!1;let h=!0,w,g=l.slice(1).split("");for(let f=0;f<g.length;f++){if(w=l.slice(f+2),!Pe(g[f])){h=!1;break}if(g[f+1]&&g[f+1]==="="||w==="-"||/[A-Za-z]/.test(g[f])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(w)||g[f+1]&&g[f+1].match(/\W/))break}return h}function Q(l){return c["unknown-options-as-args"]&&z(l)}function z(l){return l=l.replace(/^-{3,}/,"--"),l.match(v)||K(l)?!1:!F(l,/^-+([^=]+?)=[\s\S]*$/,R,/^-+([^=]+?)$/,/^-+([^=]+?)-$/,/^-+([^=]+?\d+)$/,/^-+([^=]+?)\W+.*$/)}function J(l){return!N(l,d.bools)&&!N(l,d.counts)&&`${l}`in b?b[l]:k(bt(l))}function k(l){return{[ht.BOOLEAN]:!0,[ht.STRING]:"",[ht.NUMBER]:void 0,[ht.ARRAY]:[]}[l]}function bt(l){let h=ht.BOOLEAN;return N(l,d.strings)?h=ht.STRING:N(l,d.numbers)?h=ht.NUMBER:N(l,d.bools)?h=ht.BOOLEAN:N(l,d.arrays)&&(h=ht.ARRAY),h}function _t(l){return l===void 0}function ce(){Object.keys(d.counts).find(l=>N(l,d.arrays)?(Y=Error(y("Invalid configuration: %s, opts.count excludes opts.array.",l)),!0):N(l,d.nargs)?(Y=Error(y("Invalid configuration: %s, opts.count excludes opts.narg.",l)),!0):!1)}return{aliases:Object.assign({},d.aliases),argv:Object.assign(At,B),configuration:c,defaulted:Object.assign({},j),error:Y,newAliases:Object.assign({},O)}}};function ys(i){let t=[],e=Object.create(null),n=!0;for(Object.keys(i).forEach(function(s){t.push([].concat(i[s],s))});n;){n=!1;for(let s=0;s<t.length;s++)for(let o=s+1;o<t.length;o++)if(t[s].filter(function(c){return t[o].indexOf(c)!==-1}).length){t[s]=t[s].concat(t[o]),t.splice(o,1),n=!0;break}}return t.forEach(function(s){s=s.filter(function(a,c,b){return b.indexOf(a)===c});let o=s.pop();o!==void 0&&typeof o=="string"&&(e[o]=s)}),e}function $e(i){return i!==void 0?i+1:1}function dn(i){return i==="__proto__"?"___proto___":i}function Es(i){return typeof i=="string"&&(i[0]==="'"||i[0]==='"')&&i[i.length-1]===i[0]?i.substring(1,i.length-1):i}import{readFileSync as As}from"fs";var Fe,Ne,Le,pn=process&&process.env&&process.env.YARGS_MIN_NODE_VERSION?Number(process.env.YARGS_MIN_NODE_VERSION):12,mn=(Ne=(Fe=process==null?void 0:process.versions)===null||Fe===void 0?void 0:Fe.node)!==null&&Ne!==void 0?Ne:(Le=process==null?void 0:process.version)===null||Le===void 0?void 0:Le.slice(1);if(mn&&Number(mn.match(/^([^.]+)/)[1])<pn)throw Error(`yargs parser supports a minimum Node.js version of ${pn}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);var Ps=process?process.env:{},gn=new pe({cwd:process.cwd,env:()=>Ps,format:Cs,normalize:xs,resolve:js,require:i=>{if(typeof wt<"u")return wt(i);if(i.match(/\.json$/))return JSON.parse(As(i,"utf8"));throw Error("only .json config files are supported in ESM")}}),ne=function(t,e){return gn.parse(t.slice(),e).argv};ne.detailed=function(i,t){return gn.parse(i.slice(),t)};ne.camelCase=vt;ne.decamelize=ue;ne.looksLikeNumber=de;var We=ne;import{basename as Us,dirname as Hs,extname as Ys,relative as Bs,resolve as En}from"path";function bn(){return Ss()?0:1}function Ss(){return Is()&&!process.defaultApp}function Is(){return!!process.versions.electron}function De(i){return i.slice(bn()+1)}function _n(){return process.argv[bn()]}var G=class extends Error{constructor(t){super(t||"yargs error"),this.name="YError",Error.captureStackTrace&&Error.captureStackTrace(this,G)}};import{readFileSync as Ms,statSync as $s,writeFile as Fs}from"fs";import{format as Ns}from"util";import{resolve as Ls}from"path";var On={fs:{readFileSync:Ms,writeFile:Fs},format:Ns,resolve:Ls,exists:i=>{try{return $s(i).isFile()}catch{return!1}}};var Ot,ve=class{constructor(t){t=t||{},this.directory=t.directory||"./locales",this.updateFiles=typeof t.updateFiles=="boolean"?t.updateFiles:!0,this.locale=t.locale||"en",this.fallbackToLanguage=typeof t.fallbackToLanguage=="boolean"?t.fallbackToLanguage:!0,this.cache=Object.create(null),this.writeQueue=[]}__(...t){if(typeof arguments[0]!="string")return this._taggedLiteral(arguments[0],...arguments);let e=t.shift(),n=function(){};return typeof t[t.length-1]=="function"&&(n=t.pop()),n=n||function(){},this.cache[this.locale]||this._readLocaleFile(),!this.cache[this.locale][e]&&this.updateFiles?(this.cache[this.locale][e]=e,this._enqueueWrite({directory:this.directory,locale:this.locale,cb:n})):n(),Ot.format.apply(Ot.format,[this.cache[this.locale][e]||e].concat(t))}__n(){let t=Array.prototype.slice.call(arguments),e=t.shift(),n=t.shift(),s=t.shift(),o=function(){};typeof t[t.length-1]=="function"&&(o=t.pop()),this.cache[this.locale]||this._readLocaleFile();let a=s===1?e:n;this.cache[this.locale][e]&&(a=this.cache[this.locale][e][s===1?"one":"other"]),!this.cache[this.locale][e]&&this.updateFiles?(this.cache[this.locale][e]={one:e,other:n},this._enqueueWrite({directory:this.directory,locale:this.locale,cb:o})):o();let c=[a];return~a.indexOf("%d")&&c.push(s),Ot.format.apply(Ot.format,c.concat(t))}setLocale(t){this.locale=t}getLocale(){return this.locale}updateLocale(t){this.cache[this.locale]||this._readLocaleFile();for(let e in t)Object.prototype.hasOwnProperty.call(t,e)&&(this.cache[this.locale][e]=t[e])}_taggedLiteral(t,...e){let n="";return t.forEach(function(s,o){let a=e[o+1];n+=s,typeof a<"u"&&(n+="%s")}),this.__.apply(this,[n].concat([].slice.call(e,1)))}_enqueueWrite(t){this.writeQueue.push(t),this.writeQueue.length===1&&this._processWriteQueue()}_processWriteQueue(){let t=this,e=this.writeQueue[0],n=e.directory,s=e.locale,o=e.cb,a=this._resolveLocaleFile(n,s),c=JSON.stringify(this.cache[s],null,2);Ot.fs.writeFile(a,c,"utf-8",function(b){t.writeQueue.shift(),t.writeQueue.length>0&&t._processWriteQueue(),o(b)})}_readLocaleFile(){let t={},e=this._resolveLocaleFile(this.directory,this.locale);try{Ot.fs.readFileSync&&(t=JSON.parse(Ot.fs.readFileSync(e,"utf-8")))}catch(n){if(n instanceof SyntaxError&&(n.message="syntax error in "+e),n.code==="ENOENT")t={};else throw n}this.cache[this.locale]=t}_resolveLocaleFile(t,e){let n=Ot.resolve(t,"./",e+".json");if(this.fallbackToLanguage&&!this._fileExistsSync(n)&&~e.lastIndexOf("_")){let s=Ot.resolve(t,"./",e.split("_")[0]+".json");this._fileExistsSync(s)&&(n=s)}return n}_fileExistsSync(t){return Ot.exists(t)}};function wn(i,t){Ot=t;let e=new ve(i);return{__:e.__.bind(e),__n:e.__n.bind(e),setLocale:e.setLocale.bind(e),getLocale:e.getLocale.bind(e),updateLocale:e.updateLocale.bind(e),locale:e.locale}}var Ws=i=>wn(i,On),yn=Ws;var Vs="require is not supported by ESM",Cn="loading a directory of commands is not supported yet for ESM",se;try{se=Ts(import.meta.url)}catch{se=process.cwd()}var Gs=se.substring(0,se.lastIndexOf("node_modules")),Re={assert:{notStrictEqual:Ds,strictEqual:vs},cliui:Me,findUp:hn,getEnv:i=>process.env[i],inspect:Rs,getCallerFile:()=>{throw new G(Cn)},getProcessArgvBin:_n,mainFilename:Gs||process.cwd(),Parser:We,path:{basename:Us,dirname:Hs,extname:Ys,relative:Bs,resolve:En},process:{argv:()=>process.argv,cwd:process.cwd,emitWarning:(i,t)=>process.emitWarning(i,t),execPath:()=>process.execPath,exit:process.exit,nextTick:process.nextTick,stdColumns:typeof process.stdout.columns<"u"?process.stdout.columns:null},readFileSync:zs,require:()=>{throw new G(Vs)},requireDirectory:()=>{throw new G(Cn)},stringWidth:i=>[...i].length,y18n:yn({directory:En(se,"../../../locales"),updateFiles:!1})};function ot(i,t,e,n){e.assert.notStrictEqual(i,t,n)}function ze(i,t){t.assert.strictEqual(typeof i,"string")}function Jt(i){return Object.keys(i)}function q(i){return!!i&&!!i.then&&typeof i.then=="function"}function Pt(i){let e=i.replace(/\s{2,}/g," ").split(/\s+(?![^[]*]|[^<]*>)/),n=/\.*[\][<>]/g,s=e.shift();if(!s)throw new Error(`No command found in: ${i}`);let o={cmd:s.replace(n,""),demanded:[],optional:[]};return e.forEach((a,c)=>{let b=!1;a=a.replace(/\s/g,""),/\.+[\]>]/.test(a)&&c===e.length-1&&(b=!0),/^\[/.test(a)?o.optional.push({cmd:a.replace(n,"").split("|"),variadic:b}):o.demanded.push({cmd:a.replace(n,"").split("|"),variadic:b})}),o}var qs=["first","second","third","fourth","fifth","sixth"];function x(i,t,e){function n(){return typeof i=="object"?[{demanded:[],optional:[]},i,t]:[Pt(`cmd ${i}`),t,e]}try{let s=0,[o,a,c]=n(),b=[].slice.call(a);for(;b.length&&b[b.length-1]===void 0;)b.pop();let _=c||b.length;if(_<o.demanded.length)throw new G(`Not enough arguments provided. Expected ${o.demanded.length} but received ${b.length}.`);let p=o.demanded.length+o.optional.length;if(_>p)throw new G(`Too many arguments provided. Expected max ${p} but received ${_}.`);o.demanded.forEach(u=>{let m=b.shift(),O=xn(m);u.cmd.filter(y=>y===O||y==="*").length===0&&jn(O,u.cmd,s),s+=1}),o.optional.forEach(u=>{if(b.length===0)return;let m=b.shift(),O=xn(m);u.cmd.filter(y=>y===O||y==="*").length===0&&jn(O,u.cmd,s),s+=1})}catch(s){console.warn(s.stack)}}function xn(i){return Array.isArray(i)?"array":i===null?"null":typeof i}function jn(i,t,e){throw new G(`Invalid ${qs[e]||"manyith"} argument. Expected ${t.join(" or ")} but received ${i}.`)}var me=class{constructor(t){this.globalMiddleware=[],this.frozens=[],this.yargs=t}addMiddleware(t,e,n=!0,s=!1){if(x("<array|function> [boolean] [boolean] [boolean]",[t,e,n],arguments.length),Array.isArray(t)){for(let o=0;o<t.length;o++){if(typeof t[o]!="function")throw Error("middleware must be a function");let a=t[o];a.applyBeforeValidation=e,a.global=n}Array.prototype.push.apply(this.globalMiddleware,t)}else if(typeof t=="function"){let o=t;o.applyBeforeValidation=e,o.global=n,o.mutates=s,this.globalMiddleware.push(t)}return this.yargs}addCoerceMiddleware(t,e){let n=this.yargs.getAliases();return this.globalMiddleware=this.globalMiddleware.filter(s=>{let o=[...n[e]||[],e];return s.option?!o.includes(s.option):!0}),t.option=e,this.addMiddleware(t,!0,!0,!0)}getMiddleware(){return this.globalMiddleware}freeze(){this.frozens.push([...this.globalMiddleware])}unfreeze(){let t=this.frozens.pop();t!==void 0&&(this.globalMiddleware=t)}reset(){this.globalMiddleware=this.globalMiddleware.filter(t=>t.global)}};function An(i){return i?i.map(t=>(t.applyBeforeValidation=!1,t)):[]}function Rt(i,t,e,n){return e.reduce((s,o)=>{if(o.applyBeforeValidation!==n)return s;if(o.mutates){if(o.applied)return s;o.applied=!0}if(q(s))return s.then(a=>Promise.all([a,o(a,t)])).then(([a,c])=>Object.assign(a,c));{let a=o(s,t);return q(a)?a.then(c=>Object.assign(s,c)):Object.assign(s,a)}},i)}function zt(i,t,e=n=>{throw n}){try{let n=Ks(i)?i():i;return q(n)?n.then(s=>t(s)):t(n)}catch(n){return e(n)}}function Ks(i){return typeof i=="function"}function Te(i){if(typeof wt>"u")return null;for(let t=0,e=Object.keys(wt.cache),n;t<e.length;t++)if(n=wt.cache[e[t]],n.exports===i)return n;return null}var Zt=/(^\*)|(^\$0)/,Ue=class{constructor(t,e,n,s){this.requireCache=new Set,this.handlers={},this.aliasMap={},this.frozens=[],this.shim=s,this.usage=t,this.globalMiddleware=n,this.validation=e}addDirectory(t,e,n,s){s=s||{},typeof s.recurse!="boolean"&&(s.recurse=!1),Array.isArray(s.extensions)||(s.extensions=["js"]);let o=typeof s.visit=="function"?s.visit:a=>a;s.visit=(a,c,b)=>{let _=o(a,c,b);if(_){if(this.requireCache.has(c))return _;this.requireCache.add(c),this.addHandler(_)}return _},this.shim.requireDirectory({require:e,filename:n},t,s)}addHandler(t,e,n,s,o,a){let c=[],b=An(o);if(s=s||(()=>{}),Array.isArray(t))if(Xs(t))[t,...c]=t;else for(let _ of t)this.addHandler(_);else if(Js(t)){let _=Array.isArray(t.command)||typeof t.command=="string"?t.command:this.moduleName(t);t.aliases&&(_=[].concat(_).concat(t.aliases)),this.addHandler(_,this.extractDesc(t),t.builder,t.handler,t.middlewares,t.deprecated);return}else if(Pn(n)){this.addHandler([t].concat(c),e,n.builder,n.handler,n.middlewares,n.deprecated);return}if(typeof t=="string"){let _=Pt(t);c=c.map(m=>Pt(m).cmd);let p=!1,u=[_.cmd].concat(c).filter(m=>Zt.test(m)?(p=!0,!1):!0);u.length===0&&p&&u.push("$0"),p&&(_.cmd=u[0],c=u.slice(1),t=t.replace(Zt,_.cmd)),c.forEach(m=>{this.aliasMap[m]=_.cmd}),e!==!1&&this.usage.command(t,e,p,c,a),this.handlers[_.cmd]={original:t,description:e,handler:s,builder:n||{},middlewares:b,deprecated:a,demanded:_.demanded,optional:_.optional},p&&(this.defaultCommand=this.handlers[_.cmd])}}getCommandHandlers(){return this.handlers}getCommands(){return Object.keys(this.handlers).concat(Object.keys(this.aliasMap))}hasDefaultCommand(){return!!this.defaultCommand}runCommand(t,e,n,s,o,a){let c=this.handlers[t]||this.handlers[this.aliasMap[t]]||this.defaultCommand,b=e.getInternalMethods().getContext(),_=b.commands.slice(),p=!t;t&&(b.commands.push(t),b.fullCommands.push(c.original));let u=this.applyBuilderUpdateUsageAndParse(p,c,e,n.aliases,_,s,o,a);return q(u)?u.then(m=>this.applyMiddlewareAndGetResult(p,c,m.innerArgv,b,o,m.aliases,e)):this.applyMiddlewareAndGetResult(p,c,u.innerArgv,b,o,u.aliases,e)}applyBuilderUpdateUsageAndParse(t,e,n,s,o,a,c,b){let _=e.builder,p=n;if(ge(_)){n.getInternalMethods().getUsageInstance().freeze();let u=_(n.getInternalMethods().reset(s),b);if(q(u))return u.then(m=>(p=In(m)?m:n,this.parseAndUpdateUsage(t,e,p,o,a,c)))}else Qs(_)&&(n.getInternalMethods().getUsageInstance().freeze(),p=n.getInternalMethods().reset(s),Object.keys(e.builder).forEach(u=>{p.option(u,_[u])}));return this.parseAndUpdateUsage(t,e,p,o,a,c)}parseAndUpdateUsage(t,e,n,s,o,a){t&&n.getInternalMethods().getUsageInstance().unfreeze(!0),this.shouldUpdateUsage(n)&&n.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(s,e),e.description);let c=n.getInternalMethods().runYargsParserAndExecuteCommands(null,void 0,!0,o,a);return q(c)?c.then(b=>({aliases:n.parsed.aliases,innerArgv:b})):{aliases:n.parsed.aliases,innerArgv:c}}shouldUpdateUsage(t){return!t.getInternalMethods().getUsageInstance().getUsageDisabled()&&t.getInternalMethods().getUsageInstance().getUsage().length===0}usageFromParentCommandsCommandHandler(t,e){let n=Zt.test(e.original)?e.original.replace(Zt,"").trim():e.original,s=t.filter(o=>!Zt.test(o));return s.push(n),`$0 ${s.join(" ")}`}handleValidationAndGetResult(t,e,n,s,o,a,c,b){if(!a.getInternalMethods().getHasOutput()){let _=a.getInternalMethods().runValidation(o,b,a.parsed.error,t);n=zt(n,p=>(_(p),p))}if(e.handler&&!a.getInternalMethods().getHasOutput()){a.getInternalMethods().setHasOutput();let _=!!a.getOptions().configuration["populate--"];a.getInternalMethods().postProcess(n,_,!1,!1),n=Rt(n,a,c,!1),n=zt(n,p=>{let u=e.handler(p);return q(u)?u.then(()=>p):p}),t||a.getInternalMethods().getUsageInstance().cacheHelpMessage(),q(n)&&!a.getInternalMethods().hasParseCallback()&&n.catch(p=>{try{a.getInternalMethods().getUsageInstance().fail(null,p)}catch{}})}return t||(s.commands.pop(),s.fullCommands.pop()),n}applyMiddlewareAndGetResult(t,e,n,s,o,a,c){let b={};if(o)return n;c.getInternalMethods().getHasOutput()||(b=this.populatePositionals(e,n,s,c));let _=this.globalMiddleware.getMiddleware().slice(0).concat(e.middlewares),p=Rt(n,c,_,!0);return q(p)?p.then(u=>this.handleValidationAndGetResult(t,e,u,s,a,c,_,b)):this.handleValidationAndGetResult(t,e,p,s,a,c,_,b)}populatePositionals(t,e,n,s){e._=e._.slice(n.commands.length);let o=t.demanded.slice(0),a=t.optional.slice(0),c={};for(this.validation.positionalCount(o.length,e._.length);o.length;){let b=o.shift();this.populatePositional(b,e,c)}for(;a.length;){let b=a.shift();this.populatePositional(b,e,c)}return e._=n.commands.concat(e._.map(b=>""+b)),this.postProcessPositionals(e,c,this.cmdToParseOptions(t.original),s),c}populatePositional(t,e,n){let s=t.cmd[0];t.variadic?n[s]=e._.splice(0).map(String):e._.length&&(n[s]=[String(e._.shift())])}cmdToParseOptions(t){let e={array:[],default:{},alias:{},demand:{}},n=Pt(t);return n.demanded.forEach(s=>{let[o,...a]=s.cmd;s.variadic&&(e.array.push(o),e.default[o]=[]),e.alias[o]=a,e.demand[o]=!0}),n.optional.forEach(s=>{let[o,...a]=s.cmd;s.variadic&&(e.array.push(o),e.default[o]=[]),e.alias[o]=a}),e}postProcessPositionals(t,e,n,s){let o=Object.assign({},s.getOptions());o.default=Object.assign(n.default,o.default);for(let _ of Object.keys(n.alias))o.alias[_]=(o.alias[_]||[]).concat(n.alias[_]);o.array=o.array.concat(n.array),o.config={};let a=[];if(Object.keys(e).forEach(_=>{e[_].map(p=>{o.configuration["unknown-options-as-args"]&&(o.key[_]=!0),a.push(`--${_}`),a.push(p)})}),!a.length)return;let c=Object.assign({},o.configuration,{"populate--":!1}),b=this.shim.Parser.detailed(a,Object.assign({},o,{configuration:c}));if(b.error)s.getInternalMethods().getUsageInstance().fail(b.error.message,b.error);else{let _=Object.keys(e);Object.keys(e).forEach(p=>{_.push(...b.aliases[p])}),Object.keys(b.argv).forEach(p=>{_.includes(p)&&(e[p]||(e[p]=b.argv[p]),!this.isInConfigs(s,p)&&!this.isDefaulted(s,p)&&Object.prototype.hasOwnProperty.call(t,p)&&Object.prototype.hasOwnProperty.call(b.argv,p)&&(Array.isArray(t[p])||Array.isArray(b.argv[p]))?t[p]=[].concat(t[p],b.argv[p]):t[p]=b.argv[p])})}}isDefaulted(t,e){let{default:n}=t.getOptions();return Object.prototype.hasOwnProperty.call(n,e)||Object.prototype.hasOwnProperty.call(n,this.shim.Parser.camelCase(e))}isInConfigs(t,e){let{configObjects:n}=t.getOptions();return n.some(s=>Object.prototype.hasOwnProperty.call(s,e))||n.some(s=>Object.prototype.hasOwnProperty.call(s,this.shim.Parser.camelCase(e)))}runDefaultBuilderOn(t){if(!this.defaultCommand)return;if(this.shouldUpdateUsage(t)){let n=Zt.test(this.defaultCommand.original)?this.defaultCommand.original:this.defaultCommand.original.replace(/^[^[\]<>]*/,"$0 ");t.getInternalMethods().getUsageInstance().usage(n,this.defaultCommand.description)}let e=this.defaultCommand.builder;if(ge(e))return e(t,!0);Pn(e)||Object.keys(e).forEach(n=>{t.option(n,e[n])})}moduleName(t){let e=Te(t);if(!e)throw new Error(`No command name given for module: ${this.shim.inspect(t)}`);return this.commandFromFilename(e.filename)}commandFromFilename(t){return this.shim.path.basename(t,this.shim.path.extname(t))}extractDesc({describe:t,description:e,desc:n}){for(let s of[t,e,n]){if(typeof s=="string"||s===!1)return s;ot(s,!0,this.shim)}return!1}freeze(){this.frozens.push({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand})}unfreeze(){let t=this.frozens.pop();ot(t,void 0,this.shim),{handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand}=t}reset(){return this.handlers={},this.aliasMap={},this.defaultCommand=void 0,this.requireCache=new Set,this}};function Sn(i,t,e,n){return new Ue(i,t,e,n)}function Pn(i){return typeof i=="object"&&!!i.builder&&typeof i.handler=="function"}function Xs(i){return i.every(t=>typeof t=="string")}function ge(i){return typeof i=="function"}function Qs(i){return typeof i=="object"}function Js(i){return typeof i=="object"&&!Array.isArray(i)}function St(i={},t=()=>!0){let e={};return Jt(i).forEach(n=>{t(n,i[n])&&(e[n]=i[n])}),e}function It(i){typeof process>"u"||[process.stdout,process.stderr].forEach(t=>{let e=t;e._handle&&e.isTTY&&typeof e._handle.setBlocking=="function"&&e._handle.setBlocking(i)})}function Zs(i){return typeof i=="boolean"}function $n(i,t){let e=t.y18n.__,n={},s=[];n.failFn=function(E){s.push(E)};let o=null,a=null,c=!0;n.showHelpOnFail=function(E=!0,P){let[D,H]=typeof E=="string"?[!0,E]:[E,P];return i.getInternalMethods().isGlobalContext()&&(a=H),o=H,c=D,n};let b=!1;n.fail=function(E,P){let D=i.getInternalMethods().getLoggerInstance();if(s.length)for(let H=s.length-1;H>=0;--H){let et=s[H];if(Zs(et)){if(P)throw P;if(E)throw Error(E)}else et(E,P,n)}else{if(i.getExitProcess()&&It(!0),!b){b=!0,c&&(i.showHelp("error"),D.error()),(E||P)&&D.error(E||P);let H=o||a;H&&((E||P)&&D.error(""),D.error(H))}if(P=P||new G(E),i.getExitProcess())return i.exit(1);if(i.getInternalMethods().hasParseCallback())return i.exit(1,P);throw P}};let _=[],p=!1;n.usage=(I,E)=>I===null?(p=!0,_=[],n):(p=!1,_.push([I,E||""]),n),n.getUsage=()=>_,n.getUsageDisabled=()=>p,n.getPositionalGroupName=()=>e("Positionals:");let u=[];n.example=(I,E)=>{u.push([I,E||""])};let m=[];n.command=function(E,P,D,H,et=!1){D&&(m=m.map(U=>(U[2]=!1,U))),m.push([E,P||"",D,H,et])},n.getCommands=()=>m;let O={};n.describe=function(E,P){Array.isArray(E)?E.forEach(D=>{n.describe(D,P)}):typeof E=="object"?Object.keys(E).forEach(D=>{n.describe(D,E[D])}):O[E]=P},n.getDescriptions=()=>O;let j=[];n.epilog=I=>{j.push(I)};let y=!1,d;n.wrap=I=>{y=!0,d=I},n.getWrap=()=>t.getEnv("YARGS_DISABLE_WRAP")?null:(y||(d=Qt(),y=!0),d);let v="__yargsString__:";n.deferY18nLookup=I=>v+I,n.help=function(){if(T)return T;Y();let E=i.customScriptName?i.$0:t.path.basename(i.$0),P=i.getDemandedOptions(),D=i.getDemandedCommands(),H=i.getDeprecatedOptions(),et=i.getGroups(),U=i.getOptions(),nt=[];nt=nt.concat(Object.keys(O)),nt=nt.concat(Object.keys(P)),nt=nt.concat(Object.keys(D)),nt=nt.concat(Object.keys(U.default)),nt=nt.filter(At),nt=Object.keys(nt.reduce((F,K)=>(K!=="_"&&(F[K]=!0),F),{}));let Wt=n.getWrap(),X=t.cliui({width:Wt,wrap:!!Wt});if(!p){if(_.length)_.forEach(F=>{X.div({text:`${F[0].replace(/\$0/g,E)}`}),F[1]&&X.div({text:`${F[1]}`,padding:[1,0,0,0]})}),X.div();else if(m.length){let F=null;D._?F=`${E} <${e("command")}>
`:F=`${E} [${e("command")}]
`,X.div(`${F}`)}}if(m.length>1||m.length===1&&!m[0][2]){X.div(e("Commands:"));let F=i.getInternalMethods().getContext(),K=F.commands.length?`${F.commands.join(" ")} `:"";i.getInternalMethods().getParserConfiguration()["sort-commands"]===!0&&(m=m.sort((z,J)=>z[0].localeCompare(J[0])));let Q=E?`${E} `:"";m.forEach(z=>{let J=`${Q}${K}${z[0].replace(/^\$0 ?/,"")}`;X.span({text:J,padding:[0,2,0,2],width:R(m,Wt,`${E}${K}`)+4},{text:z[1]});let k=[];z[2]&&k.push(`[${e("default")}]`),z[3]&&z[3].length&&k.push(`[${e("aliases:")} ${z[3].join(", ")}]`),z[4]&&(typeof z[4]=="string"?k.push(`[${e("deprecated: %s",z[4])}]`):k.push(`[${e("deprecated")}]`)),k.length?X.div({text:k.join(" "),padding:[0,0,0,2],align:"right"}):X.div()}),X.div()}let Ct=(Object.keys(U.alias)||[]).concat(Object.keys(i.parsed.newAliases)||[]);nt=nt.filter(F=>!i.parsed.newAliases[F]&&Ct.every(K=>(U.alias[K]||[]).indexOf(F)===-1));let xt=e("Options:");et[xt]||(et[xt]=[]),B(nt,U.alias,et,xt);let Dt=F=>/^--/.test(be(F)),N=Object.keys(et).filter(F=>et[F].length>0).map(F=>{let K=et[F].filter(At).map(Q=>{if(Ct.includes(Q))return Q;for(let z=0,J;(J=Ct[z])!==void 0;z++)if((U.alias[J]||[]).includes(Q))return J;return Q});return{groupName:F,normalizedKeys:K}}).filter(({normalizedKeys:F})=>F.length>0).map(({groupName:F,normalizedKeys:K})=>{let Q=K.reduce((z,J)=>(z[J]=[J].concat(U.alias[J]||[]).map(k=>F===n.getPositionalGroupName()?k:(/^[0-9]$/.test(k)?U.boolean.includes(J)?"-":"--":k.length>1?"--":"-")+k).sort((k,bt)=>Dt(k)===Dt(bt)?0:Dt(k)?1:-1).join(", "),z),{});return{groupName:F,normalizedKeys:K,switches:Q}});if(N.filter(({groupName:F})=>F!==n.getPositionalGroupName()).some(({normalizedKeys:F,switches:K})=>!F.every(Q=>Dt(K[Q])))&&N.filter(({groupName:F})=>F!==n.getPositionalGroupName()).forEach(({normalizedKeys:F,switches:K})=>{F.forEach(Q=>{Dt(K[Q])&&(K[Q]=ks(K[Q],4))})}),N.forEach(({groupName:F,normalizedKeys:K,switches:Q})=>{X.div(F),K.forEach(z=>{let J=Q[z],k=O[z]||"",bt=null;k.includes(v)&&(k=e(k.substring(v.length))),U.boolean.includes(z)&&(bt=`[${e("boolean")}]`),U.count.includes(z)&&(bt=`[${e("count")}]`),U.string.includes(z)&&(bt=`[${e("string")}]`),U.normalize.includes(z)&&(bt=`[${e("string")}]`),U.array.includes(z)&&(bt=`[${e("array")}]`),U.number.includes(z)&&(bt=`[${e("number")}]`);let _t=h=>typeof h=="string"?`[${e("deprecated: %s",h)}]`:`[${e("deprecated")}]`,ce=[z in H?_t(H[z]):null,bt,z in P?`[${e("required")}]`:null,U.choices&&U.choices[z]?`[${e("choices:")} ${n.stringifiedValues(U.choices[z])}]`:null,gt(U.default[z],U.defaultDescription[z])].filter(Boolean).join(" ");X.span({text:be(J),padding:[0,2,0,2+Mn(J)],width:R(Q,Wt)+4},k);let l=i.getInternalMethods().getUsageConfiguration()["hide-types"]===!0;ce&&!l?X.div({text:ce,padding:[0,0,0,2],align:"right"}):X.div()}),X.div()}),u.length&&(X.div(e("Examples:")),u.forEach(F=>{F[0]=F[0].replace(/\$0/g,E)}),u.forEach(F=>{F[1]===""?X.div({text:F[0],padding:[0,2,0,2]}):X.div({text:F[0],padding:[0,2,0,2],width:R(u,Wt)+4},{text:F[1]})}),X.div()),j.length>0){let F=j.map(K=>K.replace(/\$0/g,E)).join(`
`);X.div(`${F}
`)}return X.toString().replace(/\s*$/,"")};function R(I,E,P){let D=0;return Array.isArray(I)||(I=Object.values(I).map(H=>[H])),I.forEach(H=>{D=Math.max(t.stringWidth(P?`${P} ${be(H[0])}`:be(H[0]))+Mn(H[0]),D)}),E&&(D=Math.min(D,parseInt((E*.5).toString(),10))),D}function Y(){let I=i.getDemandedOptions(),E=i.getOptions();(Object.keys(E.alias)||[]).forEach(P=>{E.alias[P].forEach(D=>{O[D]&&n.describe(P,O[D]),D in I&&i.demandOption(P,I[D]),E.boolean.includes(D)&&i.boolean(P),E.count.includes(D)&&i.count(P),E.string.includes(D)&&i.string(P),E.normalize.includes(D)&&i.normalize(P),E.array.includes(D)&&i.array(P),E.number.includes(D)&&i.number(P)})})}let T;n.cacheHelpMessage=function(){T=this.help()},n.clearCachedHelpMessage=function(){T=void 0},n.hasCachedHelpMessage=function(){return!!T};function B(I,E,P,D){let H=[],et=null;return Object.keys(P).forEach(U=>{H=H.concat(P[U])}),I.forEach(U=>{et=[U].concat(E[U]),et.some(nt=>H.indexOf(nt)!==-1)||P[D].push(U)}),H}function At(I){return i.getOptions().hiddenOptions.indexOf(I)<0||i.parsed.argv[i.getOptions().showHiddenOpt]}n.showHelp=I=>{let E=i.getInternalMethods().getLoggerInstance();I||(I="error"),(typeof I=="function"?I:E[I])(n.help())},n.functionDescription=I=>{let E=I.name?t.Parser.decamelize(I.name,"-"):e("generated-value");return["(",E,")"].join("")},n.stringifiedValues=function(E,P){let D="",H=P||", ",et=[].concat(E);return!E||!et.length||et.forEach(U=>{D.length&&(D+=H),D+=JSON.stringify(U)}),D};function gt(I,E){let P=`[${e("default:")} `;if(I===void 0&&!E)return null;if(E)P+=E;else switch(typeof I){case"string":P+=`"${I}"`;break;case"object":P+=JSON.stringify(I);break;default:P+=I}return`${P}]`}function Qt(){return t.process.stdColumns?Math.min(80,t.process.stdColumns):80}let Lt=null;n.version=I=>{Lt=I},n.showVersion=I=>{let E=i.getInternalMethods().getLoggerInstance();I||(I="error"),(typeof I=="function"?I:E[I])(Lt)},n.reset=function(E){return o=null,b=!1,_=[],p=!1,j=[],u=[],m=[],O=St(O,P=>!E[P]),n};let V=[];return n.freeze=function(){V.push({failMessage:o,failureOutput:b,usages:_,usageDisabled:p,epilogs:j,examples:u,commands:m,descriptions:O})},n.unfreeze=function(E=!1){let P=V.pop();!P||(E?(O={...P.descriptions,...O},m=[...P.commands,...m],_=[...P.usages,..._],u=[...P.examples,...u],j=[...P.epilogs,...j]):{failMessage:o,failureOutput:b,usages:_,usageDisabled:p,epilogs:j,examples:u,commands:m,descriptions:O}=P)},n}function He(i){return typeof i=="object"}function ks(i,t){return He(i)?{text:i.text,indentation:i.indentation+t}:{text:i,indentation:t}}function Mn(i){return He(i)?i.indentation:0}function be(i){return He(i)?i.text:i}var Fn=`###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc
#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.
#
_{{app_name}}_yargs_completions()
{
    local cur_word args type_list

    cur_word="\${COMP_WORDS[COMP_CWORD]}"
    args=("\${COMP_WORDS[@]}")

    # ask yargs to generate completions.
    type_list=$({{app_path}} --get-yargs-completions "\${args[@]}")

    COMPREPLY=( $(compgen -W "\${type_list}" -- \${cur_word}) )

    # if no match was found, fall back to filename completion
    if [ \${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=()
    fi

    return 0
}
complete -o bashdefault -o default -F _{{app_name}}_yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
`,Nn=`#compdef {{app_name}}
###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc
#    or {{app_path}} {{completion_command}} >> ~/.zprofile on OSX.
#
_{{app_name}}_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "\${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _{{app_name}}_yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
`;var Ye=class{constructor(t,e,n,s){var o,a,c;this.yargs=t,this.usage=e,this.command=n,this.shim=s,this.completionKey="get-yargs-completions",this.aliases=null,this.customCompletionFunction=null,this.indexAfterLastReset=0,this.zshShell=(c=((o=this.shim.getEnv("SHELL"))===null||o===void 0?void 0:o.includes("zsh"))||((a=this.shim.getEnv("ZSH_NAME"))===null||a===void 0?void 0:a.includes("zsh")))!==null&&c!==void 0?c:!1}defaultCompletion(t,e,n,s){let o=this.command.getCommandHandlers();for(let c=0,b=t.length;c<b;++c)if(o[t[c]]&&o[t[c]].builder){let _=o[t[c]].builder;if(ge(_)){this.indexAfterLastReset=c+1;let p=this.yargs.getInternalMethods().reset();return _(p,!0),p.argv}}let a=[];this.commandCompletions(a,t,n),this.optionCompletions(a,t,e,n),this.choicesFromOptionsCompletions(a,t,e,n),this.choicesFromPositionalsCompletions(a,t,e,n),s(null,a)}commandCompletions(t,e,n){let s=this.yargs.getInternalMethods().getContext().commands;!n.match(/^-/)&&s[s.length-1]!==n&&!this.previousArgHasChoices(e)&&this.usage.getCommands().forEach(o=>{let a=Pt(o[0]).cmd;if(e.indexOf(a)===-1)if(!this.zshShell)t.push(a);else{let c=o[1]||"";t.push(a.replace(/:/g,"\\:")+":"+c)}})}optionCompletions(t,e,n,s){if((s.match(/^-/)||s===""&&t.length===0)&&!this.previousArgHasChoices(e)){let o=this.yargs.getOptions(),a=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[];Object.keys(o.key).forEach(c=>{let b=!!o.configuration["boolean-negation"]&&o.boolean.includes(c);!a.includes(c)&&!o.hiddenOptions.includes(c)&&!this.argsContainKey(e,c,b)&&this.completeOptionKey(c,t,s,b&&!!o.default[c])})}}choicesFromOptionsCompletions(t,e,n,s){if(this.previousArgHasChoices(e)){let o=this.getPreviousArgChoices(e);o&&o.length>0&&t.push(...o.map(a=>a.replace(/:/g,"\\:")))}}choicesFromPositionalsCompletions(t,e,n,s){if(s===""&&t.length>0&&this.previousArgHasChoices(e))return;let o=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[],a=Math.max(this.indexAfterLastReset,this.yargs.getInternalMethods().getContext().commands.length+1),c=o[n._.length-a-1];if(!c)return;let b=this.yargs.getOptions().choices[c]||[];for(let _ of b)_.startsWith(s)&&t.push(_.replace(/:/g,"\\:"))}getPreviousArgChoices(t){if(t.length<1)return;let e=t[t.length-1],n="";if(!e.startsWith("-")&&t.length>1&&(n=e,e=t[t.length-2]),!e.startsWith("-"))return;let s=e.replace(/^-+/,""),o=this.yargs.getOptions(),a=[s,...this.yargs.getAliases()[s]||[]],c;for(let b of a)if(Object.prototype.hasOwnProperty.call(o.key,b)&&Array.isArray(o.choices[b])){c=o.choices[b];break}if(c)return c.filter(b=>!n||b.startsWith(n))}previousArgHasChoices(t){let e=this.getPreviousArgChoices(t);return e!==void 0&&e.length>0}argsContainKey(t,e,n){let s=o=>t.indexOf((/^[^0-9]$/.test(o)?"-":"--")+o)!==-1;if(s(e)||n&&s(`no-${e}`))return!0;if(this.aliases){for(let o of this.aliases[e])if(s(o))return!0}return!1}completeOptionKey(t,e,n,s){var o,a,c,b;let _=t;if(this.zshShell){let O=this.usage.getDescriptions(),j=(a=(o=this===null||this===void 0?void 0:this.aliases)===null||o===void 0?void 0:o[t])===null||a===void 0?void 0:a.find(v=>{let R=O[v];return typeof R=="string"&&R.length>0}),y=j?O[j]:void 0,d=(b=(c=O[t])!==null&&c!==void 0?c:y)!==null&&b!==void 0?b:"";_=`${t.replace(/:/g,"\\:")}:${d.replace("__yargsString__:","").replace(/(\r\n|\n|\r)/gm," ")}`}let p=O=>/^--/.test(O),u=O=>/^[^0-9]$/.test(O),m=!p(n)&&u(t)?"-":"--";e.push(m+_),s&&e.push(m+"no-"+_)}customCompletion(t,e,n,s){if(ot(this.customCompletionFunction,null,this.shim),ei(this.customCompletionFunction)){let o=this.customCompletionFunction(n,e);return q(o)?o.then(a=>{this.shim.process.nextTick(()=>{s(null,a)})}).catch(a=>{this.shim.process.nextTick(()=>{s(a,void 0)})}):s(null,o)}else return ni(this.customCompletionFunction)?this.customCompletionFunction(n,e,(o=s)=>this.defaultCompletion(t,e,n,o),o=>{s(null,o)}):this.customCompletionFunction(n,e,o=>{s(null,o)})}getCompletion(t,e){let n=t.length?t[t.length-1]:"",s=this.yargs.parse(t,!0),o=this.customCompletionFunction?a=>this.customCompletion(t,a,n,e):a=>this.defaultCompletion(t,a,n,e);return q(s)?s.then(o):o(s)}generateCompletionScript(t,e){let n=this.zshShell?Nn:Fn,s=this.shim.path.basename(t);return t.match(/\.js$/)&&(t=`./${t}`),n=n.replace(/{{app_name}}/g,s),n=n.replace(/{{completion_command}}/g,e),n.replace(/{{app_path}}/g,t)}registerFunction(t){this.customCompletionFunction=t}setParsed(t){this.aliases=t.aliases}};function Ln(i,t,e,n){return new Ye(i,t,e,n)}function ei(i){return i.length<3}function ni(i){return i.length>3}function Wn(i,t){if(i.length===0)return t.length;if(t.length===0)return i.length;let e=[],n;for(n=0;n<=t.length;n++)e[n]=[n];let s;for(s=0;s<=i.length;s++)e[0][s]=s;for(n=1;n<=t.length;n++)for(s=1;s<=i.length;s++)t.charAt(n-1)===i.charAt(s-1)?e[n][s]=e[n-1][s-1]:n>1&&s>1&&t.charAt(n-2)===i.charAt(s-1)&&t.charAt(n-1)===i.charAt(s-2)?e[n][s]=e[n-2][s-2]+1:e[n][s]=Math.min(e[n-1][s-1]+1,Math.min(e[n][s-1]+1,e[n-1][s]+1));return e[t.length][i.length]}var Dn=["$0","--","_"];function vn(i,t,e){let n=e.y18n.__,s=e.y18n.__n,o={};o.nonOptionCount=function(u){let m=i.getDemandedCommands(),j=u._.length+(u["--"]?u["--"].length:0)-i.getInternalMethods().getContext().commands.length;m._&&(j<m._.min||j>m._.max)&&(j<m._.min?m._.minMsg!==void 0?t.fail(m._.minMsg?m._.minMsg.replace(/\$0/g,j.toString()).replace(/\$1/,m._.min.toString()):null):t.fail(s("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",j,j.toString(),m._.min.toString())):j>m._.max&&(m._.maxMsg!==void 0?t.fail(m._.maxMsg?m._.maxMsg.replace(/\$0/g,j.toString()).replace(/\$1/,m._.max.toString()):null):t.fail(s("Too many non-option arguments: got %s, maximum of %s","Too many non-option arguments: got %s, maximum of %s",j,j.toString(),m._.max.toString()))))},o.positionalCount=function(u,m){m<u&&t.fail(s("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",m,m+"",u+""))},o.requiredArguments=function(u,m){let O=null;for(let j of Object.keys(m))(!Object.prototype.hasOwnProperty.call(u,j)||typeof u[j]>"u")&&(O=O||{},O[j]=m[j]);if(O){let j=[];for(let d of Object.keys(O)){let v=O[d];v&&j.indexOf(v)<0&&j.push(v)}let y=j.length?`
${j.join(`
`)}`:"";t.fail(s("Missing required argument: %s","Missing required arguments: %s",Object.keys(O).length,Object.keys(O).join(", ")+y))}},o.unknownArguments=function(u,m,O,j,y=!0){var d;let v=i.getInternalMethods().getCommandInstance().getCommands(),R=[],Y=i.getInternalMethods().getContext();if(Object.keys(u).forEach(T=>{!Dn.includes(T)&&!Object.prototype.hasOwnProperty.call(O,T)&&!Object.prototype.hasOwnProperty.call(i.getInternalMethods().getParseContext(),T)&&!o.isValidAndSomeAliasIsNotNew(T,m)&&R.push(T)}),y&&(Y.commands.length>0||v.length>0||j)&&u._.slice(Y.commands.length).forEach(T=>{v.includes(""+T)||R.push(""+T)}),y){let B=((d=i.getDemandedCommands()._)===null||d===void 0?void 0:d.max)||0,At=Y.commands.length+B;At<u._.length&&u._.slice(At).forEach(gt=>{gt=String(gt),!Y.commands.includes(gt)&&!R.includes(gt)&&R.push(gt)})}R.length&&t.fail(s("Unknown argument: %s","Unknown arguments: %s",R.length,R.map(T=>T.trim()?T:`"${T}"`).join(", ")))},o.unknownCommands=function(u){let m=i.getInternalMethods().getCommandInstance().getCommands(),O=[],j=i.getInternalMethods().getContext();return(j.commands.length>0||m.length>0)&&u._.slice(j.commands.length).forEach(y=>{m.includes(""+y)||O.push(""+y)}),O.length>0?(t.fail(s("Unknown command: %s","Unknown commands: %s",O.length,O.join(", "))),!0):!1},o.isValidAndSomeAliasIsNotNew=function(u,m){if(!Object.prototype.hasOwnProperty.call(m,u))return!1;let O=i.parsed.newAliases;return[u,...m[u]].some(j=>!Object.prototype.hasOwnProperty.call(O,j)||!O[u])},o.limitedChoices=function(u){let m=i.getOptions(),O={};if(!Object.keys(m.choices).length)return;Object.keys(u).forEach(d=>{Dn.indexOf(d)===-1&&Object.prototype.hasOwnProperty.call(m.choices,d)&&[].concat(u[d]).forEach(v=>{m.choices[d].indexOf(v)===-1&&v!==void 0&&(O[d]=(O[d]||[]).concat(v))})});let j=Object.keys(O);if(!j.length)return;let y=n("Invalid values:");j.forEach(d=>{y+=`
  ${n("Argument: %s, Given: %s, Choices: %s",d,t.stringifiedValues(O[d]),t.stringifiedValues(m.choices[d]))}`}),t.fail(y)};let a={};o.implies=function(u,m){x("<string|object> [array|number|string]",[u,m],arguments.length),typeof u=="object"?Object.keys(u).forEach(O=>{o.implies(O,u[O])}):(i.global(u),a[u]||(a[u]=[]),Array.isArray(m)?m.forEach(O=>o.implies(u,O)):(ot(m,void 0,e),a[u].push(m)))},o.getImplied=function(){return a};function c(p,u){let m=Number(u);return u=isNaN(m)?u:m,typeof u=="number"?u=p._.length>=u:u.match(/^--no-.+/)?(u=u.match(/^--no-(.+)/)[1],u=!Object.prototype.hasOwnProperty.call(p,u)):u=Object.prototype.hasOwnProperty.call(p,u),u}o.implications=function(u){let m=[];if(Object.keys(a).forEach(O=>{let j=O;(a[O]||[]).forEach(y=>{let d=j,v=y;d=c(u,d),y=c(u,y),d&&!y&&m.push(` ${j} -> ${v}`)})}),m.length){let O=`${n("Implications failed:")}
`;m.forEach(j=>{O+=j}),t.fail(O)}};let b={};o.conflicts=function(u,m){x("<string|object> [array|string]",[u,m],arguments.length),typeof u=="object"?Object.keys(u).forEach(O=>{o.conflicts(O,u[O])}):(i.global(u),b[u]||(b[u]=[]),Array.isArray(m)?m.forEach(O=>o.conflicts(u,O)):b[u].push(m))},o.getConflicting=()=>b,o.conflicting=function(u){Object.keys(u).forEach(m=>{b[m]&&b[m].forEach(O=>{O&&u[m]!==void 0&&u[O]!==void 0&&t.fail(n("Arguments %s and %s are mutually exclusive",m,O))})}),i.getInternalMethods().getParserConfiguration()["strip-dashed"]&&Object.keys(b).forEach(m=>{b[m].forEach(O=>{O&&u[e.Parser.camelCase(m)]!==void 0&&u[e.Parser.camelCase(O)]!==void 0&&t.fail(n("Arguments %s and %s are mutually exclusive",m,O))})})},o.recommendCommands=function(u,m){m=m.sort((d,v)=>v.length-d.length);let j=null,y=1/0;for(let d=0,v;(v=m[d])!==void 0;d++){let R=Wn(u,v);R<=3&&R<y&&(y=R,j=v)}j&&t.fail(n("Did you mean %s?",j))},o.reset=function(u){return a=St(a,m=>!u[m]),b=St(b,m=>!u[m]),o};let _=[];return o.freeze=function(){_.push({implied:a,conflicting:b})},o.unfreeze=function(){let u=_.pop();ot(u,void 0,e),{implied:a,conflicting:b}=u},o}var Be=[],ie;function re(i,t,e,n){ie=n;let s={};if(Object.prototype.hasOwnProperty.call(i,"extends")){if(typeof i.extends!="string")return s;let o=/\.json|\..*rc$/.test(i.extends),a=null;if(o)a=ii(t,i.extends);else try{a=wt.resolve(i.extends)}catch{return i}si(a),Be.push(a),s=o?JSON.parse(ie.readFileSync(a,"utf8")):wt(i.extends),delete i.extends,s=re(s,ie.path.dirname(a),e,ie)}return Be=[],e?Rn(s,i):Object.assign({},s,i)}function si(i){if(Be.indexOf(i)>-1)throw new G(`Circular extended configurations: '${i}'.`)}function ii(i,t){return ie.path.resolve(i,t)}function Rn(i,t){let e={};function n(s){return s&&typeof s=="object"&&!Array.isArray(s)}Object.assign(e,i);for(let s of Object.keys(t))n(t[s])&&n(e[s])?e[s]=Rn(i[s],t[s]):e[s]=t[s];return e}var A=function(i,t,e,n,s){if(n==="m")throw new TypeError("Private method is not writable");if(n==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof t=="function"?i!==t||!s:!t.has(i))throw new TypeError("Cannot write private member to an object whose class did not declare it");return n==="a"?s.call(i,e):s?s.value=e:t.set(i,e),e},r=function(i,t,e,n){if(e==="a"&&!n)throw new TypeError("Private accessor was defined without a getter");if(typeof t=="function"?i!==t||!n:!t.has(i))throw new TypeError("Cannot read private member from an object whose class did not declare it");return e==="m"?n:e==="a"?n.call(i):n?n.value:t.get(i)},tt,Tt,oe,ut,lt,_e,Mt,Ut,Oe,dt,we,pt,yt,ct,mt,ye,kt,it,M,Ee,Ce,ft,Ht,te,Yt,$t,xe,L,Bt,Vt,Gt,W,je,Et,Z;function is(i){return(t=[],e=i.process.cwd(),n)=>{let s=new en(t,e,n,i);return Object.defineProperty(s,"argv",{get:()=>s.parse(),enumerable:!0}),s.help(),s.version(),s}}var zn=Symbol("copyDoubleDash"),Tn=Symbol("copyDoubleDash"),Ve=Symbol("deleteFromParserHintObject"),Un=Symbol("emitWarning"),Hn=Symbol("freeze"),Yn=Symbol("getDollarZero"),qt=Symbol("getParserConfiguration"),Bn=Symbol("getUsageConfiguration"),Ge=Symbol("guessLocale"),Vn=Symbol("guessVersion"),Gn=Symbol("parsePositionalNumbers"),qe=Symbol("pkgUp"),Ft=Symbol("populateParserHintArray"),ee=Symbol("populateParserHintSingleValueDictionary"),Ke=Symbol("populateParserHintArrayDictionary"),Xe=Symbol("populateParserHintDictionary"),Qe=Symbol("sanitizeKey"),Je=Symbol("setKey"),Ze=Symbol("unfreeze"),qn=Symbol("validateAsync"),Kn=Symbol("getCommandInstance"),Xn=Symbol("getContext"),Qn=Symbol("getHasOutput"),Jn=Symbol("getLoggerInstance"),Zn=Symbol("getParseContext"),kn=Symbol("getUsageInstance"),ts=Symbol("getValidationInstance"),Ae=Symbol("hasParseCallback"),es=Symbol("isGlobalContext"),Kt=Symbol("postProcess"),ns=Symbol("rebase"),ke=Symbol("reset"),ae=Symbol("runYargsParserAndExecuteCommands"),tn=Symbol("runValidation"),ss=Symbol("setHasOutput"),Xt=Symbol("kTrackManuallySetKeys"),en=class{constructor(t=[],e,n,s){this.customScriptName=!1,this.parsed=!1,tt.set(this,void 0),Tt.set(this,void 0),oe.set(this,{commands:[],fullCommands:[]}),ut.set(this,null),lt.set(this,null),_e.set(this,"show-hidden"),Mt.set(this,null),Ut.set(this,!0),Oe.set(this,{}),dt.set(this,!0),we.set(this,[]),pt.set(this,void 0),yt.set(this,{}),ct.set(this,!1),mt.set(this,null),ye.set(this,!0),kt.set(this,void 0),it.set(this,""),M.set(this,void 0),Ee.set(this,void 0),Ce.set(this,{}),ft.set(this,null),Ht.set(this,null),te.set(this,{}),Yt.set(this,{}),$t.set(this,void 0),xe.set(this,!1),L.set(this,void 0),Bt.set(this,!1),Vt.set(this,!1),Gt.set(this,!1),W.set(this,void 0),je.set(this,{}),Et.set(this,null),Z.set(this,void 0),A(this,L,s,"f"),A(this,$t,t,"f"),A(this,Tt,e,"f"),A(this,Ee,n,"f"),A(this,pt,new me(this),"f"),this.$0=this[Yn](),this[ke](),A(this,tt,r(this,tt,"f"),"f"),A(this,W,r(this,W,"f"),"f"),A(this,Z,r(this,Z,"f"),"f"),A(this,M,r(this,M,"f"),"f"),r(this,M,"f").showHiddenOpt=r(this,_e,"f"),A(this,kt,this[Tn](),"f")}addHelpOpt(t,e){let n="help";return x("[string|boolean] [string]",[t,e],arguments.length),r(this,mt,"f")&&(this[Ve](r(this,mt,"f")),A(this,mt,null,"f")),t===!1&&e===void 0?this:(A(this,mt,typeof t=="string"?t:n,"f"),this.boolean(r(this,mt,"f")),this.describe(r(this,mt,"f"),e||r(this,W,"f").deferY18nLookup("Show help")),this)}help(t,e){return this.addHelpOpt(t,e)}addShowHiddenOpt(t,e){if(x("[string|boolean] [string]",[t,e],arguments.length),t===!1&&e===void 0)return this;let n=typeof t=="string"?t:r(this,_e,"f");return this.boolean(n),this.describe(n,e||r(this,W,"f").deferY18nLookup("Show hidden options")),r(this,M,"f").showHiddenOpt=n,this}showHidden(t,e){return this.addShowHiddenOpt(t,e)}alias(t,e){return x("<object|string|array> [string|array]",[t,e],arguments.length),this[Ke](this.alias.bind(this),"alias",t,e),this}array(t){return x("<array|string>",[t],arguments.length),this[Ft]("array",t),this[Xt](t),this}boolean(t){return x("<array|string>",[t],arguments.length),this[Ft]("boolean",t),this[Xt](t),this}check(t,e){return x("<function> [boolean]",[t,e],arguments.length),this.middleware((n,s)=>zt(()=>t(n,s.getOptions()),o=>(o?(typeof o=="string"||o instanceof Error)&&r(this,W,"f").fail(o.toString(),o):r(this,W,"f").fail(r(this,L,"f").y18n.__("Argument check failed: %s",t.toString())),n),o=>(r(this,W,"f").fail(o.message?o.message:o.toString(),o),n)),!1,e),this}choices(t,e){return x("<object|string|array> [string|array]",[t,e],arguments.length),this[Ke](this.choices.bind(this),"choices",t,e),this}coerce(t,e){if(x("<object|string|array> [function]",[t,e],arguments.length),Array.isArray(t)){if(!e)throw new G("coerce callback must be provided");for(let n of t)this.coerce(n,e);return this}else if(typeof t=="object"){for(let n of Object.keys(t))this.coerce(n,t[n]);return this}if(!e)throw new G("coerce callback must be provided");return r(this,M,"f").key[t]=!0,r(this,pt,"f").addCoerceMiddleware((n,s)=>{let o;return Object.prototype.hasOwnProperty.call(n,t)?zt(()=>(o=s.getAliases(),e(n[t])),c=>{n[t]=c;let b=s.getInternalMethods().getParserConfiguration()["strip-aliased"];if(o[t]&&b!==!0)for(let _ of o[t])n[_]=c;return n},c=>{throw new G(c.message)}):n},t),this}conflicts(t,e){return x("<string|object> [string|array]",[t,e],arguments.length),r(this,Z,"f").conflicts(t,e),this}config(t="config",e,n){return x("[object|string] [string|function] [function]",[t,e,n],arguments.length),typeof t=="object"&&!Array.isArray(t)?(t=re(t,r(this,Tt,"f"),this[qt]()["deep-merge-config"]||!1,r(this,L,"f")),r(this,M,"f").configObjects=(r(this,M,"f").configObjects||[]).concat(t),this):(typeof e=="function"&&(n=e,e=void 0),this.describe(t,e||r(this,W,"f").deferY18nLookup("Path to JSON config file")),(Array.isArray(t)?t:[t]).forEach(s=>{r(this,M,"f").config[s]=n||!0}),this)}completion(t,e,n){return x("[string] [string|boolean|function] [function]",[t,e,n],arguments.length),typeof e=="function"&&(n=e,e=void 0),A(this,lt,t||r(this,lt,"f")||"completion","f"),!e&&e!==!1&&(e="generate completion script"),this.command(r(this,lt,"f"),e),n&&r(this,ut,"f").registerFunction(n),this}command(t,e,n,s,o,a){return x("<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]",[t,e,n,s,o,a],arguments.length),r(this,tt,"f").addHandler(t,e,n,s,o,a),this}commands(t,e,n,s,o,a){return this.command(t,e,n,s,o,a)}commandDir(t,e){x("<string> [object]",[t,e],arguments.length);let n=r(this,Ee,"f")||r(this,L,"f").require;return r(this,tt,"f").addDirectory(t,n,r(this,L,"f").getCallerFile(),e),this}count(t){return x("<array|string>",[t],arguments.length),this[Ft]("count",t),this[Xt](t),this}default(t,e,n){return x("<object|string|array> [*] [string]",[t,e,n],arguments.length),n&&(ze(t,r(this,L,"f")),r(this,M,"f").defaultDescription[t]=n),typeof e=="function"&&(ze(t,r(this,L,"f")),r(this,M,"f").defaultDescription[t]||(r(this,M,"f").defaultDescription[t]=r(this,W,"f").functionDescription(e)),e=e.call()),this[ee](this.default.bind(this),"default",t,e),this}defaults(t,e,n){return this.default(t,e,n)}demandCommand(t=1,e,n,s){return x("[number] [number|string] [string|null|undefined] [string|null|undefined]",[t,e,n,s],arguments.length),typeof e!="number"&&(n=e,e=1/0),this.global("_",!1),r(this,M,"f").demandedCommands._={min:t,max:e,minMsg:n,maxMsg:s},this}demand(t,e,n){return Array.isArray(e)?(e.forEach(s=>{ot(n,!0,r(this,L,"f")),this.demandOption(s,n)}),e=1/0):typeof e!="number"&&(n=e,e=1/0),typeof t=="number"?(ot(n,!0,r(this,L,"f")),this.demandCommand(t,e,n,n)):Array.isArray(t)?t.forEach(s=>{ot(n,!0,r(this,L,"f")),this.demandOption(s,n)}):typeof n=="string"?this.demandOption(t,n):(n===!0||typeof n>"u")&&this.demandOption(t),this}demandOption(t,e){return x("<object|string|array> [string]",[t,e],arguments.length),this[ee](this.demandOption.bind(this),"demandedOptions",t,e),this}deprecateOption(t,e){return x("<string> [string|boolean]",[t,e],arguments.length),r(this,M,"f").deprecatedOptions[t]=e,this}describe(t,e){return x("<object|string|array> [string]",[t,e],arguments.length),this[Je](t,!0),r(this,W,"f").describe(t,e),this}detectLocale(t){return x("<boolean>",[t],arguments.length),A(this,Ut,t,"f"),this}env(t){return x("[string|boolean]",[t],arguments.length),t===!1?delete r(this,M,"f").envPrefix:r(this,M,"f").envPrefix=t||"",this}epilogue(t){return x("<string>",[t],arguments.length),r(this,W,"f").epilog(t),this}epilog(t){return this.epilogue(t)}example(t,e){return x("<string|array> [string]",[t,e],arguments.length),Array.isArray(t)?t.forEach(n=>this.example(...n)):r(this,W,"f").example(t,e),this}exit(t,e){A(this,ct,!0,"f"),A(this,Mt,e,"f"),r(this,dt,"f")&&r(this,L,"f").process.exit(t)}exitProcess(t=!0){return x("[boolean]",[t],arguments.length),A(this,dt,t,"f"),this}fail(t){if(x("<function|boolean>",[t],arguments.length),typeof t=="boolean"&&t!==!1)throw new G("Invalid first argument. Expected function or boolean 'false'");return r(this,W,"f").failFn(t),this}getAliases(){return this.parsed?this.parsed.aliases:{}}async getCompletion(t,e){return x("<array> [function]",[t,e],arguments.length),e?r(this,ut,"f").getCompletion(t,e):new Promise((n,s)=>{r(this,ut,"f").getCompletion(t,(o,a)=>{o?s(o):n(a)})})}getDemandedOptions(){return x([],0),r(this,M,"f").demandedOptions}getDemandedCommands(){return x([],0),r(this,M,"f").demandedCommands}getDeprecatedOptions(){return x([],0),r(this,M,"f").deprecatedOptions}getDetectLocale(){return r(this,Ut,"f")}getExitProcess(){return r(this,dt,"f")}getGroups(){return Object.assign({},r(this,yt,"f"),r(this,Yt,"f"))}getHelp(){if(A(this,ct,!0,"f"),!r(this,W,"f").hasCachedHelpMessage()){if(!this.parsed){let e=this[ae](r(this,$t,"f"),void 0,void 0,0,!0);if(q(e))return e.then(()=>r(this,W,"f").help())}let t=r(this,tt,"f").runDefaultBuilderOn(this);if(q(t))return t.then(()=>r(this,W,"f").help())}return Promise.resolve(r(this,W,"f").help())}getOptions(){return r(this,M,"f")}getStrict(){return r(this,Bt,"f")}getStrictCommands(){return r(this,Vt,"f")}getStrictOptions(){return r(this,Gt,"f")}global(t,e){return x("<string|array> [boolean]",[t,e],arguments.length),t=[].concat(t),e!==!1?r(this,M,"f").local=r(this,M,"f").local.filter(n=>t.indexOf(n)===-1):t.forEach(n=>{r(this,M,"f").local.includes(n)||r(this,M,"f").local.push(n)}),this}group(t,e){x("<string|array> <string>",[t,e],arguments.length);let n=r(this,Yt,"f")[e]||r(this,yt,"f")[e];r(this,Yt,"f")[e]&&delete r(this,Yt,"f")[e];let s={};return r(this,yt,"f")[e]=(n||[]).concat(t).filter(o=>s[o]?!1:s[o]=!0),this}hide(t){return x("<string>",[t],arguments.length),r(this,M,"f").hiddenOptions.push(t),this}implies(t,e){return x("<string|object> [number|string|array]",[t,e],arguments.length),r(this,Z,"f").implies(t,e),this}locale(t){return x("[string]",[t],arguments.length),t===void 0?(this[Ge](),r(this,L,"f").y18n.getLocale()):(A(this,Ut,!1,"f"),r(this,L,"f").y18n.setLocale(t),this)}middleware(t,e,n){return r(this,pt,"f").addMiddleware(t,!!e,n)}nargs(t,e){return x("<string|object|array> [number]",[t,e],arguments.length),this[ee](this.nargs.bind(this),"narg",t,e),this}normalize(t){return x("<array|string>",[t],arguments.length),this[Ft]("normalize",t),this}number(t){return x("<array|string>",[t],arguments.length),this[Ft]("number",t),this[Xt](t),this}option(t,e){if(x("<string|object> [object]",[t,e],arguments.length),typeof t=="object")Object.keys(t).forEach(n=>{this.options(n,t[n])});else{typeof e!="object"&&(e={}),this[Xt](t),r(this,Et,"f")&&(t==="version"||(e==null?void 0:e.alias)==="version")&&this[Un](['"version" is a reserved word.',"Please do one of the following:",'- Disable version with `yargs.version(false)` if using "version" as an option',"- Use the built-in `yargs.version` method instead (if applicable)","- Use a different option key","https://yargs.js.org/docs/#api-reference-version"].join(`
`),void 0,"versionWarning"),r(this,M,"f").key[t]=!0,e.alias&&this.alias(t,e.alias);let n=e.deprecate||e.deprecated;n&&this.deprecateOption(t,n);let s=e.demand||e.required||e.require;s&&this.demand(t,s),e.demandOption&&this.demandOption(t,typeof e.demandOption=="string"?e.demandOption:void 0),e.conflicts&&this.conflicts(t,e.conflicts),"default"in e&&this.default(t,e.default),e.implies!==void 0&&this.implies(t,e.implies),e.nargs!==void 0&&this.nargs(t,e.nargs),e.config&&this.config(t,e.configParser),e.normalize&&this.normalize(t),e.choices&&this.choices(t,e.choices),e.coerce&&this.coerce(t,e.coerce),e.group&&this.group(t,e.group),(e.boolean||e.type==="boolean")&&(this.boolean(t),e.alias&&this.boolean(e.alias)),(e.array||e.type==="array")&&(this.array(t),e.alias&&this.array(e.alias)),(e.number||e.type==="number")&&(this.number(t),e.alias&&this.number(e.alias)),(e.string||e.type==="string")&&(this.string(t),e.alias&&this.string(e.alias)),(e.count||e.type==="count")&&this.count(t),typeof e.global=="boolean"&&this.global(t,e.global),e.defaultDescription&&(r(this,M,"f").defaultDescription[t]=e.defaultDescription),e.skipValidation&&this.skipValidation(t);let o=e.describe||e.description||e.desc,a=r(this,W,"f").getDescriptions();(!Object.prototype.hasOwnProperty.call(a,t)||typeof o=="string")&&this.describe(t,o),e.hidden&&this.hide(t),e.requiresArg&&this.requiresArg(t)}return this}options(t,e){return this.option(t,e)}parse(t,e,n){x("[string|array] [function|boolean|object] [function]",[t,e,n],arguments.length),this[Hn](),typeof t>"u"&&(t=r(this,$t,"f")),typeof e=="object"&&(A(this,Ht,e,"f"),e=n),typeof e=="function"&&(A(this,ft,e,"f"),e=!1),e||A(this,$t,t,"f"),r(this,ft,"f")&&A(this,dt,!1,"f");let s=this[ae](t,!!e),o=this.parsed;return r(this,ut,"f").setParsed(this.parsed),q(s)?s.then(a=>(r(this,ft,"f")&&r(this,ft,"f").call(this,r(this,Mt,"f"),a,r(this,it,"f")),a)).catch(a=>{throw r(this,ft,"f")&&r(this,ft,"f")(a,this.parsed.argv,r(this,it,"f")),a}).finally(()=>{this[Ze](),this.parsed=o}):(r(this,ft,"f")&&r(this,ft,"f").call(this,r(this,Mt,"f"),s,r(this,it,"f")),this[Ze](),this.parsed=o,s)}parseAsync(t,e,n){let s=this.parse(t,e,n);return q(s)?s:Promise.resolve(s)}parseSync(t,e,n){let s=this.parse(t,e,n);if(q(s))throw new G(".parseSync() must not be used with asynchronous builders, handlers, or middleware");return s}parserConfiguration(t){return x("<object>",[t],arguments.length),A(this,Ce,t,"f"),this}pkgConf(t,e){x("<string> [string]",[t,e],arguments.length);let n=null,s=this[qe](e||r(this,Tt,"f"));return s[t]&&typeof s[t]=="object"&&(n=re(s[t],e||r(this,Tt,"f"),this[qt]()["deep-merge-config"]||!1,r(this,L,"f")),r(this,M,"f").configObjects=(r(this,M,"f").configObjects||[]).concat(n)),this}positional(t,e){x("<string> <object>",[t,e],arguments.length);let n=["default","defaultDescription","implies","normalize","choices","conflicts","coerce","type","describe","desc","description","alias"];e=St(e,(a,c)=>a==="type"&&!["string","number","boolean"].includes(c)?!1:n.includes(a));let s=r(this,oe,"f").fullCommands[r(this,oe,"f").fullCommands.length-1],o=s?r(this,tt,"f").cmdToParseOptions(s):{array:[],alias:{},default:{},demand:{}};return Jt(o).forEach(a=>{let c=o[a];Array.isArray(c)?c.indexOf(t)!==-1&&(e[a]=!0):c[t]&&!(a in e)&&(e[a]=c[t])}),this.group(t,r(this,W,"f").getPositionalGroupName()),this.option(t,e)}recommendCommands(t=!0){return x("[boolean]",[t],arguments.length),A(this,xe,t,"f"),this}required(t,e,n){return this.demand(t,e,n)}require(t,e,n){return this.demand(t,e,n)}requiresArg(t){return x("<array|string|object> [number]",[t],arguments.length),typeof t=="string"&&r(this,M,"f").narg[t]?this:(this[ee](this.requiresArg.bind(this),"narg",t,NaN),this)}showCompletionScript(t,e){return x("[string] [string]",[t,e],arguments.length),t=t||this.$0,r(this,kt,"f").log(r(this,ut,"f").generateCompletionScript(t,e||r(this,lt,"f")||"completion")),this}showHelp(t){if(x("[string|function]",[t],arguments.length),A(this,ct,!0,"f"),!r(this,W,"f").hasCachedHelpMessage()){if(!this.parsed){let n=this[ae](r(this,$t,"f"),void 0,void 0,0,!0);if(q(n))return n.then(()=>{r(this,W,"f").showHelp(t)}),this}let e=r(this,tt,"f").runDefaultBuilderOn(this);if(q(e))return e.then(()=>{r(this,W,"f").showHelp(t)}),this}return r(this,W,"f").showHelp(t),this}scriptName(t){return this.customScriptName=!0,this.$0=t,this}showHelpOnFail(t,e){return x("[boolean|string] [string]",[t,e],arguments.length),r(this,W,"f").showHelpOnFail(t,e),this}showVersion(t){return x("[string|function]",[t],arguments.length),r(this,W,"f").showVersion(t),this}skipValidation(t){return x("<array|string>",[t],arguments.length),this[Ft]("skipValidation",t),this}strict(t){return x("[boolean]",[t],arguments.length),A(this,Bt,t!==!1,"f"),this}strictCommands(t){return x("[boolean]",[t],arguments.length),A(this,Vt,t!==!1,"f"),this}strictOptions(t){return x("[boolean]",[t],arguments.length),A(this,Gt,t!==!1,"f"),this}string(t){return x("<array|string>",[t],arguments.length),this[Ft]("string",t),this[Xt](t),this}terminalWidth(){return x([],0),r(this,L,"f").process.stdColumns}updateLocale(t){return this.updateStrings(t)}updateStrings(t){return x("<object>",[t],arguments.length),A(this,Ut,!1,"f"),r(this,L,"f").y18n.updateLocale(t),this}usage(t,e,n,s){if(x("<string|null|undefined> [string|boolean] [function|object] [function]",[t,e,n,s],arguments.length),e!==void 0){if(ot(t,null,r(this,L,"f")),(t||"").match(/^\$0( |$)/))return this.command(t,e,n,s);throw new G(".usage() description must start with $0 if being used as alias for .command()")}else return r(this,W,"f").usage(t),this}usageConfiguration(t){return x("<object>",[t],arguments.length),A(this,je,t,"f"),this}version(t,e,n){let s="version";if(x("[boolean|string] [string] [string]",[t,e,n],arguments.length),r(this,Et,"f")&&(this[Ve](r(this,Et,"f")),r(this,W,"f").version(void 0),A(this,Et,null,"f")),arguments.length===0)n=this[Vn](),t=s;else if(arguments.length===1){if(t===!1)return this;n=t,t=s}else arguments.length===2&&(n=e,e=void 0);return A(this,Et,typeof t=="string"?t:s,"f"),e=e||r(this,W,"f").deferY18nLookup("Show version number"),r(this,W,"f").version(n||void 0),this.boolean(r(this,Et,"f")),this.describe(r(this,Et,"f"),e),this}wrap(t){return x("<number|null|undefined>",[t],arguments.length),r(this,W,"f").wrap(t),this}[(tt=new WeakMap,Tt=new WeakMap,oe=new WeakMap,ut=new WeakMap,lt=new WeakMap,_e=new WeakMap,Mt=new WeakMap,Ut=new WeakMap,Oe=new WeakMap,dt=new WeakMap,we=new WeakMap,pt=new WeakMap,yt=new WeakMap,ct=new WeakMap,mt=new WeakMap,ye=new WeakMap,kt=new WeakMap,it=new WeakMap,M=new WeakMap,Ee=new WeakMap,Ce=new WeakMap,ft=new WeakMap,Ht=new WeakMap,te=new WeakMap,Yt=new WeakMap,$t=new WeakMap,xe=new WeakMap,L=new WeakMap,Bt=new WeakMap,Vt=new WeakMap,Gt=new WeakMap,W=new WeakMap,je=new WeakMap,Et=new WeakMap,Z=new WeakMap,zn)](t){if(!t._||!t["--"])return t;t._.push.apply(t._,t["--"]);try{delete t["--"]}catch{}return t}[Tn](){return{log:(...t)=>{this[Ae]()||console.log(...t),A(this,ct,!0,"f"),r(this,it,"f").length&&A(this,it,r(this,it,"f")+`
`,"f"),A(this,it,r(this,it,"f")+t.join(" "),"f")},error:(...t)=>{this[Ae]()||console.error(...t),A(this,ct,!0,"f"),r(this,it,"f").length&&A(this,it,r(this,it,"f")+`
`,"f"),A(this,it,r(this,it,"f")+t.join(" "),"f")}}}[Ve](t){Jt(r(this,M,"f")).forEach(e=>{if((s=>s==="configObjects")(e))return;let n=r(this,M,"f")[e];Array.isArray(n)?n.includes(t)&&n.splice(n.indexOf(t),1):typeof n=="object"&&delete n[t]}),delete r(this,W,"f").getDescriptions()[t]}[Un](t,e,n){r(this,Oe,"f")[n]||(r(this,L,"f").process.emitWarning(t,e),r(this,Oe,"f")[n]=!0)}[Hn](){r(this,we,"f").push({options:r(this,M,"f"),configObjects:r(this,M,"f").configObjects.slice(0),exitProcess:r(this,dt,"f"),groups:r(this,yt,"f"),strict:r(this,Bt,"f"),strictCommands:r(this,Vt,"f"),strictOptions:r(this,Gt,"f"),completionCommand:r(this,lt,"f"),output:r(this,it,"f"),exitError:r(this,Mt,"f"),hasOutput:r(this,ct,"f"),parsed:this.parsed,parseFn:r(this,ft,"f"),parseContext:r(this,Ht,"f")}),r(this,W,"f").freeze(),r(this,Z,"f").freeze(),r(this,tt,"f").freeze(),r(this,pt,"f").freeze()}[Yn](){let t="",e;return/\b(node|iojs|electron)(\.exe)?$/.test(r(this,L,"f").process.argv()[0])?e=r(this,L,"f").process.argv().slice(1,2):e=r(this,L,"f").process.argv().slice(0,1),t=e.map(n=>{let s=this[ns](r(this,Tt,"f"),n);return n.match(/^(\/|([a-zA-Z]:)?\\)/)&&s.length<n.length?s:n}).join(" ").trim(),r(this,L,"f").getEnv("_")&&r(this,L,"f").getProcessArgvBin()===r(this,L,"f").getEnv("_")&&(t=r(this,L,"f").getEnv("_").replace(`${r(this,L,"f").path.dirname(r(this,L,"f").process.execPath())}/`,"")),t}[qt](){return r(this,Ce,"f")}[Bn](){return r(this,je,"f")}[Ge](){if(!r(this,Ut,"f"))return;let t=r(this,L,"f").getEnv("LC_ALL")||r(this,L,"f").getEnv("LC_MESSAGES")||r(this,L,"f").getEnv("LANG")||r(this,L,"f").getEnv("LANGUAGE")||"en_US";this.locale(t.replace(/[.:].*/,""))}[Vn](){return this[qe]().version||"unknown"}[Gn](t){let e=t["--"]?t["--"]:t._;for(let n=0,s;(s=e[n])!==void 0;n++)r(this,L,"f").Parser.looksLikeNumber(s)&&Number.isSafeInteger(Math.floor(parseFloat(`${s}`)))&&(e[n]=Number(s));return t}[qe](t){let e=t||"*";if(r(this,te,"f")[e])return r(this,te,"f")[e];let n={};try{let s=t||r(this,L,"f").mainFilename;!t&&r(this,L,"f").path.extname(s)&&(s=r(this,L,"f").path.dirname(s));let o=r(this,L,"f").findUp(s,(a,c)=>{if(c.includes("package.json"))return"package.json"});ot(o,void 0,r(this,L,"f")),n=JSON.parse(r(this,L,"f").readFileSync(o,"utf8"))}catch{}return r(this,te,"f")[e]=n||{},r(this,te,"f")[e]}[Ft](t,e){e=[].concat(e),e.forEach(n=>{n=this[Qe](n),r(this,M,"f")[t].push(n)})}[ee](t,e,n,s){this[Xe](t,e,n,s,(o,a,c)=>{r(this,M,"f")[o][a]=c})}[Ke](t,e,n,s){this[Xe](t,e,n,s,(o,a,c)=>{r(this,M,"f")[o][a]=(r(this,M,"f")[o][a]||[]).concat(c)})}[Xe](t,e,n,s,o){if(Array.isArray(n))n.forEach(a=>{t(a,s)});else if((a=>typeof a=="object")(n))for(let a of Jt(n))t(a,n[a]);else o(e,this[Qe](n),s)}[Qe](t){return t==="__proto__"?"___proto___":t}[Je](t,e){return this[ee](this[Je].bind(this),"key",t,e),this}[Ze](){var t,e,n,s,o,a,c,b,_,p,u,m;let O=r(this,we,"f").pop();ot(O,void 0,r(this,L,"f"));let j;t=this,e=this,n=this,s=this,o=this,a=this,c=this,b=this,_=this,p=this,u=this,m=this,{options:{set value(y){A(t,M,y,"f")}}.value,configObjects:j,exitProcess:{set value(y){A(e,dt,y,"f")}}.value,groups:{set value(y){A(n,yt,y,"f")}}.value,output:{set value(y){A(s,it,y,"f")}}.value,exitError:{set value(y){A(o,Mt,y,"f")}}.value,hasOutput:{set value(y){A(a,ct,y,"f")}}.value,parsed:this.parsed,strict:{set value(y){A(c,Bt,y,"f")}}.value,strictCommands:{set value(y){A(b,Vt,y,"f")}}.value,strictOptions:{set value(y){A(_,Gt,y,"f")}}.value,completionCommand:{set value(y){A(p,lt,y,"f")}}.value,parseFn:{set value(y){A(u,ft,y,"f")}}.value,parseContext:{set value(y){A(m,Ht,y,"f")}}.value}=O,r(this,M,"f").configObjects=j,r(this,W,"f").unfreeze(),r(this,Z,"f").unfreeze(),r(this,tt,"f").unfreeze(),r(this,pt,"f").unfreeze()}[qn](t,e){return zt(e,n=>(t(n),n))}getInternalMethods(){return{getCommandInstance:this[Kn].bind(this),getContext:this[Xn].bind(this),getHasOutput:this[Qn].bind(this),getLoggerInstance:this[Jn].bind(this),getParseContext:this[Zn].bind(this),getParserConfiguration:this[qt].bind(this),getUsageConfiguration:this[Bn].bind(this),getUsageInstance:this[kn].bind(this),getValidationInstance:this[ts].bind(this),hasParseCallback:this[Ae].bind(this),isGlobalContext:this[es].bind(this),postProcess:this[Kt].bind(this),reset:this[ke].bind(this),runValidation:this[tn].bind(this),runYargsParserAndExecuteCommands:this[ae].bind(this),setHasOutput:this[ss].bind(this)}}[Kn](){return r(this,tt,"f")}[Xn](){return r(this,oe,"f")}[Qn](){return r(this,ct,"f")}[Jn](){return r(this,kt,"f")}[Zn](){return r(this,Ht,"f")||{}}[kn](){return r(this,W,"f")}[ts](){return r(this,Z,"f")}[Ae](){return!!r(this,ft,"f")}[es](){return r(this,ye,"f")}[Kt](t,e,n,s){return n||q(t)||(e||(t=this[zn](t)),(this[qt]()["parse-positional-numbers"]||this[qt]()["parse-positional-numbers"]===void 0)&&(t=this[Gn](t)),s&&(t=Rt(t,this,r(this,pt,"f").getMiddleware(),!1))),t}[ke](t={}){A(this,M,r(this,M,"f")||{},"f");let e={};e.local=r(this,M,"f").local||[],e.configObjects=r(this,M,"f").configObjects||[];let n={};e.local.forEach(a=>{n[a]=!0,(t[a]||[]).forEach(c=>{n[c]=!0})}),Object.assign(r(this,Yt,"f"),Object.keys(r(this,yt,"f")).reduce((a,c)=>{let b=r(this,yt,"f")[c].filter(_=>!(_ in n));return b.length>0&&(a[c]=b),a},{})),A(this,yt,{},"f");let s=["array","boolean","string","skipValidation","count","normalize","number","hiddenOptions"],o=["narg","key","alias","default","defaultDescription","config","choices","demandedOptions","demandedCommands","deprecatedOptions"];return s.forEach(a=>{e[a]=(r(this,M,"f")[a]||[]).filter(c=>!n[c])}),o.forEach(a=>{e[a]=St(r(this,M,"f")[a],c=>!n[c])}),e.envPrefix=r(this,M,"f").envPrefix,A(this,M,e,"f"),A(this,W,r(this,W,"f")?r(this,W,"f").reset(n):$n(this,r(this,L,"f")),"f"),A(this,Z,r(this,Z,"f")?r(this,Z,"f").reset(n):vn(this,r(this,W,"f"),r(this,L,"f")),"f"),A(this,tt,r(this,tt,"f")?r(this,tt,"f").reset():Sn(r(this,W,"f"),r(this,Z,"f"),r(this,pt,"f"),r(this,L,"f")),"f"),r(this,ut,"f")||A(this,ut,Ln(this,r(this,W,"f"),r(this,tt,"f"),r(this,L,"f")),"f"),r(this,pt,"f").reset(),A(this,lt,null,"f"),A(this,it,"","f"),A(this,Mt,null,"f"),A(this,ct,!1,"f"),this.parsed=!1,this}[ns](t,e){return r(this,L,"f").path.relative(t,e)}[ae](t,e,n,s=0,o=!1){let a=!!n||o;t=t||r(this,$t,"f"),r(this,M,"f").__=r(this,L,"f").y18n.__,r(this,M,"f").configuration=this[qt]();let c=!!r(this,M,"f").configuration["populate--"],b=Object.assign({},r(this,M,"f").configuration,{"populate--":!0}),_=r(this,L,"f").Parser.detailed(t,Object.assign({},r(this,M,"f"),{configuration:{"parse-positional-numbers":!1,...b}})),p=Object.assign(_.argv,r(this,Ht,"f")),u,m=_.aliases,O=!1,j=!1;Object.keys(p).forEach(y=>{y===r(this,mt,"f")&&p[y]?O=!0:y===r(this,Et,"f")&&p[y]&&(j=!0)}),p.$0=this.$0,this.parsed=_,s===0&&r(this,W,"f").clearCachedHelpMessage();try{if(this[Ge](),e)return this[Kt](p,c,!!n,!1);r(this,mt,"f")&&[r(this,mt,"f")].concat(m[r(this,mt,"f")]||[]).filter(Y=>Y.length>1).includes(""+p._[p._.length-1])&&(p._.pop(),O=!0),A(this,ye,!1,"f");let y=r(this,tt,"f").getCommands(),d=r(this,ut,"f").completionKey in p,v=O||d||o;if(p._.length){if(y.length){let R;for(let Y=s||0,T;p._[Y]!==void 0;Y++)if(T=String(p._[Y]),y.includes(T)&&T!==r(this,lt,"f")){let B=r(this,tt,"f").runCommand(T,this,_,Y+1,o,O||j||o);return this[Kt](B,c,!!n,!1)}else if(!R&&T!==r(this,lt,"f")){R=T;break}!r(this,tt,"f").hasDefaultCommand()&&r(this,xe,"f")&&R&&!v&&r(this,Z,"f").recommendCommands(R,y)}r(this,lt,"f")&&p._.includes(r(this,lt,"f"))&&!d&&(r(this,dt,"f")&&It(!0),this.showCompletionScript(),this.exit(0))}if(r(this,tt,"f").hasDefaultCommand()&&!v){let R=r(this,tt,"f").runCommand(null,this,_,0,o,O||j||o);return this[Kt](R,c,!!n,!1)}if(d){r(this,dt,"f")&&It(!0),t=[].concat(t);let R=t.slice(t.indexOf(`--${r(this,ut,"f").completionKey}`)+1);return r(this,ut,"f").getCompletion(R,(Y,T)=>{if(Y)throw new G(Y.message);(T||[]).forEach(B=>{r(this,kt,"f").log(B)}),this.exit(0)}),this[Kt](p,!c,!!n,!1)}if(r(this,ct,"f")||(O?(r(this,dt,"f")&&It(!0),a=!0,this.showHelp("log"),this.exit(0)):j&&(r(this,dt,"f")&&It(!0),a=!0,r(this,W,"f").showVersion("log"),this.exit(0))),!a&&r(this,M,"f").skipValidation.length>0&&(a=Object.keys(p).some(R=>r(this,M,"f").skipValidation.indexOf(R)>=0&&p[R]===!0)),!a){if(_.error)throw new G(_.error.message);if(!d){let R=this[tn](m,{},_.error);n||(u=Rt(p,this,r(this,pt,"f").getMiddleware(),!0)),u=this[qn](R,u??p),q(u)&&!n&&(u=u.then(()=>Rt(p,this,r(this,pt,"f").getMiddleware(),!1)))}}}catch(y){if(y instanceof G)r(this,W,"f").fail(y.message,y);else throw y}return this[Kt](u??p,c,!!n,!0)}[tn](t,e,n,s){let o={...this.getDemandedOptions()};return a=>{if(n)throw new G(n.message);r(this,Z,"f").nonOptionCount(a),r(this,Z,"f").requiredArguments(a,o);let c=!1;r(this,Vt,"f")&&(c=r(this,Z,"f").unknownCommands(a)),r(this,Bt,"f")&&!c?r(this,Z,"f").unknownArguments(a,t,e,!!s):r(this,Gt,"f")&&r(this,Z,"f").unknownArguments(a,t,{},!1,!1),r(this,Z,"f").limitedChoices(a),r(this,Z,"f").implications(a),r(this,Z,"f").conflicting(a)}}[ss](){A(this,ct,!0,"f")}[Xt](t){if(typeof t=="string")r(this,M,"f").key[t]=!0;else for(let e of t)r(this,M,"f").key[e]=!0}};function In(i){return!!i&&typeof i.getInternalMethods=="function"}var ri=is(Re),rs=ri;import*as sn from"fs";import*as Nt from"path";var oi="encrypted",os="mdenc",as=os,ls=[os,oi];var cs="\u{1F510}\u03B2 ";var fs="\u{1F510}\u03B1 ";var nn=class{async argHandler(t){let e=[],n=process.cwd();for await(let s of le.walk(n)){let o="."+Nt.sep+Nt.relative(n,s),a=Nt.extname(s).toLowerCase().slice(1);if(!["md",...ls,as].includes(a))continue;let c=await sn.promises.readFile(s,"utf8");a=="md"&&(c.includes(fs)||c.includes(cs))?e.push({featureType:"InPlace",fullPath:s,relativePath:o,extension:a}):e.push({featureType:"WholeNote",fullPath:s,relativePath:o,extension:a})}console.table(e)}},le=class{static async*walk(t){for await(let e of await sn.promises.opendir(t)){let n=Nt.join(t,e.name);e.isDirectory()?yield*le.walk(n):e.isFile()&&(yield n)}}},hs={demandOption:!0,alias:"pw",describe:"passwords to use",type:"array"},ci=new nn;rs(De(process.argv)).command("list","list all encrypted artifacts within the current directory",()=>{},ci.argHandler).command(["test","check"],"check that all notes can be decrypted with the given password list",{passwords:hs}).command("decrypt","decrypt notes given a password list and an output directory",{passwords:hs},i=>{console.log("decrypt",i)}).demandCommand().help().wrap(null).example([["$0 list","Processes all *.md and *.mdenc files and list any encrypted artifacts within the current directory"],["$0 test --passwords pw1 pw2","check that all notes can be decrypted with the given password list"]]).parse();
/**
 * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js
 * CJS and ESM environments.
 *
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
//# sourceMappingURL=data:application/json;base64,
