var Et=(r=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(r,{get:(t,e)=>(typeof require!="undefined"?require:t)[e]}):r)(function(r){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});import{notStrictEqual as ei,strictEqual as ni}from"assert";var Ms={right:Ns,center:Ls},Ds=0,ye=1,vs=2,we=3,He=class{constructor(t){var e;this.width=t.width,this.wrap=(e=t.wrap)!==null&&e!==void 0?e:!0,this.rows=[]}span(...t){let e=this.div(...t);e.span=!0}resetOutput(){this.rows=[]}div(...t){if(t.length===0&&this.div(""),this.wrap&&this.shouldApplyLayoutDSL(...t)&&typeof t[0]=="string")return this.applyLayoutDSL(t[0]);let e=t.map(n=>typeof n=="string"?this.colFromString(n):n);return this.rows.push(e),e}shouldApplyLayoutDSL(...t){return t.length===1&&typeof t[0]=="string"&&/[\t\n]/.test(t[0])}applyLayoutDSL(t){let e=t.split(`
`).map(s=>s.split("	")),n=0;return e.forEach(s=>{s.length>1&&ct.stringWidth(s[0])>n&&(n=Math.min(Math.floor(this.width*.5),ct.stringWidth(s[0])))}),e.forEach(s=>{this.div(...s.map((i,a)=>({text:i.trim(),padding:this.measurePadding(i),width:a===0&&s.length>1?n:void 0})))}),this.rows[this.rows.length-1]}colFromString(t){return{text:t,padding:this.measurePadding(t)}}measurePadding(t){let e=ct.stripAnsi(t);return[0,e.match(/\s*$/)[0].length,0,e.match(/^\s*/)[0].length]}toString(){let t=[];return this.rows.forEach(e=>{this.rowToString(e,t)}),t.filter(e=>!e.hidden).map(e=>e.text).join(`
`)}rowToString(t,e){return this.rasterize(t).forEach((n,s)=>{let i="";n.forEach((a,c)=>{let{width:m}=t[c],y=this.negatePadding(t[c]),p=a;if(y>ct.stringWidth(a)&&(p+=" ".repeat(y-ct.stringWidth(a))),t[c].align&&t[c].align!=="left"&&this.wrap){let g=Ms[t[c].align];p=g(p,y),ct.stringWidth(p)<y&&(p+=" ".repeat((m||0)-ct.stringWidth(p)-1))}let h=t[c].padding||[0,0,0,0];h[we]&&(i+=" ".repeat(h[we])),i+=jn(t[c],p,"| "),i+=p,i+=jn(t[c],p," |"),h[ye]&&(i+=" ".repeat(h[ye])),s===0&&e.length>0&&(i=this.renderInline(i,e[e.length-1]))}),e.push({text:i.replace(/ +$/,""),span:t.span})}),e}renderInline(t,e){let n=t.match(/^ */),s=n?n[0].length:0,i=e.text,a=ct.stringWidth(i.trimRight());return e.span?this.wrap?s<a?t:(e.hidden=!0,i.trimRight()+" ".repeat(s-a)+t.trimLeft()):(e.hidden=!0,i+t):t}rasterize(t){let e=[],n=this.columnWidths(t),s;return t.forEach((i,a)=>{i.width=n[a],this.wrap?s=ct.wrap(i.text,this.negatePadding(i),{hard:!0}).split(`
`):s=i.text.split(`
`),i.border&&(s.unshift("."+"-".repeat(this.negatePadding(i)+2)+"."),s.push("'"+"-".repeat(this.negatePadding(i)+2)+"'")),i.padding&&(s.unshift(...new Array(i.padding[Ds]||0).fill("")),s.push(...new Array(i.padding[vs]||0).fill(""))),s.forEach((c,m)=>{e[m]||e.push([]);let y=e[m];for(let p=0;p<a;p++)y[p]===void 0&&y.push("");y.push(c)})}),e}negatePadding(t){let e=t.width||0;return t.padding&&(e-=(t.padding[we]||0)+(t.padding[ye]||0)),t.border&&(e-=4),e}columnWidths(t){if(!this.wrap)return t.map(a=>a.width||ct.stringWidth(a.text));let e=t.length,n=this.width,s=t.map(a=>{if(a.width)return e--,n-=a.width,a.width}),i=e?Math.floor(n/e):0;return s.map((a,c)=>a===void 0?Math.max(i,$s(t[c])):a)}};function jn(r,t,e){return r.border?/[.']-+[.']/.test(t)?"":t.trim().length!==0?e:"  ":""}function $s(r){let t=r.padding||[],e=1+(t[we]||0)+(t[ye]||0);return r.border?e+4:e}function Ts(){return typeof process=="object"&&process.stdout&&process.stdout.columns?process.stdout.columns:80}function Ns(r,t){r=r.trim();let e=ct.stringWidth(r);return e<t?" ".repeat(t-e)+r:r}function Ls(r,t){r=r.trim();let e=ct.stringWidth(r);return e>=t?r:" ".repeat(t-e>>1)+r}var ct;function In(r,t){return ct=t,new He({width:(r==null?void 0:r.width)||Ts(),wrap:r==null?void 0:r.wrap})}var Fn=new RegExp("\x1B(?:\\[(?:\\d+[ABCDEFGJKSTm]|\\d+;\\d+[Hfm]|\\d+;\\d+;\\d+m|6n|s|u|\\?25[lh])|\\w)","g");function Ye(r){return r.replace(Fn,"")}function Mn(r,t){let[e,n]=r.match(Fn)||["",""];r=Ye(r);let s="";for(let i=0;i<r.length;i++)i!==0&&i%t===0&&(s+=`
`),s+=r.charAt(i);return e&&n&&(s=`${e}${s}${n}`),s}function Ve(r){return In(r,{stringWidth:t=>[...t].length,stripAnsi:Ye,wrap:Mn})}import{dirname as Dn,resolve as vn}from"path";import{readdirSync as Rs,statSync as Bs}from"fs";function $n(r,t){let e=vn(".",r),n;for(Bs(e).isDirectory()||(e=Dn(e));;){if(n=t(e,Rs(e)),n)return vn(e,n);if(e=Dn(n=e),n===e)break}}import{inspect as si}from"util";import{readFileSync as ii}from"fs";import{fileURLToPath as ri}from"url";import{format as zs}from"util";import{normalize as Hs,resolve as Ys}from"path";function Wt(r){if(r!==r.toLowerCase()&&r!==r.toUpperCase()||(r=r.toLowerCase()),r.indexOf("-")===-1&&r.indexOf("_")===-1)return r;{let e="",n=!1,s=r.match(/^-+/);for(let i=s?s[0].length:0;i<r.length;i++){let a=r.charAt(i);n&&(n=!1,a=a.toUpperCase()),i!==0&&(a==="-"||a==="_")?n=!0:a!=="-"&&a!=="_"&&(e+=a)}return e}}function _e(r,t){let e=r.toLowerCase();t=t||"-";let n="";for(let s=0;s<r.length;s++){let i=e.charAt(s),a=r.charAt(s);i!==a&&s>0?n+=`${t}${e.charAt(s)}`:n+=a}return n}function Oe(r){return r==null?!1:typeof r=="number"||/^0x[0-9a-f]+$/i.test(r)?!0:/^0[^.]/.test(r)?!1:/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(r)}function Tn(r){if(Array.isArray(r))return r.map(a=>typeof a!="string"?a+"":a);r=r.trim();let t=0,e=null,n=null,s=null,i=[];for(let a=0;a<r.length;a++){if(e=n,n=r.charAt(a),n===" "&&!s){e!==" "&&t++;continue}n===s?s=null:(n==="'"||n==='"')&&!s&&(s=n),i[t]||(i[t]=""),i[t]+=n}return i}var ht;(function(r){r.BOOLEAN="boolean",r.STRING="string",r.NUMBER="number",r.ARRAY="array"})(ht||(ht={}));var jt,Ee=class{constructor(t){jt=t}parse(t,e){let n=Object.assign({alias:void 0,array:void 0,boolean:void 0,config:void 0,configObjects:void 0,configuration:void 0,coerce:void 0,count:void 0,default:void 0,envPrefix:void 0,narg:void 0,normalize:void 0,string:void 0,number:void 0,__:void 0,key:void 0},e),s=Tn(t),i=typeof t=="string",a=Ws(Object.assign(Object.create(null),n.alias)),c=Object.assign({"boolean-negation":!0,"camel-case-expansion":!0,"combine-arrays":!1,"dot-notation":!0,"duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"greedy-arrays":!0,"halt-at-non-option":!1,"nargs-eats-options":!1,"negation-prefix":"no-","parse-numbers":!0,"parse-positional-numbers":!0,"populate--":!1,"set-placeholder-key":!1,"short-option-groups":!0,"strip-aliased":!1,"strip-dashed":!1,"unknown-options-as-args":!1},n.configuration),m=Object.assign(Object.create(null),n.default),y=n.configObjects||[],p=n.envPrefix,h=c["populate--"],g=h?"--":"_",w=Object.create(null),C=Object.create(null),O=n.__||jt.format,d={aliases:Object.create(null),arrays:Object.create(null),bools:Object.create(null),strings:Object.create(null),numbers:Object.create(null),counts:Object.create(null),normalize:Object.create(null),configs:Object.create(null),nargs:Object.create(null),coercions:Object.create(null),keys:[]},L=/^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/,R=new RegExp("^--"+c["negation-prefix"]+"(.+)");[].concat(n.array||[]).filter(Boolean).forEach(function(l){let u=typeof l=="object"?l.key:l,_=Object.keys(l).map(function(b){return{boolean:"bools",string:"strings",number:"numbers"}[b]}).filter(Boolean).pop();_&&(d[_][u]=!0),d.arrays[u]=!0,d.keys.push(u)}),[].concat(n.boolean||[]).filter(Boolean).forEach(function(l){d.bools[l]=!0,d.keys.push(l)}),[].concat(n.string||[]).filter(Boolean).forEach(function(l){d.strings[l]=!0,d.keys.push(l)}),[].concat(n.number||[]).filter(Boolean).forEach(function(l){d.numbers[l]=!0,d.keys.push(l)}),[].concat(n.count||[]).filter(Boolean).forEach(function(l){d.counts[l]=!0,d.keys.push(l)}),[].concat(n.normalize||[]).filter(Boolean).forEach(function(l){d.normalize[l]=!0,d.keys.push(l)}),typeof n.narg=="object"&&Object.entries(n.narg).forEach(([l,u])=>{typeof u=="number"&&(d.nargs[l]=u,d.keys.push(l))}),typeof n.coerce=="object"&&Object.entries(n.coerce).forEach(([l,u])=>{typeof u=="function"&&(d.coercions[l]=u,d.keys.push(l))}),typeof n.config<"u"&&(Array.isArray(n.config)||typeof n.config=="string"?[].concat(n.config).filter(Boolean).forEach(function(l){d.configs[l]=!0}):typeof n.config=="object"&&Object.entries(n.config).forEach(([l,u])=>{(typeof u=="boolean"||typeof u=="function")&&(d.configs[l]=u)})),Bt(n.key,a,n.default,d.arrays),Object.keys(m).forEach(function(l){(d.aliases[l]||[]).forEach(function(u){m[u]=m[l]})});let H=null;be();let W=[],Y=Object.assign(Object.create(null),{_:[]}),It={};for(let l=0;l<s.length;l++){let u=s[l],_=u.replace(/^-{3,}/,"---"),b,f,j,x,M,st;if(u!=="--"&&/^-/.test(u)&&J(u))yt(u);else if(_.match(/^---+(=|$)/)){yt(u);continue}else if(u.match(/^--.+=/)||!c["short-option-groups"]&&u.match(/^-.+=/))x=u.match(/^--?([^=]+)=([\s\S]*)$/),x!==null&&Array.isArray(x)&&x.length>=3&&(v(x[1],d.arrays)?l=Lt(l,x[1],s,x[2]):v(x[1],d.nargs)!==!1?l=te(l,x[1],s,x[2]):V(x[1],x[2],!0));else if(u.match(R)&&c["boolean-negation"])x=u.match(R),x!==null&&Array.isArray(x)&&x.length>=2&&(f=x[1],V(f,v(f,d.arrays)?[!1]:!1));else if(u.match(/^--.+/)||!c["short-option-groups"]&&u.match(/^-[^-]+/))x=u.match(/^--?(.+)/),x!==null&&Array.isArray(x)&&x.length>=2&&(f=x[1],v(f,d.arrays)?l=Lt(l,f,s):v(f,d.nargs)!==!1?l=te(l,f,s):(M=s[l+1],M!==void 0&&(!M.match(/^-/)||M.match(L))&&!v(f,d.bools)&&!v(f,d.counts)||/^(true|false)$/.test(M)?(V(f,M),l++):V(f,Q(f))));else if(u.match(/^-.\..+=/))x=u.match(/^-([^=]+)=([\s\S]*)$/),x!==null&&Array.isArray(x)&&x.length>=3&&V(x[1],x[2]);else if(u.match(/^-.\..+/)&&!u.match(L))M=s[l+1],x=u.match(/^-(.\..+)/),x!==null&&Array.isArray(x)&&x.length>=2&&(f=x[1],M!==void 0&&!M.match(/^-/)&&!v(f,d.bools)&&!v(f,d.counts)?(V(f,M),l++):V(f,Q(f)));else if(u.match(/^-[^-]+/)&&!u.match(L)){j=u.slice(1,-1).split(""),b=!1;for(let ot=0;ot<j.length;ot++){if(M=u.slice(ot+2),j[ot+1]&&j[ot+1]==="="){st=u.slice(ot+3),f=j[ot],v(f,d.arrays)?l=Lt(l,f,s,st):v(f,d.nargs)!==!1?l=te(l,f,s,st):V(f,st),b=!0;break}if(M==="-"){V(j[ot],M);continue}if(/[A-Za-z]/.test(j[ot])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(M)&&v(M,d.bools)===!1){V(j[ot],M),b=!0;break}if(j[ot+1]&&j[ot+1].match(/\W/)){V(j[ot],M),b=!0;break}else V(j[ot],Q(j[ot]))}f=u.slice(-1)[0],!b&&f!=="-"&&(v(f,d.arrays)?l=Lt(l,f,s):v(f,d.nargs)!==!1?l=te(l,f,s):(M=s[l+1],M!==void 0&&(!/^(-|--)[^-]/.test(M)||M.match(L))&&!v(f,d.bools)&&!v(f,d.counts)||/^(true|false)$/.test(M)?(V(f,M),l++):V(f,Q(f))))}else if(u.match(/^-[0-9]$/)&&u.match(L)&&v(u.slice(1),d.bools))f=u.slice(1),V(f,Q(f));else if(u==="--"){W=s.slice(l+1);break}else if(c["halt-at-non-option"]){W=s.slice(l);break}else yt(u)}U(Y,!0),U(Y,!1),N(Y),et(),X(Y,d.aliases,m,!0),nt(Y),c["set-placeholder-key"]&&Rt(Y),Object.keys(d.counts).forEach(function(l){Pt(Y,l.split("."))||V(l,0)}),h&&W.length&&(Y[g]=[]),W.forEach(function(l){Y[g].push(l)}),c["camel-case-expansion"]&&c["strip-dashed"]&&Object.keys(Y).filter(l=>l!=="--"&&l.includes("-")).forEach(l=>{delete Y[l]}),c["strip-aliased"]&&[].concat(...Object.keys(a).map(l=>a[l])).forEach(l=>{c["camel-case-expansion"]&&l.includes("-")&&delete Y[l.split(".").map(u=>Wt(u)).join(".")],delete Y[l]});function yt(l){let u=S("_",l);(typeof u=="string"||typeof u=="number")&&Y._.push(u)}function te(l,u,_,b){let f,j=v(u,d.nargs);if(j=typeof j!="number"||isNaN(j)?1:j,j===0)return _t(b)||(H=Error(O("Argument unexpected for: %s",u))),V(u,Q(u)),l;let x=_t(b)?0:1;if(c["nargs-eats-options"])_.length-(l+1)+x<j&&(H=Error(O("Not enough arguments following: %s",u))),x=j;else{for(f=l+1;f<_.length&&(!_[f].match(/^-[^0-9]/)||_[f].match(L)||J(_[f]));f++)x++;x<j&&(H=Error(O("Not enough arguments following: %s",u)))}let M=Math.min(x,j);for(!_t(b)&&M>0&&(V(u,b),M--),f=l+1;f<M+l+1;f++)V(u,_[f]);return l+M}function Lt(l,u,_,b){let f=[],j=b||_[l+1],x=v(u,d.nargs);if(v(u,d.bools)&&!/^(true|false)$/.test(j))f.push(!0);else if(_t(j)||_t(b)&&/^-/.test(j)&&!L.test(j)&&!J(j)){if(m[u]!==void 0){let M=m[u];f=Array.isArray(M)?M:[M]}}else{_t(b)||f.push(E(u,b,!0));for(let M=l+1;M<_.length&&!(!c["greedy-arrays"]&&f.length>0||x&&typeof x=="number"&&f.length>=x||(j=_[M],/^-/.test(j)&&!L.test(j)&&!J(j)));M++)l=M,f.push(E(u,j,i))}return typeof x=="number"&&(x&&f.length<x||isNaN(x)&&f.length===0)&&(H=Error(O("Not enough arguments following: %s",u))),V(u,f),l}function V(l,u,_=i){if(/-/.test(l)&&c["camel-case-expansion"]){let j=l.split(".").map(function(x){return Wt(x)}).join(".");I(l,j)}let b=E(l,u,_),f=l.split(".");St(Y,f,b),d.aliases[l]&&d.aliases[l].forEach(function(j){let x=j.split(".");St(Y,x,b)}),f.length>1&&c["dot-notation"]&&(d.aliases[f[0]]||[]).forEach(function(j){let x=j.split("."),M=[].concat(f);M.shift(),x=x.concat(M),(d.aliases[l]||[]).includes(x.join("."))||St(Y,x,b)}),v(l,d.normalize)&&!v(l,d.arrays)&&[l].concat(d.aliases[l]||[]).forEach(function(x){Object.defineProperty(It,x,{enumerable:!0,get(){return u},set(M){u=typeof M=="string"?jt.normalize(M):M}})})}function I(l,u){d.aliases[l]&&d.aliases[l].length||(d.aliases[l]=[u],w[u]=!0),d.aliases[u]&&d.aliases[u].length||I(u,l)}function E(l,u,_){_&&(u=Us(u)),(v(l,d.bools)||v(l,d.counts))&&typeof u=="string"&&(u=u==="true");let b=Array.isArray(u)?u.map(function(f){return S(l,f)}):S(l,u);return v(l,d.counts)&&(_t(b)||typeof b=="boolean")&&(b=Ke()),v(l,d.normalize)&&v(l,d.arrays)&&(Array.isArray(u)?b=u.map(f=>jt.normalize(f)):b=jt.normalize(u)),b}function S(l,u){return!c["parse-positional-numbers"]&&l==="_"||!v(l,d.strings)&&!v(l,d.bools)&&!Array.isArray(u)&&(Oe(u)&&c["parse-numbers"]&&Number.isSafeInteger(Math.floor(parseFloat(`${u}`)))||!_t(u)&&v(l,d.numbers))&&(u=Number(u)),u}function N(l){let u=Object.create(null);X(u,d.aliases,m),Object.keys(d.configs).forEach(function(_){let b=l[_]||u[_];if(b)try{let f=null,j=jt.resolve(jt.cwd(),b),x=d.configs[_];if(typeof x=="function"){try{f=x(j)}catch(M){f=M}if(f instanceof Error){H=f;return}}else f=jt.require(j);z(f)}catch(f){f.name==="PermissionDenied"?H=f:l[_]&&(H=Error(O("Invalid JSON config file: %s",b)))}})}function z(l,u){Object.keys(l).forEach(function(_){let b=l[_],f=u?u+"."+_:_;typeof b=="object"&&b!==null&&!Array.isArray(b)&&c["dot-notation"]?z(b,f):(!Pt(Y,f.split("."))||v(f,d.arrays)&&c["combine-arrays"])&&V(f,b)})}function et(){typeof y<"u"&&y.forEach(function(l){z(l)})}function U(l,u){if(typeof p>"u")return;let _=typeof p=="string"?p:"",b=jt.env();Object.keys(b).forEach(function(f){if(_===""||f.lastIndexOf(_,0)===0){let j=f.split("__").map(function(x,M){return M===0&&(x=x.substring(_.length)),Wt(x)});(u&&d.configs[j.join(".")]||!u)&&!Pt(l,j)&&V(j.join("."),b[f])}})}function nt(l){let u,_=new Set;Object.keys(l).forEach(function(b){if(!_.has(b)&&(u=v(b,d.coercions),typeof u=="function"))try{let f=S(b,u(l[b]));[].concat(d.aliases[b]||[],b).forEach(j=>{_.add(j),l[j]=f})}catch(f){H=f}})}function Rt(l){return d.keys.forEach(u=>{~u.indexOf(".")||typeof l[u]>"u"&&(l[u]=void 0)}),l}function X(l,u,_,b=!1){Object.keys(_).forEach(function(f){Pt(l,f.split("."))||(St(l,f.split("."),_[f]),b&&(C[f]=!0),(u[f]||[]).forEach(function(j){Pt(l,j.split("."))||St(l,j.split("."),_[f])}))})}function Pt(l,u){let _=l;c["dot-notation"]||(u=[u.join(".")]),u.slice(0,-1).forEach(function(f){_=_[f]||{}});let b=u[u.length-1];return typeof _!="object"?!1:b in _}function St(l,u,_){let b=l;c["dot-notation"]||(u=[u.join(".")]),u.slice(0,-1).forEach(function(st){st=Nn(st),typeof b=="object"&&b[st]===void 0&&(b[st]={}),typeof b[st]!="object"||Array.isArray(b[st])?(Array.isArray(b[st])?b[st].push({}):b[st]=[b[st],{}],b=b[st][b[st].length-1]):b=b[st]});let f=Nn(u[u.length-1]),j=v(u.join("."),d.arrays),x=Array.isArray(_),M=c["duplicate-arguments-array"];!M&&v(f,d.nargs)&&(M=!0,(!_t(b[f])&&d.nargs[f]===1||Array.isArray(b[f])&&b[f].length===d.nargs[f])&&(b[f]=void 0)),_===Ke()?b[f]=Ke(b[f]):Array.isArray(b[f])?M&&j&&x?b[f]=c["flatten-duplicate-arrays"]?b[f].concat(_):(Array.isArray(b[f][0])?b[f]:[b[f]]).concat([_]):!M&&Boolean(j)===Boolean(x)?b[f]=_:b[f]=b[f].concat([_]):b[f]===void 0&&j?b[f]=x?_:[_]:M&&!(b[f]===void 0||v(f,d.counts)||v(f,d.bools))?b[f]=[b[f],_]:b[f]=_}function Bt(...l){l.forEach(function(u){Object.keys(u||{}).forEach(function(_){d.aliases[_]||(d.aliases[_]=[].concat(a[_]||[]),d.aliases[_].concat(_).forEach(function(b){if(/-/.test(b)&&c["camel-case-expansion"]){let f=Wt(b);f!==_&&d.aliases[_].indexOf(f)===-1&&(d.aliases[_].push(f),w[f]=!0)}}),d.aliases[_].concat(_).forEach(function(b){if(b.length>1&&/[A-Z]/.test(b)&&c["camel-case-expansion"]){let f=_e(b,"-");f!==_&&d.aliases[_].indexOf(f)===-1&&(d.aliases[_].push(f),w[f]=!0)}}),d.aliases[_].forEach(function(b){d.aliases[b]=[_].concat(d.aliases[_].filter(function(f){return b!==f}))}))})})}function v(l,u){let _=[].concat(d.aliases[l]||[],l),b=Object.keys(u),f=_.find(j=>b.includes(j));return f?u[f]:!1}function ze(l){let u=Object.keys(d);return[].concat(u.map(b=>d[b])).some(function(b){return Array.isArray(b)?b.includes(l):b[l]})}function D(l,...u){return[].concat(...u).some(function(b){let f=l.match(b);return f&&ze(f[1])})}function q(l){if(l.match(L)||!l.match(/^-[^-]+/))return!1;let u=!0,_,b=l.slice(1).split("");for(let f=0;f<b.length;f++){if(_=l.slice(f+2),!ze(b[f])){u=!1;break}if(b[f+1]&&b[f+1]==="="||_==="-"||/[A-Za-z]/.test(b[f])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(_)||b[f+1]&&b[f+1].match(/\W/))break}return u}function J(l){return c["unknown-options-as-args"]&&B(l)}function B(l){return l=l.replace(/^-{3,}/,"--"),l.match(L)||q(l)?!1:!D(l,/^-+([^=]+?)=[\s\S]*$/,R,/^-+([^=]+?)$/,/^-+([^=]+?)-$/,/^-+([^=]+?\d+)$/,/^-+([^=]+?)\W+.*$/)}function Q(l){return!v(l,d.bools)&&!v(l,d.counts)&&`${l}`in m?m[l]:k(wt(l))}function k(l){return{[ht.BOOLEAN]:!0,[ht.STRING]:"",[ht.NUMBER]:void 0,[ht.ARRAY]:[]}[l]}function wt(l){let u=ht.BOOLEAN;return v(l,d.strings)?u=ht.STRING:v(l,d.numbers)?u=ht.NUMBER:v(l,d.bools)?u=ht.BOOLEAN:v(l,d.arrays)&&(u=ht.ARRAY),u}function _t(l){return l===void 0}function be(){Object.keys(d.counts).find(l=>v(l,d.arrays)?(H=Error(O("Invalid configuration: %s, opts.count excludes opts.array.",l)),!0):v(l,d.nargs)?(H=Error(O("Invalid configuration: %s, opts.count excludes opts.narg.",l)),!0):!1)}return{aliases:Object.assign({},d.aliases),argv:Object.assign(It,Y),configuration:c,defaulted:Object.assign({},C),error:H,newAliases:Object.assign({},w)}}};function Ws(r){let t=[],e=Object.create(null),n=!0;for(Object.keys(r).forEach(function(s){t.push([].concat(r[s],s))});n;){n=!1;for(let s=0;s<t.length;s++)for(let i=s+1;i<t.length;i++)if(t[s].filter(function(c){return t[i].indexOf(c)!==-1}).length){t[s]=t[s].concat(t[i]),t.splice(i,1),n=!0;break}}return t.forEach(function(s){s=s.filter(function(a,c,m){return m.indexOf(a)===c});let i=s.pop();i!==void 0&&typeof i=="string"&&(e[i]=s)}),e}function Ke(r){return r!==void 0?r+1:1}function Nn(r){return r==="__proto__"?"___proto___":r}function Us(r){return typeof r=="string"&&(r[0]==="'"||r[0]==='"')&&r[r.length-1]===r[0]?r.substring(1,r.length-1):r}import{readFileSync as Vs}from"fs";var Ge,qe,Xe,Ln=process&&process.env&&process.env.YARGS_MIN_NODE_VERSION?Number(process.env.YARGS_MIN_NODE_VERSION):12,Rn=(qe=(Ge=process==null?void 0:process.versions)===null||Ge===void 0?void 0:Ge.node)!==null&&qe!==void 0?qe:(Xe=process==null?void 0:process.version)===null||Xe===void 0?void 0:Xe.slice(1);if(Rn&&Number(Rn.match(/^([^.]+)/)[1])<Ln)throw Error(`yargs parser supports a minimum Node.js version of ${Ln}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);var Ks=process?process.env:{},Bn=new Ee({cwd:process.cwd,env:()=>Ks,format:zs,normalize:Hs,resolve:Ys,require:r=>{if(typeof Et<"u")return Et(r);if(r.match(/\.json$/))return JSON.parse(Vs(r,"utf8"));throw Error("only .json config files are supported in ESM")}}),ae=function(t,e){return Bn.parse(t.slice(),e).argv};ae.detailed=function(r,t){return Bn.parse(r.slice(),t)};ae.camelCase=Wt;ae.decamelize=_e;ae.looksLikeNumber=Oe;var Je=ae;import{basename as oi,dirname as ai,extname as ci,relative as li,resolve as Vn}from"path";function Wn(){return Gs()?0:1}function Gs(){return qs()&&!process.defaultApp}function qs(){return!!process.versions.electron}function Qe(r){return r.slice(Wn()+1)}function Un(){return process.argv[Wn()]}var K=class extends Error{constructor(t){super(t||"yargs error"),this.name="YError",Error.captureStackTrace&&Error.captureStackTrace(this,K)}};import{readFileSync as Xs,statSync as Js,writeFile as Qs}from"fs";import{format as Zs}from"util";import{resolve as ks}from"path";var zn={fs:{readFileSync:Xs,writeFile:Qs},format:Zs,resolve:ks,exists:r=>{try{return Js(r).isFile()}catch{return!1}}};var Ot,Ze=class{constructor(t){t=t||{},this.directory=t.directory||"./locales",this.updateFiles=typeof t.updateFiles=="boolean"?t.updateFiles:!0,this.locale=t.locale||"en",this.fallbackToLanguage=typeof t.fallbackToLanguage=="boolean"?t.fallbackToLanguage:!0,this.cache=Object.create(null),this.writeQueue=[]}__(...t){if(typeof arguments[0]!="string")return this._taggedLiteral(arguments[0],...arguments);let e=t.shift(),n=function(){};return typeof t[t.length-1]=="function"&&(n=t.pop()),n=n||function(){},this.cache[this.locale]||this._readLocaleFile(),!this.cache[this.locale][e]&&this.updateFiles?(this.cache[this.locale][e]=e,this._enqueueWrite({directory:this.directory,locale:this.locale,cb:n})):n(),Ot.format.apply(Ot.format,[this.cache[this.locale][e]||e].concat(t))}__n(){let t=Array.prototype.slice.call(arguments),e=t.shift(),n=t.shift(),s=t.shift(),i=function(){};typeof t[t.length-1]=="function"&&(i=t.pop()),this.cache[this.locale]||this._readLocaleFile();let a=s===1?e:n;this.cache[this.locale][e]&&(a=this.cache[this.locale][e][s===1?"one":"other"]),!this.cache[this.locale][e]&&this.updateFiles?(this.cache[this.locale][e]={one:e,other:n},this._enqueueWrite({directory:this.directory,locale:this.locale,cb:i})):i();let c=[a];return~a.indexOf("%d")&&c.push(s),Ot.format.apply(Ot.format,c.concat(t))}setLocale(t){this.locale=t}getLocale(){return this.locale}updateLocale(t){this.cache[this.locale]||this._readLocaleFile();for(let e in t)Object.prototype.hasOwnProperty.call(t,e)&&(this.cache[this.locale][e]=t[e])}_taggedLiteral(t,...e){let n="";return t.forEach(function(s,i){let a=e[i+1];n+=s,typeof a<"u"&&(n+="%s")}),this.__.apply(this,[n].concat([].slice.call(e,1)))}_enqueueWrite(t){this.writeQueue.push(t),this.writeQueue.length===1&&this._processWriteQueue()}_processWriteQueue(){let t=this,e=this.writeQueue[0],n=e.directory,s=e.locale,i=e.cb,a=this._resolveLocaleFile(n,s),c=JSON.stringify(this.cache[s],null,2);Ot.fs.writeFile(a,c,"utf-8",function(m){t.writeQueue.shift(),t.writeQueue.length>0&&t._processWriteQueue(),i(m)})}_readLocaleFile(){let t={},e=this._resolveLocaleFile(this.directory,this.locale);try{Ot.fs.readFileSync&&(t=JSON.parse(Ot.fs.readFileSync(e,"utf-8")))}catch(n){if(n instanceof SyntaxError&&(n.message="syntax error in "+e),n.code==="ENOENT")t={};else throw n}this.cache[this.locale]=t}_resolveLocaleFile(t,e){let n=Ot.resolve(t,"./",e+".json");if(this.fallbackToLanguage&&!this._fileExistsSync(n)&&~e.lastIndexOf("_")){let s=Ot.resolve(t,"./",e.split("_")[0]+".json");this._fileExistsSync(s)&&(n=s)}return n}_fileExistsSync(t){return Ot.exists(t)}};function Hn(r,t){Ot=t;let e=new Ze(r);return{__:e.__.bind(e),__n:e.__n.bind(e),setLocale:e.setLocale.bind(e),getLocale:e.getLocale.bind(e),updateLocale:e.updateLocale.bind(e),locale:e.locale}}var ti=r=>Hn(r,zn),Yn=ti;var fi="require is not supported by ESM",Kn="loading a directory of commands is not supported yet for ESM",ce;try{ce=ri(import.meta.url)}catch{ce=process.cwd()}var ui=ce.substring(0,ce.lastIndexOf("node_modules")),ke={assert:{notStrictEqual:ei,strictEqual:ni},cliui:Ve,findUp:$n,getEnv:r=>process.env[r],inspect:si,getCallerFile:()=>{throw new K(Kn)},getProcessArgvBin:Un,mainFilename:ui||process.cwd(),Parser:Je,path:{basename:oi,dirname:ai,extname:ci,relative:li,resolve:Vn},process:{argv:()=>process.argv,cwd:process.cwd,emitWarning:(r,t)=>process.emitWarning(r,t),execPath:()=>process.execPath,exit:process.exit,nextTick:process.nextTick,stdColumns:typeof process.stdout.columns<"u"?process.stdout.columns:null},readFileSync:ii,require:()=>{throw new K(fi)},requireDirectory:()=>{throw new K(Kn)},stringWidth:r=>[...r].length,y18n:Yn({directory:Vn(ce,"../../../locales"),updateFiles:!1})};function at(r,t,e,n){e.assert.notStrictEqual(r,t,n)}function tn(r,t){t.assert.strictEqual(typeof r,"string")}function ee(r){return Object.keys(r)}function G(r){return!!r&&!!r.then&&typeof r.then=="function"}function Ft(r){let e=r.replace(/\s{2,}/g," ").split(/\s+(?![^[]*]|[^<]*>)/),n=/\.*[\][<>]/g,s=e.shift();if(!s)throw new Error(`No command found in: ${r}`);let i={cmd:s.replace(n,""),demanded:[],optional:[]};return e.forEach((a,c)=>{let m=!1;a=a.replace(/\s/g,""),/\.+[\]>]/.test(a)&&c===e.length-1&&(m=!0),/^\[/.test(a)?i.optional.push({cmd:a.replace(n,"").split("|"),variadic:m}):i.demanded.push({cmd:a.replace(n,"").split("|"),variadic:m})}),i}var hi=["first","second","third","fourth","fifth","sixth"];function A(r,t,e){function n(){return typeof r=="object"?[{demanded:[],optional:[]},r,t]:[Ft(`cmd ${r}`),t,e]}try{let s=0,[i,a,c]=n(),m=[].slice.call(a);for(;m.length&&m[m.length-1]===void 0;)m.pop();let y=c||m.length;if(y<i.demanded.length)throw new K(`Not enough arguments provided. Expected ${i.demanded.length} but received ${m.length}.`);let p=i.demanded.length+i.optional.length;if(y>p)throw new K(`Too many arguments provided. Expected max ${p} but received ${y}.`);i.demanded.forEach(h=>{let g=m.shift(),w=Gn(g);h.cmd.filter(O=>O===w||O==="*").length===0&&qn(w,h.cmd,s),s+=1}),i.optional.forEach(h=>{if(m.length===0)return;let g=m.shift(),w=Gn(g);h.cmd.filter(O=>O===w||O==="*").length===0&&qn(w,h.cmd,s),s+=1})}catch(s){console.warn(s.stack)}}function Gn(r){return Array.isArray(r)?"array":r===null?"null":typeof r}function qn(r,t,e){throw new K(`Invalid ${hi[e]||"manyith"} argument. Expected ${t.join(" or ")} but received ${r}.`)}var xe=class{constructor(t){this.globalMiddleware=[],this.frozens=[],this.yargs=t}addMiddleware(t,e,n=!0,s=!1){if(A("<array|function> [boolean] [boolean] [boolean]",[t,e,n],arguments.length),Array.isArray(t)){for(let i=0;i<t.length;i++){if(typeof t[i]!="function")throw Error("middleware must be a function");let a=t[i];a.applyBeforeValidation=e,a.global=n}Array.prototype.push.apply(this.globalMiddleware,t)}else if(typeof t=="function"){let i=t;i.applyBeforeValidation=e,i.global=n,i.mutates=s,this.globalMiddleware.push(t)}return this.yargs}addCoerceMiddleware(t,e){let n=this.yargs.getAliases();return this.globalMiddleware=this.globalMiddleware.filter(s=>{let i=[...n[e]||[],e];return s.option?!i.includes(s.option):!0}),t.option=e,this.addMiddleware(t,!0,!0,!0)}getMiddleware(){return this.globalMiddleware}freeze(){this.frozens.push([...this.globalMiddleware])}unfreeze(){let t=this.frozens.pop();t!==void 0&&(this.globalMiddleware=t)}reset(){this.globalMiddleware=this.globalMiddleware.filter(t=>t.global)}};function Xn(r){return r?r.map(t=>(t.applyBeforeValidation=!1,t)):[]}function Ut(r,t,e,n){return e.reduce((s,i)=>{if(i.applyBeforeValidation!==n)return s;if(i.mutates){if(i.applied)return s;i.applied=!0}if(G(s))return s.then(a=>Promise.all([a,i(a,t)])).then(([a,c])=>Object.assign(a,c));{let a=i(s,t);return G(a)?a.then(c=>Object.assign(s,c)):Object.assign(s,a)}},r)}function zt(r,t,e=n=>{throw n}){try{let n=di(r)?r():r;return G(n)?n.then(s=>t(s)):t(n)}catch(n){return e(n)}}function di(r){return typeof r=="function"}function en(r){if(typeof Et>"u")return null;for(let t=0,e=Object.keys(Et.cache),n;t<e.length;t++)if(n=Et.cache[e[t]],n.exports===r)return n;return null}var ne=/(^\*)|(^\$0)/,nn=class{constructor(t,e,n,s){this.requireCache=new Set,this.handlers={},this.aliasMap={},this.frozens=[],this.shim=s,this.usage=t,this.globalMiddleware=n,this.validation=e}addDirectory(t,e,n,s){s=s||{},typeof s.recurse!="boolean"&&(s.recurse=!1),Array.isArray(s.extensions)||(s.extensions=["js"]);let i=typeof s.visit=="function"?s.visit:a=>a;s.visit=(a,c,m)=>{let y=i(a,c,m);if(y){if(this.requireCache.has(c))return y;this.requireCache.add(c),this.addHandler(y)}return y},this.shim.requireDirectory({require:e,filename:n},t,s)}addHandler(t,e,n,s,i,a){let c=[],m=Xn(i);if(s=s||(()=>{}),Array.isArray(t))if(pi(t))[t,...c]=t;else for(let y of t)this.addHandler(y);else if(gi(t)){let y=Array.isArray(t.command)||typeof t.command=="string"?t.command:this.moduleName(t);t.aliases&&(y=[].concat(y).concat(t.aliases)),this.addHandler(y,this.extractDesc(t),t.builder,t.handler,t.middlewares,t.deprecated);return}else if(Jn(n)){this.addHandler([t].concat(c),e,n.builder,n.handler,n.middlewares,n.deprecated);return}if(typeof t=="string"){let y=Ft(t);c=c.map(g=>Ft(g).cmd);let p=!1,h=[y.cmd].concat(c).filter(g=>ne.test(g)?(p=!0,!1):!0);h.length===0&&p&&h.push("$0"),p&&(y.cmd=h[0],c=h.slice(1),t=t.replace(ne,y.cmd)),c.forEach(g=>{this.aliasMap[g]=y.cmd}),e!==!1&&this.usage.command(t,e,p,c,a),this.handlers[y.cmd]={original:t,description:e,handler:s,builder:n||{},middlewares:m,deprecated:a,demanded:y.demanded,optional:y.optional},p&&(this.defaultCommand=this.handlers[y.cmd])}}getCommandHandlers(){return this.handlers}getCommands(){return Object.keys(this.handlers).concat(Object.keys(this.aliasMap))}hasDefaultCommand(){return!!this.defaultCommand}runCommand(t,e,n,s,i,a){let c=this.handlers[t]||this.handlers[this.aliasMap[t]]||this.defaultCommand,m=e.getInternalMethods().getContext(),y=m.commands.slice(),p=!t;t&&(m.commands.push(t),m.fullCommands.push(c.original));let h=this.applyBuilderUpdateUsageAndParse(p,c,e,n.aliases,y,s,i,a);return G(h)?h.then(g=>this.applyMiddlewareAndGetResult(p,c,g.innerArgv,m,i,g.aliases,e)):this.applyMiddlewareAndGetResult(p,c,h.innerArgv,m,i,h.aliases,e)}applyBuilderUpdateUsageAndParse(t,e,n,s,i,a,c,m){let y=e.builder,p=n;if(Ce(y)){n.getInternalMethods().getUsageInstance().freeze();let h=y(n.getInternalMethods().reset(s),m);if(G(h))return h.then(g=>(p=Zn(g)?g:n,this.parseAndUpdateUsage(t,e,p,i,a,c)))}else mi(y)&&(n.getInternalMethods().getUsageInstance().freeze(),p=n.getInternalMethods().reset(s),Object.keys(e.builder).forEach(h=>{p.option(h,y[h])}));return this.parseAndUpdateUsage(t,e,p,i,a,c)}parseAndUpdateUsage(t,e,n,s,i,a){t&&n.getInternalMethods().getUsageInstance().unfreeze(!0),this.shouldUpdateUsage(n)&&n.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(s,e),e.description);let c=n.getInternalMethods().runYargsParserAndExecuteCommands(null,void 0,!0,i,a);return G(c)?c.then(m=>({aliases:n.parsed.aliases,innerArgv:m})):{aliases:n.parsed.aliases,innerArgv:c}}shouldUpdateUsage(t){return!t.getInternalMethods().getUsageInstance().getUsageDisabled()&&t.getInternalMethods().getUsageInstance().getUsage().length===0}usageFromParentCommandsCommandHandler(t,e){let n=ne.test(e.original)?e.original.replace(ne,"").trim():e.original,s=t.filter(i=>!ne.test(i));return s.push(n),`$0 ${s.join(" ")}`}handleValidationAndGetResult(t,e,n,s,i,a,c,m){if(!a.getInternalMethods().getHasOutput()){let y=a.getInternalMethods().runValidation(i,m,a.parsed.error,t);n=zt(n,p=>(y(p),p))}if(e.handler&&!a.getInternalMethods().getHasOutput()){a.getInternalMethods().setHasOutput();let y=!!a.getOptions().configuration["populate--"];a.getInternalMethods().postProcess(n,y,!1,!1),n=Ut(n,a,c,!1),n=zt(n,p=>{let h=e.handler(p);return G(h)?h.then(()=>p):p}),t||a.getInternalMethods().getUsageInstance().cacheHelpMessage(),G(n)&&!a.getInternalMethods().hasParseCallback()&&n.catch(p=>{try{a.getInternalMethods().getUsageInstance().fail(null,p)}catch{}})}return t||(s.commands.pop(),s.fullCommands.pop()),n}applyMiddlewareAndGetResult(t,e,n,s,i,a,c){let m={};if(i)return n;c.getInternalMethods().getHasOutput()||(m=this.populatePositionals(e,n,s,c));let y=this.globalMiddleware.getMiddleware().slice(0).concat(e.middlewares),p=Ut(n,c,y,!0);return G(p)?p.then(h=>this.handleValidationAndGetResult(t,e,h,s,a,c,y,m)):this.handleValidationAndGetResult(t,e,p,s,a,c,y,m)}populatePositionals(t,e,n,s){e._=e._.slice(n.commands.length);let i=t.demanded.slice(0),a=t.optional.slice(0),c={};for(this.validation.positionalCount(i.length,e._.length);i.length;){let m=i.shift();this.populatePositional(m,e,c)}for(;a.length;){let m=a.shift();this.populatePositional(m,e,c)}return e._=n.commands.concat(e._.map(m=>""+m)),this.postProcessPositionals(e,c,this.cmdToParseOptions(t.original),s),c}populatePositional(t,e,n){let s=t.cmd[0];t.variadic?n[s]=e._.splice(0).map(String):e._.length&&(n[s]=[String(e._.shift())])}cmdToParseOptions(t){let e={array:[],default:{},alias:{},demand:{}},n=Ft(t);return n.demanded.forEach(s=>{let[i,...a]=s.cmd;s.variadic&&(e.array.push(i),e.default[i]=[]),e.alias[i]=a,e.demand[i]=!0}),n.optional.forEach(s=>{let[i,...a]=s.cmd;s.variadic&&(e.array.push(i),e.default[i]=[]),e.alias[i]=a}),e}postProcessPositionals(t,e,n,s){let i=Object.assign({},s.getOptions());i.default=Object.assign(n.default,i.default);for(let y of Object.keys(n.alias))i.alias[y]=(i.alias[y]||[]).concat(n.alias[y]);i.array=i.array.concat(n.array),i.config={};let a=[];if(Object.keys(e).forEach(y=>{e[y].map(p=>{i.configuration["unknown-options-as-args"]&&(i.key[y]=!0),a.push(`--${y}`),a.push(p)})}),!a.length)return;let c=Object.assign({},i.configuration,{"populate--":!1}),m=this.shim.Parser.detailed(a,Object.assign({},i,{configuration:c}));if(m.error)s.getInternalMethods().getUsageInstance().fail(m.error.message,m.error);else{let y=Object.keys(e);Object.keys(e).forEach(p=>{y.push(...m.aliases[p])}),Object.keys(m.argv).forEach(p=>{y.includes(p)&&(e[p]||(e[p]=m.argv[p]),!this.isInConfigs(s,p)&&!this.isDefaulted(s,p)&&Object.prototype.hasOwnProperty.call(t,p)&&Object.prototype.hasOwnProperty.call(m.argv,p)&&(Array.isArray(t[p])||Array.isArray(m.argv[p]))?t[p]=[].concat(t[p],m.argv[p]):t[p]=m.argv[p])})}}isDefaulted(t,e){let{default:n}=t.getOptions();return Object.prototype.hasOwnProperty.call(n,e)||Object.prototype.hasOwnProperty.call(n,this.shim.Parser.camelCase(e))}isInConfigs(t,e){let{configObjects:n}=t.getOptions();return n.some(s=>Object.prototype.hasOwnProperty.call(s,e))||n.some(s=>Object.prototype.hasOwnProperty.call(s,this.shim.Parser.camelCase(e)))}runDefaultBuilderOn(t){if(!this.defaultCommand)return;if(this.shouldUpdateUsage(t)){let n=ne.test(this.defaultCommand.original)?this.defaultCommand.original:this.defaultCommand.original.replace(/^[^[\]<>]*/,"$0 ");t.getInternalMethods().getUsageInstance().usage(n,this.defaultCommand.description)}let e=this.defaultCommand.builder;if(Ce(e))return e(t,!0);Jn(e)||Object.keys(e).forEach(n=>{t.option(n,e[n])})}moduleName(t){let e=en(t);if(!e)throw new Error(`No command name given for module: ${this.shim.inspect(t)}`);return this.commandFromFilename(e.filename)}commandFromFilename(t){return this.shim.path.basename(t,this.shim.path.extname(t))}extractDesc({describe:t,description:e,desc:n}){for(let s of[t,e,n]){if(typeof s=="string"||s===!1)return s;at(s,!0,this.shim)}return!1}freeze(){this.frozens.push({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand})}unfreeze(){let t=this.frozens.pop();at(t,void 0,this.shim),{handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand}=t}reset(){return this.handlers={},this.aliasMap={},this.defaultCommand=void 0,this.requireCache=new Set,this}};function Qn(r,t,e,n){return new nn(r,t,e,n)}function Jn(r){return typeof r=="object"&&!!r.builder&&typeof r.handler=="function"}function pi(r){return r.every(t=>typeof t=="string")}function Ce(r){return typeof r=="function"}function mi(r){return typeof r=="object"}function gi(r){return typeof r=="object"&&!Array.isArray(r)}function Mt(r={},t=()=>!0){let e={};return ee(r).forEach(n=>{t(n,r[n])&&(e[n]=r[n])}),e}function Dt(r){typeof process>"u"||[process.stdout,process.stderr].forEach(t=>{let e=t;e._handle&&e.isTTY&&typeof e._handle.setBlocking=="function"&&e._handle.setBlocking(r)})}function bi(r){return typeof r=="boolean"}function ts(r,t){let e=t.y18n.__,n={},s=[];n.failFn=function(E){s.push(E)};let i=null,a=null,c=!0;n.showHelpOnFail=function(E=!0,S){let[N,z]=typeof E=="string"?[!0,E]:[E,S];return r.getInternalMethods().isGlobalContext()&&(a=z),i=z,c=N,n};let m=!1;n.fail=function(E,S){let N=r.getInternalMethods().getLoggerInstance();if(s.length)for(let z=s.length-1;z>=0;--z){let et=s[z];if(bi(et)){if(S)throw S;if(E)throw Error(E)}else et(E,S,n)}else{if(r.getExitProcess()&&Dt(!0),!m){m=!0,c&&(r.showHelp("error"),N.error()),(E||S)&&N.error(E||S);let z=i||a;z&&((E||S)&&N.error(""),N.error(z))}if(S=S||new K(E),r.getExitProcess())return r.exit(1);if(r.getInternalMethods().hasParseCallback())return r.exit(1,S);throw S}};let y=[],p=!1;n.usage=(I,E)=>I===null?(p=!0,y=[],n):(p=!1,y.push([I,E||""]),n),n.getUsage=()=>y,n.getUsageDisabled=()=>p,n.getPositionalGroupName=()=>e("Positionals:");let h=[];n.example=(I,E)=>{h.push([I,E||""])};let g=[];n.command=function(E,S,N,z,et=!1){N&&(g=g.map(U=>(U[2]=!1,U))),g.push([E,S||"",N,z,et])},n.getCommands=()=>g;let w={};n.describe=function(E,S){Array.isArray(E)?E.forEach(N=>{n.describe(N,S)}):typeof E=="object"?Object.keys(E).forEach(N=>{n.describe(N,E[N])}):w[E]=S},n.getDescriptions=()=>w;let C=[];n.epilog=I=>{C.push(I)};let O=!1,d;n.wrap=I=>{O=!0,d=I},n.getWrap=()=>t.getEnv("YARGS_DISABLE_WRAP")?null:(O||(d=te(),O=!0),d);let L="__yargsString__:";n.deferY18nLookup=I=>L+I,n.help=function(){if(W)return W;H();let E=r.customScriptName?r.$0:t.path.basename(r.$0),S=r.getDemandedOptions(),N=r.getDemandedCommands(),z=r.getDeprecatedOptions(),et=r.getGroups(),U=r.getOptions(),nt=[];nt=nt.concat(Object.keys(w)),nt=nt.concat(Object.keys(S)),nt=nt.concat(Object.keys(N)),nt=nt.concat(Object.keys(U.default)),nt=nt.filter(It),nt=Object.keys(nt.reduce((D,q)=>(q!=="_"&&(D[q]=!0),D),{}));let Rt=n.getWrap(),X=t.cliui({width:Rt,wrap:!!Rt});if(!p){if(y.length)y.forEach(D=>{X.div({text:`${D[0].replace(/\$0/g,E)}`}),D[1]&&X.div({text:`${D[1]}`,padding:[1,0,0,0]})}),X.div();else if(g.length){let D=null;N._?D=`${E} <${e("command")}>
`:D=`${E} [${e("command")}]
`,X.div(`${D}`)}}if(g.length>1||g.length===1&&!g[0][2]){X.div(e("Commands:"));let D=r.getInternalMethods().getContext(),q=D.commands.length?`${D.commands.join(" ")} `:"";r.getInternalMethods().getParserConfiguration()["sort-commands"]===!0&&(g=g.sort((B,Q)=>B[0].localeCompare(Q[0])));let J=E?`${E} `:"";g.forEach(B=>{let Q=`${J}${q}${B[0].replace(/^\$0 ?/,"")}`;X.span({text:Q,padding:[0,2,0,2],width:R(g,Rt,`${E}${q}`)+4},{text:B[1]});let k=[];B[2]&&k.push(`[${e("default")}]`),B[3]&&B[3].length&&k.push(`[${e("aliases:")} ${B[3].join(", ")}]`),B[4]&&(typeof B[4]=="string"?k.push(`[${e("deprecated: %s",B[4])}]`):k.push(`[${e("deprecated")}]`)),k.length?X.div({text:k.join(" "),padding:[0,0,0,2],align:"right"}):X.div()}),X.div()}let Pt=(Object.keys(U.alias)||[]).concat(Object.keys(r.parsed.newAliases)||[]);nt=nt.filter(D=>!r.parsed.newAliases[D]&&Pt.every(q=>(U.alias[q]||[]).indexOf(D)===-1));let St=e("Options:");et[St]||(et[St]=[]),Y(nt,U.alias,et,St);let Bt=D=>/^--/.test(Ae(D)),v=Object.keys(et).filter(D=>et[D].length>0).map(D=>{let q=et[D].filter(It).map(J=>{if(Pt.includes(J))return J;for(let B=0,Q;(Q=Pt[B])!==void 0;B++)if((U.alias[Q]||[]).includes(J))return Q;return J});return{groupName:D,normalizedKeys:q}}).filter(({normalizedKeys:D})=>D.length>0).map(({groupName:D,normalizedKeys:q})=>{let J=q.reduce((B,Q)=>(B[Q]=[Q].concat(U.alias[Q]||[]).map(k=>D===n.getPositionalGroupName()?k:(/^[0-9]$/.test(k)?U.boolean.includes(Q)?"-":"--":k.length>1?"--":"-")+k).sort((k,wt)=>Bt(k)===Bt(wt)?0:Bt(k)?1:-1).join(", "),B),{});return{groupName:D,normalizedKeys:q,switches:J}});if(v.filter(({groupName:D})=>D!==n.getPositionalGroupName()).some(({normalizedKeys:D,switches:q})=>!D.every(J=>Bt(q[J])))&&v.filter(({groupName:D})=>D!==n.getPositionalGroupName()).forEach(({normalizedKeys:D,switches:q})=>{D.forEach(J=>{Bt(q[J])&&(q[J]=yi(q[J],4))})}),v.forEach(({groupName:D,normalizedKeys:q,switches:J})=>{X.div(D),q.forEach(B=>{let Q=J[B],k=w[B]||"",wt=null;k.includes(L)&&(k=e(k.substring(L.length))),U.boolean.includes(B)&&(wt=`[${e("boolean")}]`),U.count.includes(B)&&(wt=`[${e("count")}]`),U.string.includes(B)&&(wt=`[${e("string")}]`),U.normalize.includes(B)&&(wt=`[${e("string")}]`),U.array.includes(B)&&(wt=`[${e("array")}]`),U.number.includes(B)&&(wt=`[${e("number")}]`);let _t=u=>typeof u=="string"?`[${e("deprecated: %s",u)}]`:`[${e("deprecated")}]`,be=[B in z?_t(z[B]):null,wt,B in S?`[${e("required")}]`:null,U.choices&&U.choices[B]?`[${e("choices:")} ${n.stringifiedValues(U.choices[B])}]`:null,yt(U.default[B],U.defaultDescription[B])].filter(Boolean).join(" ");X.span({text:Ae(Q),padding:[0,2,0,2+kn(Q)],width:R(J,Rt)+4},k);let l=r.getInternalMethods().getUsageConfiguration()["hide-types"]===!0;be&&!l?X.div({text:be,padding:[0,0,0,2],align:"right"}):X.div()}),X.div()}),h.length&&(X.div(e("Examples:")),h.forEach(D=>{D[0]=D[0].replace(/\$0/g,E)}),h.forEach(D=>{D[1]===""?X.div({text:D[0],padding:[0,2,0,2]}):X.div({text:D[0],padding:[0,2,0,2],width:R(h,Rt)+4},{text:D[1]})}),X.div()),C.length>0){let D=C.map(q=>q.replace(/\$0/g,E)).join(`
`);X.div(`${D}
`)}return X.toString().replace(/\s*$/,"")};function R(I,E,S){let N=0;return Array.isArray(I)||(I=Object.values(I).map(z=>[z])),I.forEach(z=>{N=Math.max(t.stringWidth(S?`${S} ${Ae(z[0])}`:Ae(z[0]))+kn(z[0]),N)}),E&&(N=Math.min(N,parseInt((E*.5).toString(),10))),N}function H(){let I=r.getDemandedOptions(),E=r.getOptions();(Object.keys(E.alias)||[]).forEach(S=>{E.alias[S].forEach(N=>{w[N]&&n.describe(S,w[N]),N in I&&r.demandOption(S,I[N]),E.boolean.includes(N)&&r.boolean(S),E.count.includes(N)&&r.count(S),E.string.includes(N)&&r.string(S),E.normalize.includes(N)&&r.normalize(S),E.array.includes(N)&&r.array(S),E.number.includes(N)&&r.number(S)})})}let W;n.cacheHelpMessage=function(){W=this.help()},n.clearCachedHelpMessage=function(){W=void 0},n.hasCachedHelpMessage=function(){return!!W};function Y(I,E,S,N){let z=[],et=null;return Object.keys(S).forEach(U=>{z=z.concat(S[U])}),I.forEach(U=>{et=[U].concat(E[U]),et.some(nt=>z.indexOf(nt)!==-1)||S[N].push(U)}),z}function It(I){return r.getOptions().hiddenOptions.indexOf(I)<0||r.parsed.argv[r.getOptions().showHiddenOpt]}n.showHelp=I=>{let E=r.getInternalMethods().getLoggerInstance();I||(I="error"),(typeof I=="function"?I:E[I])(n.help())},n.functionDescription=I=>{let E=I.name?t.Parser.decamelize(I.name,"-"):e("generated-value");return["(",E,")"].join("")},n.stringifiedValues=function(E,S){let N="",z=S||", ",et=[].concat(E);return!E||!et.length||et.forEach(U=>{N.length&&(N+=z),N+=JSON.stringify(U)}),N};function yt(I,E){let S=`[${e("default:")} `;if(I===void 0&&!E)return null;if(E)S+=E;else switch(typeof I){case"string":S+=`"${I}"`;break;case"object":S+=JSON.stringify(I);break;default:S+=I}return`${S}]`}function te(){return t.process.stdColumns?Math.min(80,t.process.stdColumns):80}let Lt=null;n.version=I=>{Lt=I},n.showVersion=I=>{let E=r.getInternalMethods().getLoggerInstance();I||(I="error"),(typeof I=="function"?I:E[I])(Lt)},n.reset=function(E){return i=null,m=!1,y=[],p=!1,C=[],h=[],g=[],w=Mt(w,S=>!E[S]),n};let V=[];return n.freeze=function(){V.push({failMessage:i,failureOutput:m,usages:y,usageDisabled:p,epilogs:C,examples:h,commands:g,descriptions:w})},n.unfreeze=function(E=!1){let S=V.pop();!S||(E?(w={...S.descriptions,...w},g=[...S.commands,...g],y=[...S.usages,...y],h=[...S.examples,...h],C=[...S.epilogs,...C]):{failMessage:i,failureOutput:m,usages:y,usageDisabled:p,epilogs:C,examples:h,commands:g,descriptions:w}=S)},n}function sn(r){return typeof r=="object"}function yi(r,t){return sn(r)?{text:r.text,indentation:r.indentation+t}:{text:r,indentation:t}}function kn(r){return sn(r)?r.indentation:0}function Ae(r){return sn(r)?r.text:r}var es=`###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc
#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.
#
_{{app_name}}_yargs_completions()
{
    local cur_word args type_list

    cur_word="\${COMP_WORDS[COMP_CWORD]}"
    args=("\${COMP_WORDS[@]}")

    # ask yargs to generate completions.
    type_list=$({{app_path}} --get-yargs-completions "\${args[@]}")

    COMPREPLY=( $(compgen -W "\${type_list}" -- \${cur_word}) )

    # if no match was found, fall back to filename completion
    if [ \${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=()
    fi

    return 0
}
complete -o bashdefault -o default -F _{{app_name}}_yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
`,ns=`#compdef {{app_name}}
###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc
#    or {{app_path}} {{completion_command}} >> ~/.zprofile on OSX.
#
_{{app_name}}_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "\${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _{{app_name}}_yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
`;var rn=class{constructor(t,e,n,s){var i,a,c;this.yargs=t,this.usage=e,this.command=n,this.shim=s,this.completionKey="get-yargs-completions",this.aliases=null,this.customCompletionFunction=null,this.indexAfterLastReset=0,this.zshShell=(c=((i=this.shim.getEnv("SHELL"))===null||i===void 0?void 0:i.includes("zsh"))||((a=this.shim.getEnv("ZSH_NAME"))===null||a===void 0?void 0:a.includes("zsh")))!==null&&c!==void 0?c:!1}defaultCompletion(t,e,n,s){let i=this.command.getCommandHandlers();for(let c=0,m=t.length;c<m;++c)if(i[t[c]]&&i[t[c]].builder){let y=i[t[c]].builder;if(Ce(y)){this.indexAfterLastReset=c+1;let p=this.yargs.getInternalMethods().reset();return y(p,!0),p.argv}}let a=[];this.commandCompletions(a,t,n),this.optionCompletions(a,t,e,n),this.choicesFromOptionsCompletions(a,t,e,n),this.choicesFromPositionalsCompletions(a,t,e,n),s(null,a)}commandCompletions(t,e,n){let s=this.yargs.getInternalMethods().getContext().commands;!n.match(/^-/)&&s[s.length-1]!==n&&!this.previousArgHasChoices(e)&&this.usage.getCommands().forEach(i=>{let a=Ft(i[0]).cmd;if(e.indexOf(a)===-1)if(!this.zshShell)t.push(a);else{let c=i[1]||"";t.push(a.replace(/:/g,"\\:")+":"+c)}})}optionCompletions(t,e,n,s){if((s.match(/^-/)||s===""&&t.length===0)&&!this.previousArgHasChoices(e)){let i=this.yargs.getOptions(),a=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[];Object.keys(i.key).forEach(c=>{let m=!!i.configuration["boolean-negation"]&&i.boolean.includes(c);!a.includes(c)&&!i.hiddenOptions.includes(c)&&!this.argsContainKey(e,c,m)&&this.completeOptionKey(c,t,s,m&&!!i.default[c])})}}choicesFromOptionsCompletions(t,e,n,s){if(this.previousArgHasChoices(e)){let i=this.getPreviousArgChoices(e);i&&i.length>0&&t.push(...i.map(a=>a.replace(/:/g,"\\:")))}}choicesFromPositionalsCompletions(t,e,n,s){if(s===""&&t.length>0&&this.previousArgHasChoices(e))return;let i=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[],a=Math.max(this.indexAfterLastReset,this.yargs.getInternalMethods().getContext().commands.length+1),c=i[n._.length-a-1];if(!c)return;let m=this.yargs.getOptions().choices[c]||[];for(let y of m)y.startsWith(s)&&t.push(y.replace(/:/g,"\\:"))}getPreviousArgChoices(t){if(t.length<1)return;let e=t[t.length-1],n="";if(!e.startsWith("-")&&t.length>1&&(n=e,e=t[t.length-2]),!e.startsWith("-"))return;let s=e.replace(/^-+/,""),i=this.yargs.getOptions(),a=[s,...this.yargs.getAliases()[s]||[]],c;for(let m of a)if(Object.prototype.hasOwnProperty.call(i.key,m)&&Array.isArray(i.choices[m])){c=i.choices[m];break}if(c)return c.filter(m=>!n||m.startsWith(n))}previousArgHasChoices(t){let e=this.getPreviousArgChoices(t);return e!==void 0&&e.length>0}argsContainKey(t,e,n){let s=i=>t.indexOf((/^[^0-9]$/.test(i)?"-":"--")+i)!==-1;if(s(e)||n&&s(`no-${e}`))return!0;if(this.aliases){for(let i of this.aliases[e])if(s(i))return!0}return!1}completeOptionKey(t,e,n,s){var i,a,c,m;let y=t;if(this.zshShell){let w=this.usage.getDescriptions(),C=(a=(i=this===null||this===void 0?void 0:this.aliases)===null||i===void 0?void 0:i[t])===null||a===void 0?void 0:a.find(L=>{let R=w[L];return typeof R=="string"&&R.length>0}),O=C?w[C]:void 0,d=(m=(c=w[t])!==null&&c!==void 0?c:O)!==null&&m!==void 0?m:"";y=`${t.replace(/:/g,"\\:")}:${d.replace("__yargsString__:","").replace(/(\r\n|\n|\r)/gm," ")}`}let p=w=>/^--/.test(w),h=w=>/^[^0-9]$/.test(w),g=!p(n)&&h(t)?"-":"--";e.push(g+y),s&&e.push(g+"no-"+y)}customCompletion(t,e,n,s){if(at(this.customCompletionFunction,null,this.shim),_i(this.customCompletionFunction)){let i=this.customCompletionFunction(n,e);return G(i)?i.then(a=>{this.shim.process.nextTick(()=>{s(null,a)})}).catch(a=>{this.shim.process.nextTick(()=>{s(a,void 0)})}):s(null,i)}else return Oi(this.customCompletionFunction)?this.customCompletionFunction(n,e,(i=s)=>this.defaultCompletion(t,e,n,i),i=>{s(null,i)}):this.customCompletionFunction(n,e,i=>{s(null,i)})}getCompletion(t,e){let n=t.length?t[t.length-1]:"",s=this.yargs.parse(t,!0),i=this.customCompletionFunction?a=>this.customCompletion(t,a,n,e):a=>this.defaultCompletion(t,a,n,e);return G(s)?s.then(i):i(s)}generateCompletionScript(t,e){let n=this.zshShell?ns:es,s=this.shim.path.basename(t);return t.match(/\.js$/)&&(t=`./${t}`),n=n.replace(/{{app_name}}/g,s),n=n.replace(/{{completion_command}}/g,e),n.replace(/{{app_path}}/g,t)}registerFunction(t){this.customCompletionFunction=t}setParsed(t){this.aliases=t.aliases}};function ss(r,t,e,n){return new rn(r,t,e,n)}function _i(r){return r.length<3}function Oi(r){return r.length>3}function is(r,t){if(r.length===0)return t.length;if(t.length===0)return r.length;let e=[],n;for(n=0;n<=t.length;n++)e[n]=[n];let s;for(s=0;s<=r.length;s++)e[0][s]=s;for(n=1;n<=t.length;n++)for(s=1;s<=r.length;s++)t.charAt(n-1)===r.charAt(s-1)?e[n][s]=e[n-1][s-1]:n>1&&s>1&&t.charAt(n-2)===r.charAt(s-1)&&t.charAt(n-1)===r.charAt(s-2)?e[n][s]=e[n-2][s-2]+1:e[n][s]=Math.min(e[n-1][s-1]+1,Math.min(e[n][s-1]+1,e[n-1][s]+1));return e[t.length][r.length]}var rs=["$0","--","_"];function os(r,t,e){let n=e.y18n.__,s=e.y18n.__n,i={};i.nonOptionCount=function(h){let g=r.getDemandedCommands(),C=h._.length+(h["--"]?h["--"].length:0)-r.getInternalMethods().getContext().commands.length;g._&&(C<g._.min||C>g._.max)&&(C<g._.min?g._.minMsg!==void 0?t.fail(g._.minMsg?g._.minMsg.replace(/\$0/g,C.toString()).replace(/\$1/,g._.min.toString()):null):t.fail(s("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",C,C.toString(),g._.min.toString())):C>g._.max&&(g._.maxMsg!==void 0?t.fail(g._.maxMsg?g._.maxMsg.replace(/\$0/g,C.toString()).replace(/\$1/,g._.max.toString()):null):t.fail(s("Too many non-option arguments: got %s, maximum of %s","Too many non-option arguments: got %s, maximum of %s",C,C.toString(),g._.max.toString()))))},i.positionalCount=function(h,g){g<h&&t.fail(s("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",g,g+"",h+""))},i.requiredArguments=function(h,g){let w=null;for(let C of Object.keys(g))(!Object.prototype.hasOwnProperty.call(h,C)||typeof h[C]>"u")&&(w=w||{},w[C]=g[C]);if(w){let C=[];for(let d of Object.keys(w)){let L=w[d];L&&C.indexOf(L)<0&&C.push(L)}let O=C.length?`
${C.join(`
`)}`:"";t.fail(s("Missing required argument: %s","Missing required arguments: %s",Object.keys(w).length,Object.keys(w).join(", ")+O))}},i.unknownArguments=function(h,g,w,C,O=!0){var d;let L=r.getInternalMethods().getCommandInstance().getCommands(),R=[],H=r.getInternalMethods().getContext();if(Object.keys(h).forEach(W=>{!rs.includes(W)&&!Object.prototype.hasOwnProperty.call(w,W)&&!Object.prototype.hasOwnProperty.call(r.getInternalMethods().getParseContext(),W)&&!i.isValidAndSomeAliasIsNotNew(W,g)&&R.push(W)}),O&&(H.commands.length>0||L.length>0||C)&&h._.slice(H.commands.length).forEach(W=>{L.includes(""+W)||R.push(""+W)}),O){let Y=((d=r.getDemandedCommands()._)===null||d===void 0?void 0:d.max)||0,It=H.commands.length+Y;It<h._.length&&h._.slice(It).forEach(yt=>{yt=String(yt),!H.commands.includes(yt)&&!R.includes(yt)&&R.push(yt)})}R.length&&t.fail(s("Unknown argument: %s","Unknown arguments: %s",R.length,R.map(W=>W.trim()?W:`"${W}"`).join(", ")))},i.unknownCommands=function(h){let g=r.getInternalMethods().getCommandInstance().getCommands(),w=[],C=r.getInternalMethods().getContext();return(C.commands.length>0||g.length>0)&&h._.slice(C.commands.length).forEach(O=>{g.includes(""+O)||w.push(""+O)}),w.length>0?(t.fail(s("Unknown command: %s","Unknown commands: %s",w.length,w.join(", "))),!0):!1},i.isValidAndSomeAliasIsNotNew=function(h,g){if(!Object.prototype.hasOwnProperty.call(g,h))return!1;let w=r.parsed.newAliases;return[h,...g[h]].some(C=>!Object.prototype.hasOwnProperty.call(w,C)||!w[h])},i.limitedChoices=function(h){let g=r.getOptions(),w={};if(!Object.keys(g.choices).length)return;Object.keys(h).forEach(d=>{rs.indexOf(d)===-1&&Object.prototype.hasOwnProperty.call(g.choices,d)&&[].concat(h[d]).forEach(L=>{g.choices[d].indexOf(L)===-1&&L!==void 0&&(w[d]=(w[d]||[]).concat(L))})});let C=Object.keys(w);if(!C.length)return;let O=n("Invalid values:");C.forEach(d=>{O+=`
  ${n("Argument: %s, Given: %s, Choices: %s",d,t.stringifiedValues(w[d]),t.stringifiedValues(g.choices[d]))}`}),t.fail(O)};let a={};i.implies=function(h,g){A("<string|object> [array|number|string]",[h,g],arguments.length),typeof h=="object"?Object.keys(h).forEach(w=>{i.implies(w,h[w])}):(r.global(h),a[h]||(a[h]=[]),Array.isArray(g)?g.forEach(w=>i.implies(h,w)):(at(g,void 0,e),a[h].push(g)))},i.getImplied=function(){return a};function c(p,h){let g=Number(h);return h=isNaN(g)?h:g,typeof h=="number"?h=p._.length>=h:h.match(/^--no-.+/)?(h=h.match(/^--no-(.+)/)[1],h=!Object.prototype.hasOwnProperty.call(p,h)):h=Object.prototype.hasOwnProperty.call(p,h),h}i.implications=function(h){let g=[];if(Object.keys(a).forEach(w=>{let C=w;(a[w]||[]).forEach(O=>{let d=C,L=O;d=c(h,d),O=c(h,O),d&&!O&&g.push(` ${C} -> ${L}`)})}),g.length){let w=`${n("Implications failed:")}
`;g.forEach(C=>{w+=C}),t.fail(w)}};let m={};i.conflicts=function(h,g){A("<string|object> [array|string]",[h,g],arguments.length),typeof h=="object"?Object.keys(h).forEach(w=>{i.conflicts(w,h[w])}):(r.global(h),m[h]||(m[h]=[]),Array.isArray(g)?g.forEach(w=>i.conflicts(h,w)):m[h].push(g))},i.getConflicting=()=>m,i.conflicting=function(h){Object.keys(h).forEach(g=>{m[g]&&m[g].forEach(w=>{w&&h[g]!==void 0&&h[w]!==void 0&&t.fail(n("Arguments %s and %s are mutually exclusive",g,w))})}),r.getInternalMethods().getParserConfiguration()["strip-dashed"]&&Object.keys(m).forEach(g=>{m[g].forEach(w=>{w&&h[e.Parser.camelCase(g)]!==void 0&&h[e.Parser.camelCase(w)]!==void 0&&t.fail(n("Arguments %s and %s are mutually exclusive",g,w))})})},i.recommendCommands=function(h,g){g=g.sort((d,L)=>L.length-d.length);let C=null,O=1/0;for(let d=0,L;(L=g[d])!==void 0;d++){let R=is(h,L);R<=3&&R<O&&(O=R,C=L)}C&&t.fail(n("Did you mean %s?",C))},i.reset=function(h){return a=Mt(a,g=>!h[g]),m=Mt(m,g=>!h[g]),i};let y=[];return i.freeze=function(){y.push({implied:a,conflicting:m})},i.unfreeze=function(){let h=y.pop();at(h,void 0,e),{implied:a,conflicting:m}=h},i}var on=[],le;function fe(r,t,e,n){le=n;let s={};if(Object.prototype.hasOwnProperty.call(r,"extends")){if(typeof r.extends!="string")return s;let i=/\.json|\..*rc$/.test(r.extends),a=null;if(i)a=xi(t,r.extends);else try{a=Et.resolve(r.extends)}catch{return r}Ei(a),on.push(a),s=i?JSON.parse(le.readFileSync(a,"utf8")):Et(r.extends),delete r.extends,s=fe(s,le.path.dirname(a),e,le)}return on=[],e?as(s,r):Object.assign({},s,r)}function Ei(r){if(on.indexOf(r)>-1)throw new K(`Circular extended configurations: '${r}'.`)}function xi(r,t){return le.path.resolve(r,t)}function as(r,t){let e={};function n(s){return s&&typeof s=="object"&&!Array.isArray(s)}Object.assign(e,r);for(let s of Object.keys(t))n(t[s])&&n(e[s])?e[s]=as(r[s],t[s]):e[s]=t[s];return e}var P=function(r,t,e,n,s){if(n==="m")throw new TypeError("Private method is not writable");if(n==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof t=="function"?r!==t||!s:!t.has(r))throw new TypeError("Cannot write private member to an object whose class did not declare it");return n==="a"?s.call(r,e):s?s.value=e:t.set(r,e),e},o=function(r,t,e,n){if(e==="a"&&!n)throw new TypeError("Private accessor was defined without a getter");if(typeof t=="function"?r!==t||!n:!t.has(r))throw new TypeError("Cannot read private member from an object whose class did not declare it");return e==="m"?n:e==="a"?n.call(r):n?n.value:t.get(r)},tt,Ht,ue,dt,lt,Pe,vt,Yt,Se,pt,je,mt,xt,ft,gt,Ie,se,it,F,Fe,Me,ut,Vt,ie,Kt,$t,De,$,Gt,qt,Xt,T,ve,Ct,Z;function Ss(r){return(t=[],e=r.process.cwd(),n)=>{let s=new bn(t,e,n,r);return Object.defineProperty(s,"argv",{get:()=>s.parse(),enumerable:!0}),s.help(),s.version(),s}}var cs=Symbol("copyDoubleDash"),ls=Symbol("copyDoubleDash"),an=Symbol("deleteFromParserHintObject"),fs=Symbol("emitWarning"),us=Symbol("freeze"),hs=Symbol("getDollarZero"),Jt=Symbol("getParserConfiguration"),ds=Symbol("getUsageConfiguration"),cn=Symbol("guessLocale"),ps=Symbol("guessVersion"),ms=Symbol("parsePositionalNumbers"),ln=Symbol("pkgUp"),Tt=Symbol("populateParserHintArray"),re=Symbol("populateParserHintSingleValueDictionary"),fn=Symbol("populateParserHintArrayDictionary"),un=Symbol("populateParserHintDictionary"),hn=Symbol("sanitizeKey"),dn=Symbol("setKey"),pn=Symbol("unfreeze"),gs=Symbol("validateAsync"),bs=Symbol("getCommandInstance"),ys=Symbol("getContext"),ws=Symbol("getHasOutput"),_s=Symbol("getLoggerInstance"),Os=Symbol("getParseContext"),Es=Symbol("getUsageInstance"),xs=Symbol("getValidationInstance"),$e=Symbol("hasParseCallback"),Cs=Symbol("isGlobalContext"),Qt=Symbol("postProcess"),As=Symbol("rebase"),mn=Symbol("reset"),he=Symbol("runYargsParserAndExecuteCommands"),gn=Symbol("runValidation"),Ps=Symbol("setHasOutput"),Zt=Symbol("kTrackManuallySetKeys"),bn=class{constructor(t=[],e,n,s){this.customScriptName=!1,this.parsed=!1,tt.set(this,void 0),Ht.set(this,void 0),ue.set(this,{commands:[],fullCommands:[]}),dt.set(this,null),lt.set(this,null),Pe.set(this,"show-hidden"),vt.set(this,null),Yt.set(this,!0),Se.set(this,{}),pt.set(this,!0),je.set(this,[]),mt.set(this,void 0),xt.set(this,{}),ft.set(this,!1),gt.set(this,null),Ie.set(this,!0),se.set(this,void 0),it.set(this,""),F.set(this,void 0),Fe.set(this,void 0),Me.set(this,{}),ut.set(this,null),Vt.set(this,null),ie.set(this,{}),Kt.set(this,{}),$t.set(this,void 0),De.set(this,!1),$.set(this,void 0),Gt.set(this,!1),qt.set(this,!1),Xt.set(this,!1),T.set(this,void 0),ve.set(this,{}),Ct.set(this,null),Z.set(this,void 0),P(this,$,s,"f"),P(this,$t,t,"f"),P(this,Ht,e,"f"),P(this,Fe,n,"f"),P(this,mt,new xe(this),"f"),this.$0=this[hs](),this[mn](),P(this,tt,o(this,tt,"f"),"f"),P(this,T,o(this,T,"f"),"f"),P(this,Z,o(this,Z,"f"),"f"),P(this,F,o(this,F,"f"),"f"),o(this,F,"f").showHiddenOpt=o(this,Pe,"f"),P(this,se,this[ls](),"f")}addHelpOpt(t,e){let n="help";return A("[string|boolean] [string]",[t,e],arguments.length),o(this,gt,"f")&&(this[an](o(this,gt,"f")),P(this,gt,null,"f")),t===!1&&e===void 0?this:(P(this,gt,typeof t=="string"?t:n,"f"),this.boolean(o(this,gt,"f")),this.describe(o(this,gt,"f"),e||o(this,T,"f").deferY18nLookup("Show help")),this)}help(t,e){return this.addHelpOpt(t,e)}addShowHiddenOpt(t,e){if(A("[string|boolean] [string]",[t,e],arguments.length),t===!1&&e===void 0)return this;let n=typeof t=="string"?t:o(this,Pe,"f");return this.boolean(n),this.describe(n,e||o(this,T,"f").deferY18nLookup("Show hidden options")),o(this,F,"f").showHiddenOpt=n,this}showHidden(t,e){return this.addShowHiddenOpt(t,e)}alias(t,e){return A("<object|string|array> [string|array]",[t,e],arguments.length),this[fn](this.alias.bind(this),"alias",t,e),this}array(t){return A("<array|string>",[t],arguments.length),this[Tt]("array",t),this[Zt](t),this}boolean(t){return A("<array|string>",[t],arguments.length),this[Tt]("boolean",t),this[Zt](t),this}check(t,e){return A("<function> [boolean]",[t,e],arguments.length),this.middleware((n,s)=>zt(()=>t(n,s.getOptions()),i=>(i?(typeof i=="string"||i instanceof Error)&&o(this,T,"f").fail(i.toString(),i):o(this,T,"f").fail(o(this,$,"f").y18n.__("Argument check failed: %s",t.toString())),n),i=>(o(this,T,"f").fail(i.message?i.message:i.toString(),i),n)),!1,e),this}choices(t,e){return A("<object|string|array> [string|array]",[t,e],arguments.length),this[fn](this.choices.bind(this),"choices",t,e),this}coerce(t,e){if(A("<object|string|array> [function]",[t,e],arguments.length),Array.isArray(t)){if(!e)throw new K("coerce callback must be provided");for(let n of t)this.coerce(n,e);return this}else if(typeof t=="object"){for(let n of Object.keys(t))this.coerce(n,t[n]);return this}if(!e)throw new K("coerce callback must be provided");return o(this,F,"f").key[t]=!0,o(this,mt,"f").addCoerceMiddleware((n,s)=>{let i;return Object.prototype.hasOwnProperty.call(n,t)?zt(()=>(i=s.getAliases(),e(n[t])),c=>{n[t]=c;let m=s.getInternalMethods().getParserConfiguration()["strip-aliased"];if(i[t]&&m!==!0)for(let y of i[t])n[y]=c;return n},c=>{throw new K(c.message)}):n},t),this}conflicts(t,e){return A("<string|object> [string|array]",[t,e],arguments.length),o(this,Z,"f").conflicts(t,e),this}config(t="config",e,n){return A("[object|string] [string|function] [function]",[t,e,n],arguments.length),typeof t=="object"&&!Array.isArray(t)?(t=fe(t,o(this,Ht,"f"),this[Jt]()["deep-merge-config"]||!1,o(this,$,"f")),o(this,F,"f").configObjects=(o(this,F,"f").configObjects||[]).concat(t),this):(typeof e=="function"&&(n=e,e=void 0),this.describe(t,e||o(this,T,"f").deferY18nLookup("Path to JSON config file")),(Array.isArray(t)?t:[t]).forEach(s=>{o(this,F,"f").config[s]=n||!0}),this)}completion(t,e,n){return A("[string] [string|boolean|function] [function]",[t,e,n],arguments.length),typeof e=="function"&&(n=e,e=void 0),P(this,lt,t||o(this,lt,"f")||"completion","f"),!e&&e!==!1&&(e="generate completion script"),this.command(o(this,lt,"f"),e),n&&o(this,dt,"f").registerFunction(n),this}command(t,e,n,s,i,a){return A("<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]",[t,e,n,s,i,a],arguments.length),o(this,tt,"f").addHandler(t,e,n,s,i,a),this}commands(t,e,n,s,i,a){return this.command(t,e,n,s,i,a)}commandDir(t,e){A("<string> [object]",[t,e],arguments.length);let n=o(this,Fe,"f")||o(this,$,"f").require;return o(this,tt,"f").addDirectory(t,n,o(this,$,"f").getCallerFile(),e),this}count(t){return A("<array|string>",[t],arguments.length),this[Tt]("count",t),this[Zt](t),this}default(t,e,n){return A("<object|string|array> [*] [string]",[t,e,n],arguments.length),n&&(tn(t,o(this,$,"f")),o(this,F,"f").defaultDescription[t]=n),typeof e=="function"&&(tn(t,o(this,$,"f")),o(this,F,"f").defaultDescription[t]||(o(this,F,"f").defaultDescription[t]=o(this,T,"f").functionDescription(e)),e=e.call()),this[re](this.default.bind(this),"default",t,e),this}defaults(t,e,n){return this.default(t,e,n)}demandCommand(t=1,e,n,s){return A("[number] [number|string] [string|null|undefined] [string|null|undefined]",[t,e,n,s],arguments.length),typeof e!="number"&&(n=e,e=1/0),this.global("_",!1),o(this,F,"f").demandedCommands._={min:t,max:e,minMsg:n,maxMsg:s},this}demand(t,e,n){return Array.isArray(e)?(e.forEach(s=>{at(n,!0,o(this,$,"f")),this.demandOption(s,n)}),e=1/0):typeof e!="number"&&(n=e,e=1/0),typeof t=="number"?(at(n,!0,o(this,$,"f")),this.demandCommand(t,e,n,n)):Array.isArray(t)?t.forEach(s=>{at(n,!0,o(this,$,"f")),this.demandOption(s,n)}):typeof n=="string"?this.demandOption(t,n):(n===!0||typeof n>"u")&&this.demandOption(t),this}demandOption(t,e){return A("<object|string|array> [string]",[t,e],arguments.length),this[re](this.demandOption.bind(this),"demandedOptions",t,e),this}deprecateOption(t,e){return A("<string> [string|boolean]",[t,e],arguments.length),o(this,F,"f").deprecatedOptions[t]=e,this}describe(t,e){return A("<object|string|array> [string]",[t,e],arguments.length),this[dn](t,!0),o(this,T,"f").describe(t,e),this}detectLocale(t){return A("<boolean>",[t],arguments.length),P(this,Yt,t,"f"),this}env(t){return A("[string|boolean]",[t],arguments.length),t===!1?delete o(this,F,"f").envPrefix:o(this,F,"f").envPrefix=t||"",this}epilogue(t){return A("<string>",[t],arguments.length),o(this,T,"f").epilog(t),this}epilog(t){return this.epilogue(t)}example(t,e){return A("<string|array> [string]",[t,e],arguments.length),Array.isArray(t)?t.forEach(n=>this.example(...n)):o(this,T,"f").example(t,e),this}exit(t,e){P(this,ft,!0,"f"),P(this,vt,e,"f"),o(this,pt,"f")&&o(this,$,"f").process.exit(t)}exitProcess(t=!0){return A("[boolean]",[t],arguments.length),P(this,pt,t,"f"),this}fail(t){if(A("<function|boolean>",[t],arguments.length),typeof t=="boolean"&&t!==!1)throw new K("Invalid first argument. Expected function or boolean 'false'");return o(this,T,"f").failFn(t),this}getAliases(){return this.parsed?this.parsed.aliases:{}}async getCompletion(t,e){return A("<array> [function]",[t,e],arguments.length),e?o(this,dt,"f").getCompletion(t,e):new Promise((n,s)=>{o(this,dt,"f").getCompletion(t,(i,a)=>{i?s(i):n(a)})})}getDemandedOptions(){return A([],0),o(this,F,"f").demandedOptions}getDemandedCommands(){return A([],0),o(this,F,"f").demandedCommands}getDeprecatedOptions(){return A([],0),o(this,F,"f").deprecatedOptions}getDetectLocale(){return o(this,Yt,"f")}getExitProcess(){return o(this,pt,"f")}getGroups(){return Object.assign({},o(this,xt,"f"),o(this,Kt,"f"))}getHelp(){if(P(this,ft,!0,"f"),!o(this,T,"f").hasCachedHelpMessage()){if(!this.parsed){let e=this[he](o(this,$t,"f"),void 0,void 0,0,!0);if(G(e))return e.then(()=>o(this,T,"f").help())}let t=o(this,tt,"f").runDefaultBuilderOn(this);if(G(t))return t.then(()=>o(this,T,"f").help())}return Promise.resolve(o(this,T,"f").help())}getOptions(){return o(this,F,"f")}getStrict(){return o(this,Gt,"f")}getStrictCommands(){return o(this,qt,"f")}getStrictOptions(){return o(this,Xt,"f")}global(t,e){return A("<string|array> [boolean]",[t,e],arguments.length),t=[].concat(t),e!==!1?o(this,F,"f").local=o(this,F,"f").local.filter(n=>t.indexOf(n)===-1):t.forEach(n=>{o(this,F,"f").local.includes(n)||o(this,F,"f").local.push(n)}),this}group(t,e){A("<string|array> <string>",[t,e],arguments.length);let n=o(this,Kt,"f")[e]||o(this,xt,"f")[e];o(this,Kt,"f")[e]&&delete o(this,Kt,"f")[e];let s={};return o(this,xt,"f")[e]=(n||[]).concat(t).filter(i=>s[i]?!1:s[i]=!0),this}hide(t){return A("<string>",[t],arguments.length),o(this,F,"f").hiddenOptions.push(t),this}implies(t,e){return A("<string|object> [number|string|array]",[t,e],arguments.length),o(this,Z,"f").implies(t,e),this}locale(t){return A("[string]",[t],arguments.length),t===void 0?(this[cn](),o(this,$,"f").y18n.getLocale()):(P(this,Yt,!1,"f"),o(this,$,"f").y18n.setLocale(t),this)}middleware(t,e,n){return o(this,mt,"f").addMiddleware(t,!!e,n)}nargs(t,e){return A("<string|object|array> [number]",[t,e],arguments.length),this[re](this.nargs.bind(this),"narg",t,e),this}normalize(t){return A("<array|string>",[t],arguments.length),this[Tt]("normalize",t),this}number(t){return A("<array|string>",[t],arguments.length),this[Tt]("number",t),this[Zt](t),this}option(t,e){if(A("<string|object> [object]",[t,e],arguments.length),typeof t=="object")Object.keys(t).forEach(n=>{this.options(n,t[n])});else{typeof e!="object"&&(e={}),this[Zt](t),o(this,Ct,"f")&&(t==="version"||(e==null?void 0:e.alias)==="version")&&this[fs](['"version" is a reserved word.',"Please do one of the following:",'- Disable version with `yargs.version(false)` if using "version" as an option',"- Use the built-in `yargs.version` method instead (if applicable)","- Use a different option key","https://yargs.js.org/docs/#api-reference-version"].join(`
`),void 0,"versionWarning"),o(this,F,"f").key[t]=!0,e.alias&&this.alias(t,e.alias);let n=e.deprecate||e.deprecated;n&&this.deprecateOption(t,n);let s=e.demand||e.required||e.require;s&&this.demand(t,s),e.demandOption&&this.demandOption(t,typeof e.demandOption=="string"?e.demandOption:void 0),e.conflicts&&this.conflicts(t,e.conflicts),"default"in e&&this.default(t,e.default),e.implies!==void 0&&this.implies(t,e.implies),e.nargs!==void 0&&this.nargs(t,e.nargs),e.config&&this.config(t,e.configParser),e.normalize&&this.normalize(t),e.choices&&this.choices(t,e.choices),e.coerce&&this.coerce(t,e.coerce),e.group&&this.group(t,e.group),(e.boolean||e.type==="boolean")&&(this.boolean(t),e.alias&&this.boolean(e.alias)),(e.array||e.type==="array")&&(this.array(t),e.alias&&this.array(e.alias)),(e.number||e.type==="number")&&(this.number(t),e.alias&&this.number(e.alias)),(e.string||e.type==="string")&&(this.string(t),e.alias&&this.string(e.alias)),(e.count||e.type==="count")&&this.count(t),typeof e.global=="boolean"&&this.global(t,e.global),e.defaultDescription&&(o(this,F,"f").defaultDescription[t]=e.defaultDescription),e.skipValidation&&this.skipValidation(t);let i=e.describe||e.description||e.desc,a=o(this,T,"f").getDescriptions();(!Object.prototype.hasOwnProperty.call(a,t)||typeof i=="string")&&this.describe(t,i),e.hidden&&this.hide(t),e.requiresArg&&this.requiresArg(t)}return this}options(t,e){return this.option(t,e)}parse(t,e,n){A("[string|array] [function|boolean|object] [function]",[t,e,n],arguments.length),this[us](),typeof t>"u"&&(t=o(this,$t,"f")),typeof e=="object"&&(P(this,Vt,e,"f"),e=n),typeof e=="function"&&(P(this,ut,e,"f"),e=!1),e||P(this,$t,t,"f"),o(this,ut,"f")&&P(this,pt,!1,"f");let s=this[he](t,!!e),i=this.parsed;return o(this,dt,"f").setParsed(this.parsed),G(s)?s.then(a=>(o(this,ut,"f")&&o(this,ut,"f").call(this,o(this,vt,"f"),a,o(this,it,"f")),a)).catch(a=>{throw o(this,ut,"f")&&o(this,ut,"f")(a,this.parsed.argv,o(this,it,"f")),a}).finally(()=>{this[pn](),this.parsed=i}):(o(this,ut,"f")&&o(this,ut,"f").call(this,o(this,vt,"f"),s,o(this,it,"f")),this[pn](),this.parsed=i,s)}parseAsync(t,e,n){let s=this.parse(t,e,n);return G(s)?s:Promise.resolve(s)}parseSync(t,e,n){let s=this.parse(t,e,n);if(G(s))throw new K(".parseSync() must not be used with asynchronous builders, handlers, or middleware");return s}parserConfiguration(t){return A("<object>",[t],arguments.length),P(this,Me,t,"f"),this}pkgConf(t,e){A("<string> [string]",[t,e],arguments.length);let n=null,s=this[ln](e||o(this,Ht,"f"));return s[t]&&typeof s[t]=="object"&&(n=fe(s[t],e||o(this,Ht,"f"),this[Jt]()["deep-merge-config"]||!1,o(this,$,"f")),o(this,F,"f").configObjects=(o(this,F,"f").configObjects||[]).concat(n)),this}positional(t,e){A("<string> <object>",[t,e],arguments.length);let n=["default","defaultDescription","implies","normalize","choices","conflicts","coerce","type","describe","desc","description","alias"];e=Mt(e,(a,c)=>a==="type"&&!["string","number","boolean"].includes(c)?!1:n.includes(a));let s=o(this,ue,"f").fullCommands[o(this,ue,"f").fullCommands.length-1],i=s?o(this,tt,"f").cmdToParseOptions(s):{array:[],alias:{},default:{},demand:{}};return ee(i).forEach(a=>{let c=i[a];Array.isArray(c)?c.indexOf(t)!==-1&&(e[a]=!0):c[t]&&!(a in e)&&(e[a]=c[t])}),this.group(t,o(this,T,"f").getPositionalGroupName()),this.option(t,e)}recommendCommands(t=!0){return A("[boolean]",[t],arguments.length),P(this,De,t,"f"),this}required(t,e,n){return this.demand(t,e,n)}require(t,e,n){return this.demand(t,e,n)}requiresArg(t){return A("<array|string|object> [number]",[t],arguments.length),typeof t=="string"&&o(this,F,"f").narg[t]?this:(this[re](this.requiresArg.bind(this),"narg",t,NaN),this)}showCompletionScript(t,e){return A("[string] [string]",[t,e],arguments.length),t=t||this.$0,o(this,se,"f").log(o(this,dt,"f").generateCompletionScript(t,e||o(this,lt,"f")||"completion")),this}showHelp(t){if(A("[string|function]",[t],arguments.length),P(this,ft,!0,"f"),!o(this,T,"f").hasCachedHelpMessage()){if(!this.parsed){let n=this[he](o(this,$t,"f"),void 0,void 0,0,!0);if(G(n))return n.then(()=>{o(this,T,"f").showHelp(t)}),this}let e=o(this,tt,"f").runDefaultBuilderOn(this);if(G(e))return e.then(()=>{o(this,T,"f").showHelp(t)}),this}return o(this,T,"f").showHelp(t),this}scriptName(t){return this.customScriptName=!0,this.$0=t,this}showHelpOnFail(t,e){return A("[boolean|string] [string]",[t,e],arguments.length),o(this,T,"f").showHelpOnFail(t,e),this}showVersion(t){return A("[string|function]",[t],arguments.length),o(this,T,"f").showVersion(t),this}skipValidation(t){return A("<array|string>",[t],arguments.length),this[Tt]("skipValidation",t),this}strict(t){return A("[boolean]",[t],arguments.length),P(this,Gt,t!==!1,"f"),this}strictCommands(t){return A("[boolean]",[t],arguments.length),P(this,qt,t!==!1,"f"),this}strictOptions(t){return A("[boolean]",[t],arguments.length),P(this,Xt,t!==!1,"f"),this}string(t){return A("<array|string>",[t],arguments.length),this[Tt]("string",t),this[Zt](t),this}terminalWidth(){return A([],0),o(this,$,"f").process.stdColumns}updateLocale(t){return this.updateStrings(t)}updateStrings(t){return A("<object>",[t],arguments.length),P(this,Yt,!1,"f"),o(this,$,"f").y18n.updateLocale(t),this}usage(t,e,n,s){if(A("<string|null|undefined> [string|boolean] [function|object] [function]",[t,e,n,s],arguments.length),e!==void 0){if(at(t,null,o(this,$,"f")),(t||"").match(/^\$0( |$)/))return this.command(t,e,n,s);throw new K(".usage() description must start with $0 if being used as alias for .command()")}else return o(this,T,"f").usage(t),this}usageConfiguration(t){return A("<object>",[t],arguments.length),P(this,ve,t,"f"),this}version(t,e,n){let s="version";if(A("[boolean|string] [string] [string]",[t,e,n],arguments.length),o(this,Ct,"f")&&(this[an](o(this,Ct,"f")),o(this,T,"f").version(void 0),P(this,Ct,null,"f")),arguments.length===0)n=this[ps](),t=s;else if(arguments.length===1){if(t===!1)return this;n=t,t=s}else arguments.length===2&&(n=e,e=void 0);return P(this,Ct,typeof t=="string"?t:s,"f"),e=e||o(this,T,"f").deferY18nLookup("Show version number"),o(this,T,"f").version(n||void 0),this.boolean(o(this,Ct,"f")),this.describe(o(this,Ct,"f"),e),this}wrap(t){return A("<number|null|undefined>",[t],arguments.length),o(this,T,"f").wrap(t),this}[(tt=new WeakMap,Ht=new WeakMap,ue=new WeakMap,dt=new WeakMap,lt=new WeakMap,Pe=new WeakMap,vt=new WeakMap,Yt=new WeakMap,Se=new WeakMap,pt=new WeakMap,je=new WeakMap,mt=new WeakMap,xt=new WeakMap,ft=new WeakMap,gt=new WeakMap,Ie=new WeakMap,se=new WeakMap,it=new WeakMap,F=new WeakMap,Fe=new WeakMap,Me=new WeakMap,ut=new WeakMap,Vt=new WeakMap,ie=new WeakMap,Kt=new WeakMap,$t=new WeakMap,De=new WeakMap,$=new WeakMap,Gt=new WeakMap,qt=new WeakMap,Xt=new WeakMap,T=new WeakMap,ve=new WeakMap,Ct=new WeakMap,Z=new WeakMap,cs)](t){if(!t._||!t["--"])return t;t._.push.apply(t._,t["--"]);try{delete t["--"]}catch{}return t}[ls](){return{log:(...t)=>{this[$e]()||console.log(...t),P(this,ft,!0,"f"),o(this,it,"f").length&&P(this,it,o(this,it,"f")+`
`,"f"),P(this,it,o(this,it,"f")+t.join(" "),"f")},error:(...t)=>{this[$e]()||console.error(...t),P(this,ft,!0,"f"),o(this,it,"f").length&&P(this,it,o(this,it,"f")+`
`,"f"),P(this,it,o(this,it,"f")+t.join(" "),"f")}}}[an](t){ee(o(this,F,"f")).forEach(e=>{if((s=>s==="configObjects")(e))return;let n=o(this,F,"f")[e];Array.isArray(n)?n.includes(t)&&n.splice(n.indexOf(t),1):typeof n=="object"&&delete n[t]}),delete o(this,T,"f").getDescriptions()[t]}[fs](t,e,n){o(this,Se,"f")[n]||(o(this,$,"f").process.emitWarning(t,e),o(this,Se,"f")[n]=!0)}[us](){o(this,je,"f").push({options:o(this,F,"f"),configObjects:o(this,F,"f").configObjects.slice(0),exitProcess:o(this,pt,"f"),groups:o(this,xt,"f"),strict:o(this,Gt,"f"),strictCommands:o(this,qt,"f"),strictOptions:o(this,Xt,"f"),completionCommand:o(this,lt,"f"),output:o(this,it,"f"),exitError:o(this,vt,"f"),hasOutput:o(this,ft,"f"),parsed:this.parsed,parseFn:o(this,ut,"f"),parseContext:o(this,Vt,"f")}),o(this,T,"f").freeze(),o(this,Z,"f").freeze(),o(this,tt,"f").freeze(),o(this,mt,"f").freeze()}[hs](){let t="",e;return/\b(node|iojs|electron)(\.exe)?$/.test(o(this,$,"f").process.argv()[0])?e=o(this,$,"f").process.argv().slice(1,2):e=o(this,$,"f").process.argv().slice(0,1),t=e.map(n=>{let s=this[As](o(this,Ht,"f"),n);return n.match(/^(\/|([a-zA-Z]:)?\\)/)&&s.length<n.length?s:n}).join(" ").trim(),o(this,$,"f").getEnv("_")&&o(this,$,"f").getProcessArgvBin()===o(this,$,"f").getEnv("_")&&(t=o(this,$,"f").getEnv("_").replace(`${o(this,$,"f").path.dirname(o(this,$,"f").process.execPath())}/`,"")),t}[Jt](){return o(this,Me,"f")}[ds](){return o(this,ve,"f")}[cn](){if(!o(this,Yt,"f"))return;let t=o(this,$,"f").getEnv("LC_ALL")||o(this,$,"f").getEnv("LC_MESSAGES")||o(this,$,"f").getEnv("LANG")||o(this,$,"f").getEnv("LANGUAGE")||"en_US";this.locale(t.replace(/[.:].*/,""))}[ps](){return this[ln]().version||"unknown"}[ms](t){let e=t["--"]?t["--"]:t._;for(let n=0,s;(s=e[n])!==void 0;n++)o(this,$,"f").Parser.looksLikeNumber(s)&&Number.isSafeInteger(Math.floor(parseFloat(`${s}`)))&&(e[n]=Number(s));return t}[ln](t){let e=t||"*";if(o(this,ie,"f")[e])return o(this,ie,"f")[e];let n={};try{let s=t||o(this,$,"f").mainFilename;!t&&o(this,$,"f").path.extname(s)&&(s=o(this,$,"f").path.dirname(s));let i=o(this,$,"f").findUp(s,(a,c)=>{if(c.includes("package.json"))return"package.json"});at(i,void 0,o(this,$,"f")),n=JSON.parse(o(this,$,"f").readFileSync(i,"utf8"))}catch{}return o(this,ie,"f")[e]=n||{},o(this,ie,"f")[e]}[Tt](t,e){e=[].concat(e),e.forEach(n=>{n=this[hn](n),o(this,F,"f")[t].push(n)})}[re](t,e,n,s){this[un](t,e,n,s,(i,a,c)=>{o(this,F,"f")[i][a]=c})}[fn](t,e,n,s){this[un](t,e,n,s,(i,a,c)=>{o(this,F,"f")[i][a]=(o(this,F,"f")[i][a]||[]).concat(c)})}[un](t,e,n,s,i){if(Array.isArray(n))n.forEach(a=>{t(a,s)});else if((a=>typeof a=="object")(n))for(let a of ee(n))t(a,n[a]);else i(e,this[hn](n),s)}[hn](t){return t==="__proto__"?"___proto___":t}[dn](t,e){return this[re](this[dn].bind(this),"key",t,e),this}[pn](){var t,e,n,s,i,a,c,m,y,p,h,g;let w=o(this,je,"f").pop();at(w,void 0,o(this,$,"f"));let C;t=this,e=this,n=this,s=this,i=this,a=this,c=this,m=this,y=this,p=this,h=this,g=this,{options:{set value(O){P(t,F,O,"f")}}.value,configObjects:C,exitProcess:{set value(O){P(e,pt,O,"f")}}.value,groups:{set value(O){P(n,xt,O,"f")}}.value,output:{set value(O){P(s,it,O,"f")}}.value,exitError:{set value(O){P(i,vt,O,"f")}}.value,hasOutput:{set value(O){P(a,ft,O,"f")}}.value,parsed:this.parsed,strict:{set value(O){P(c,Gt,O,"f")}}.value,strictCommands:{set value(O){P(m,qt,O,"f")}}.value,strictOptions:{set value(O){P(y,Xt,O,"f")}}.value,completionCommand:{set value(O){P(p,lt,O,"f")}}.value,parseFn:{set value(O){P(h,ut,O,"f")}}.value,parseContext:{set value(O){P(g,Vt,O,"f")}}.value}=w,o(this,F,"f").configObjects=C,o(this,T,"f").unfreeze(),o(this,Z,"f").unfreeze(),o(this,tt,"f").unfreeze(),o(this,mt,"f").unfreeze()}[gs](t,e){return zt(e,n=>(t(n),n))}getInternalMethods(){return{getCommandInstance:this[bs].bind(this),getContext:this[ys].bind(this),getHasOutput:this[ws].bind(this),getLoggerInstance:this[_s].bind(this),getParseContext:this[Os].bind(this),getParserConfiguration:this[Jt].bind(this),getUsageConfiguration:this[ds].bind(this),getUsageInstance:this[Es].bind(this),getValidationInstance:this[xs].bind(this),hasParseCallback:this[$e].bind(this),isGlobalContext:this[Cs].bind(this),postProcess:this[Qt].bind(this),reset:this[mn].bind(this),runValidation:this[gn].bind(this),runYargsParserAndExecuteCommands:this[he].bind(this),setHasOutput:this[Ps].bind(this)}}[bs](){return o(this,tt,"f")}[ys](){return o(this,ue,"f")}[ws](){return o(this,ft,"f")}[_s](){return o(this,se,"f")}[Os](){return o(this,Vt,"f")||{}}[Es](){return o(this,T,"f")}[xs](){return o(this,Z,"f")}[$e](){return!!o(this,ut,"f")}[Cs](){return o(this,Ie,"f")}[Qt](t,e,n,s){return n||G(t)||(e||(t=this[cs](t)),(this[Jt]()["parse-positional-numbers"]||this[Jt]()["parse-positional-numbers"]===void 0)&&(t=this[ms](t)),s&&(t=Ut(t,this,o(this,mt,"f").getMiddleware(),!1))),t}[mn](t={}){P(this,F,o(this,F,"f")||{},"f");let e={};e.local=o(this,F,"f").local||[],e.configObjects=o(this,F,"f").configObjects||[];let n={};e.local.forEach(a=>{n[a]=!0,(t[a]||[]).forEach(c=>{n[c]=!0})}),Object.assign(o(this,Kt,"f"),Object.keys(o(this,xt,"f")).reduce((a,c)=>{let m=o(this,xt,"f")[c].filter(y=>!(y in n));return m.length>0&&(a[c]=m),a},{})),P(this,xt,{},"f");let s=["array","boolean","string","skipValidation","count","normalize","number","hiddenOptions"],i=["narg","key","alias","default","defaultDescription","config","choices","demandedOptions","demandedCommands","deprecatedOptions"];return s.forEach(a=>{e[a]=(o(this,F,"f")[a]||[]).filter(c=>!n[c])}),i.forEach(a=>{e[a]=Mt(o(this,F,"f")[a],c=>!n[c])}),e.envPrefix=o(this,F,"f").envPrefix,P(this,F,e,"f"),P(this,T,o(this,T,"f")?o(this,T,"f").reset(n):ts(this,o(this,$,"f")),"f"),P(this,Z,o(this,Z,"f")?o(this,Z,"f").reset(n):os(this,o(this,T,"f"),o(this,$,"f")),"f"),P(this,tt,o(this,tt,"f")?o(this,tt,"f").reset():Qn(o(this,T,"f"),o(this,Z,"f"),o(this,mt,"f"),o(this,$,"f")),"f"),o(this,dt,"f")||P(this,dt,ss(this,o(this,T,"f"),o(this,tt,"f"),o(this,$,"f")),"f"),o(this,mt,"f").reset(),P(this,lt,null,"f"),P(this,it,"","f"),P(this,vt,null,"f"),P(this,ft,!1,"f"),this.parsed=!1,this}[As](t,e){return o(this,$,"f").path.relative(t,e)}[he](t,e,n,s=0,i=!1){let a=!!n||i;t=t||o(this,$t,"f"),o(this,F,"f").__=o(this,$,"f").y18n.__,o(this,F,"f").configuration=this[Jt]();let c=!!o(this,F,"f").configuration["populate--"],m=Object.assign({},o(this,F,"f").configuration,{"populate--":!0}),y=o(this,$,"f").Parser.detailed(t,Object.assign({},o(this,F,"f"),{configuration:{"parse-positional-numbers":!1,...m}})),p=Object.assign(y.argv,o(this,Vt,"f")),h,g=y.aliases,w=!1,C=!1;Object.keys(p).forEach(O=>{O===o(this,gt,"f")&&p[O]?w=!0:O===o(this,Ct,"f")&&p[O]&&(C=!0)}),p.$0=this.$0,this.parsed=y,s===0&&o(this,T,"f").clearCachedHelpMessage();try{if(this[cn](),e)return this[Qt](p,c,!!n,!1);o(this,gt,"f")&&[o(this,gt,"f")].concat(g[o(this,gt,"f")]||[]).filter(H=>H.length>1).includes(""+p._[p._.length-1])&&(p._.pop(),w=!0),P(this,Ie,!1,"f");let O=o(this,tt,"f").getCommands(),d=o(this,dt,"f").completionKey in p,L=w||d||i;if(p._.length){if(O.length){let R;for(let H=s||0,W;p._[H]!==void 0;H++)if(W=String(p._[H]),O.includes(W)&&W!==o(this,lt,"f")){let Y=o(this,tt,"f").runCommand(W,this,y,H+1,i,w||C||i);return this[Qt](Y,c,!!n,!1)}else if(!R&&W!==o(this,lt,"f")){R=W;break}!o(this,tt,"f").hasDefaultCommand()&&o(this,De,"f")&&R&&!L&&o(this,Z,"f").recommendCommands(R,O)}o(this,lt,"f")&&p._.includes(o(this,lt,"f"))&&!d&&(o(this,pt,"f")&&Dt(!0),this.showCompletionScript(),this.exit(0))}if(o(this,tt,"f").hasDefaultCommand()&&!L){let R=o(this,tt,"f").runCommand(null,this,y,0,i,w||C||i);return this[Qt](R,c,!!n,!1)}if(d){o(this,pt,"f")&&Dt(!0),t=[].concat(t);let R=t.slice(t.indexOf(`--${o(this,dt,"f").completionKey}`)+1);return o(this,dt,"f").getCompletion(R,(H,W)=>{if(H)throw new K(H.message);(W||[]).forEach(Y=>{o(this,se,"f").log(Y)}),this.exit(0)}),this[Qt](p,!c,!!n,!1)}if(o(this,ft,"f")||(w?(o(this,pt,"f")&&Dt(!0),a=!0,this.showHelp("log"),this.exit(0)):C&&(o(this,pt,"f")&&Dt(!0),a=!0,o(this,T,"f").showVersion("log"),this.exit(0))),!a&&o(this,F,"f").skipValidation.length>0&&(a=Object.keys(p).some(R=>o(this,F,"f").skipValidation.indexOf(R)>=0&&p[R]===!0)),!a){if(y.error)throw new K(y.error.message);if(!d){let R=this[gn](g,{},y.error);n||(h=Ut(p,this,o(this,mt,"f").getMiddleware(),!0)),h=this[gs](R,h??p),G(h)&&!n&&(h=h.then(()=>Ut(p,this,o(this,mt,"f").getMiddleware(),!1)))}}}catch(O){if(O instanceof K)o(this,T,"f").fail(O.message,O);else throw O}return this[Qt](h??p,c,!!n,!0)}[gn](t,e,n,s){let i={...this.getDemandedOptions()};return a=>{if(n)throw new K(n.message);o(this,Z,"f").nonOptionCount(a),o(this,Z,"f").requiredArguments(a,i);let c=!1;o(this,qt,"f")&&(c=o(this,Z,"f").unknownCommands(a)),o(this,Gt,"f")&&!c?o(this,Z,"f").unknownArguments(a,t,e,!!s):o(this,Xt,"f")&&o(this,Z,"f").unknownArguments(a,t,{},!1,!1),o(this,Z,"f").limitedChoices(a),o(this,Z,"f").implications(a),o(this,Z,"f").conflicting(a)}}[Ps](){P(this,ft,!0,"f")}[Zt](t){if(typeof t=="string")o(this,F,"f").key[t]=!0;else for(let e of t)o(this,F,"f").key[e]=!0}};function Zn(r){return!!r&&typeof r.getInternalMethods=="function"}var Ci=Ss(ke),js=Ci;import*as At from"fs";import*as rt from"path";var yn=new TextEncoder,Pi=new TextDecoder,Si=1e3,ji=yn.encode("XHWnDAT6ehMVY2zD"),de=class{async deriveKey(t){let e=yn.encode(t),n=await crypto.subtle.importKey("raw",e,{name:"PBKDF2"},!1,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",hash:{name:"SHA-256"},iterations:Si,salt:ji},n,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}async encryptToBytes(t,e){let n=await this.deriveKey(e),s=yn.encode(t),i=crypto.getRandomValues(new Uint8Array(16)),a=new Uint8Array(await crypto.subtle.encrypt({name:"AES-GCM",iv:i},n,s)),c=new Uint8Array(i.byteLength+a.byteLength);return c.set(i,0),c.set(a,i.byteLength),c}convertToString(t){let e="";for(let n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return e}async encryptToBase64(t,e){let n=await this.encryptToBytes(t,e);return btoa(this.convertToString(n))}stringToArray(t){let e=[];for(let n=0;n<t.length;n++)e.push(t.charCodeAt(n));return new Uint8Array(e)}async decryptFromBytes(t,e){try{let n=t.slice(0,16),s=t.slice(16),i=await this.deriveKey(e),a=await crypto.subtle.decrypt({name:"AES-GCM",iv:n},i,s);return Pi.decode(a)}catch{return null}}async decryptFromBase64(t,e){try{let n=this.stringToArray(atob(t));return await this.decryptFromBytes(n,e)}catch{return null}}};var oe=class{constructor(t,e,n){this.vectorSize=t,this.saltSize=e,this.iterations=n}async deriveKey(t,e){let s=new TextEncoder().encode(t),i=await crypto.subtle.importKey("raw",s,"PBKDF2",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-512",salt:e,iterations:this.iterations},i,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}async encryptToBytes(t,e){let n=crypto.getRandomValues(new Uint8Array(this.saltSize)),s=await this.deriveKey(e,n),a=new TextEncoder().encode(t),c=crypto.getRandomValues(new Uint8Array(this.vectorSize)),m=new Uint8Array(await crypto.subtle.encrypt({name:"AES-GCM",iv:c},s,a)),y=new Uint8Array(c.byteLength+n.byteLength+m.byteLength);return y.set(c,0),y.set(n,c.byteLength),y.set(m,c.byteLength+n.byteLength),y}convertToString(t){let e="";for(let n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return e}async encryptToBase64(t,e){let n=await this.encryptToBytes(t,e);return btoa(this.convertToString(n))}stringToArray(t){let e=[];for(let n=0;n<t.length;n++)e.push(t.charCodeAt(n));return new Uint8Array(e)}async decryptFromBytes(t,e){try{let n,s;n=0,s=n+this.vectorSize;let i=t.slice(n,s);n=s,s=n+this.saltSize;let a=t.slice(n,s);n=s,s=void 0;let c=t.slice(n),m=await this.deriveKey(e,a),y=await crypto.subtle.decrypt({name:"AES-GCM",iv:i},m,c);return new TextDecoder().decode(y)}catch{return null}}async decryptFromBase64(t,e){try{let n=this.stringToArray(atob(t));return await this.decryptFromBytes(n,e)}catch{return null}}};var wn={name:"AES-GCM",iv:new Uint8Array([196,190,240,190,188,78,41,132,15,220,84,211]),tagLength:128},Te=class{async buildKey(t){let n=new TextEncoder().encode(t),s=await crypto.subtle.digest({name:"SHA-256"},n);return await crypto.subtle.importKey("raw",s,wn,!1,["encrypt","decrypt"])}async encryptToBase64(t,e){let n=await this.buildKey(e),i=new TextEncoder().encode(t),a=new Uint8Array(await crypto.subtle.encrypt(wn,n,i));return btoa(String.fromCharCode(...a))}stringToArray(t){let e=[];for(let n=0;n<t.length;n++)e.push(t.charCodeAt(n));return new Uint8Array(e)}async decryptFromBase64(t,e){try{let n=this.stringToArray(atob(t)),s=await this.buildKey(e),i=await crypto.subtle.decrypt(wn,s,n);return new TextDecoder().decode(i)}catch{return null}}};var bt=class{static BuildDefault(){return new oe(16,16,21e4)}static BuildFromFileDataOrThrow(t){let e=bt.BuildFromFileDataOrNull(t);if(e!=null)return e;throw new Error(`Unable to determine ICryptoHelper for File ver ${t.version}`)}static BuildFromFileDataOrNull(t){return t.version=="1.0"?new de:t.version=="2.0"?new oe(16,16,21e4):null}static BuildFromDecryptableOrThrow(t){let e=bt.BuildFromDecryptableOrNull(t);if(e!=null)return e;throw new Error(`Unable to determine ICryptoHelper for Decryptable ver ${t.version}`)}static BuildFromDecryptableOrNull(t){return t.version==0?new Te:t.version==1?new de:t.version==2?new oe(16,16,21e4):null}};var Le=class{constructor(t,e,n){this.version="1.0";this.version=t,this.hint=e,this.encodedData=n}},_n=class{static async encode(t,e,n){let i=await bt.BuildDefault().encryptToBase64(n,t);return new Le(_n.DEFAULT_VERSION,e,i)}static async decrypt(t,e){return t.encodedData==""?"":await bt.BuildFromFileDataOrThrow(t).decryptFromBase64(t.encodedData,e)}},Ne=_n;Ne.DEFAULT_VERSION="2.0";var pe=class{static encode(t){return JSON.stringify(t,null,2)}static decode(t){return t===""?new Le(Ne.DEFAULT_VERSION,"",""):JSON.parse(t)}};var Ii="encrypted",Fi="mdenc";var Is=[Fi,Ii];var On="%%\u{1F510}\u03B2 ",me="\u{1F510}\u03B2 ",En="%%\u{1F510}\u03B1 ",ge="\u{1F510}\u03B1 ",xn="%%\u{1F510} ",Cn="\u{1F510} ";var Re=[On,me,En,ge,xn,Cn],Di=" \u{1F510}%%",vi=" \u{1F510}",Be=[Di,vi],kt="\u{1F4A1}";var We=class{};var Ue=class{constructor(t){this.process(t)}process(t){if(this.processedText=t,this.isEmpty=t.length===0,this.prefix=Re.find(e=>t.startsWith(e))??"",this.suffix=Be.find(e=>t.endsWith(e))??"",this.hasEncryptedPrefix=this.prefix.length>0,this.hasEncryptedSuffix=this.suffix.length>0,this.hasObsoleteEncryptedPrefix=this.prefix===xn||this.prefix===Cn,this.containsEncryptedMarkers=[...Re,...Be].some(e=>t.includes(e)),this.canDecrypt=this.hasEncryptedPrefix&&this.hasEncryptedSuffix,this.canEncrypt=!this.hasEncryptedPrefix&&!this.containsEncryptedMarkers,this.canDecrypt){let e=this.parseDecryptableContent(t);e!=null?this.decryptable=e:this.canDecrypt=!1}}parseDecryptableContent(t){let e=new We;if(!this.hasEncryptedPrefix||!this.hasEncryptedSuffix)return null;this.hasObsoleteEncryptedPrefix?e.version=0:this.prefix==On||this.prefix==me?e.version=2:(this.prefix==En||this.prefix==ge)&&(e.version=1);let n=t.substring(this.prefix.length,t.length-this.suffix.length);if([...Re,...Be].some(s=>n.includes(s)))return null;if(n.substring(0,kt.length)==kt){let s=n.indexOf(kt,kt.length);if(s<0)return null;e.hint=n.substring(kt.length,s),e.base64CipherText=n.substring(s+kt.length)}else e.base64CipherText=n;return e}};var An=class{async argHandler(t){let e=process.cwd(),n,s,i,a=[];t==="csv"?(n=()=>console.log("feature,fullPath,relativePath,extension"),s=c=>console.log(`"${c.featureType}","${c.fullPath}","${c.relativePath}","${c.extension}"`),i=()=>{}):t=="json"?(n=()=>{},s=c=>a.push(c),i=()=>console.log(JSON.stringify(a,null,2))):t==="table"?(n=()=>{},s=c=>a.push(c),i=()=>console.table(a)):(n=()=>{},s=c=>console.log(`${c.relativePath}`),i=()=>{}),await this.output(e,n,s,i)}async output(t,e,n,s){e();for await(let i of Nt.listings(t,!1))n(i);s()}},Pn=class{async argHandler(t,e){let n=process.cwd();for await(let s of Nt.listings(n,!0))if(s.featureType=="InPlace")for await(let i of this.testForInPlaceDecryption(s,t))this.outputResult(i,e);else if(s.featureType=="WholeNote"){let i=await this.testForWholeNoteDecryption(s,t);this.outputResult(i,e)}}async*testForInPlaceDecryption(t,e){if(t.content==null){yield{listing:t,success:!1,message:"no content"};return}let n=t.content.split(`
`);for(let s=0;s<n.length;s++){let i=n[s],a=s+1,c=/🔐(.*?)🔐/g,m=Array.from(i.matchAll(c));for(let y of m){let p=`line ${a}, pos ${y.index+1}`,h=`\u{1F510}${y[1]}\u{1F510}`,g=new Ue(h);if(!g.canDecrypt||g.decryptable==null){yield{listing:t,success:!1,message:`${p}, cannot decrypt`};continue}let w=bt.BuildFromDecryptableOrNull(g.decryptable);if(w==null){yield{listing:t,success:!1,message:`${p}, unknown format`};continue}let C=!1;for(let O=0;O<e.length;O++){let d=e[O],L=O+1;if(await w.decryptFromBase64(g.decryptable.base64CipherText,d)!=null){C=!0,yield{listing:t,success:!0,message:`${p}, password #${L}`};break}}if(C)break}}}async testForWholeNoteDecryption(t,e){if(t.content==null||t.content.length==0)return{listing:t,success:!1,message:"no content"};let n=pe.decode(t.content||""),s=bt.BuildFromFileDataOrNull(n);if(s==null)return{listing:t,success:!1,message:"Unknown format"};for(let i=0;i<e.length;i++){let a=e[i];if(await s.decryptFromBase64(n.encodedData,a)!=null)return{listing:t,success:!0,message:`password #${i+1}`}}return{listing:t,success:!1,message:"unable to decrypt"}}outputResult(t,e){e&&t.success||console.log(`${t.success?"PASSED":"FAILED"} => ${t.listing.relativePath} => ${t.message} => ${t.listing.featureType}`)}outputResults(t,e){for(let n of t)this.outputResult(n,e)}},Sn=class{async argHandler(t,e,n){console.log(`decrypting${n?" (dry run)":""}...`);let s=process.cwd();for await(let i of Nt.listings(s,!0))if(i.featureType=="InPlace"){let a=await this.decryptInPlaceListing(i,t,e,n);this.outputResult(a)}else if(i.featureType=="WholeNote"){let a=await this.decryptWholeNoteListing(i,t,e,n);this.outputResult(a)}}async decryptInPlaceListing(t,e,n,s){return Promise.resolve({listing:t,success:!1,message:"inplace decryption not implemented",outFile:void 0})}outputResult(t){console.log(`${t.message} : ${t.listing.relativePath}${t.outFile==null?"":" => `"+t.outFile+"`"}`)}async decryptWholeNoteListing(t,e,n,s){let i=rt.join(n,t.relativePath),a=rt.basename(i),c=rt.extname(i),m=a.replace(c,".md");if(i=rt.join(rt.dirname(i),m),!s){let h=rt.dirname(i);At.existsSync(h)||At.mkdirSync(h,{recursive:!0})}if(t.content==null||t.content.length==0)return s||At.writeFileSync(i,""),{listing:t,success:!0,message:"empty file",outFile:i};let y=pe.decode(t.content||""),p=bt.BuildFromFileDataOrNull(y);if(p==null)return{listing:t,success:!1,message:"Unknown format",outFile:void 0};for(let h=0;h<e.length;h++){let g=e[h],w=await p.decryptFromBase64(y.encodedData,g);if(w!=null)return s||At.writeFileSync(i,w),{listing:t,success:!0,message:"decrypted",outFile:i}}return{listing:t,success:!1,message:"unable to decrypt",outFile:void 0}}},Nt=class{static async*walk(t){for await(let e of await At.promises.opendir(t)){let n=rt.join(t,e.name);e.isDirectory()?yield*Nt.walk(n):e.isFile()&&(yield n)}}static async*listings(t,e){for await(let n of Nt.walk(t)){let s=rt.extname(n).toLowerCase().slice(1);if(!["md",...Is].includes(s))continue;let i="."+rt.sep+rt.relative(t,n),a=e||s=="md"?await At.promises.readFile(n,"utf8"):void 0;if(s=="md"){(a.includes(ge)||a.includes(me))&&(yield{featureType:"InPlace",fullPath:n,relativePath:i,extension:s,content:e?a:void 0});continue}yield{featureType:"WholeNote",fullPath:n,relativePath:i,extension:s,content:a}}}},Fs={demandOption:!0,alias:["p","pw"],describe:"passwords to use",type:"array"},Ti={alias:"f",describe:"format of the listing",type:"string",choices:["default","table","json","csv"],default:"default"};js(Qe(process.argv)).usage("Usage: $0 [command] [options]").command("list","list all encrypted artifacts within the current directory",r=>r.option({format:Ti}),r=>new An().argHandler(r.format)).command(["test","check"],"check that all notes can be decrypted with the given password list",r=>r.option({passwords:Fs,fails:{alias:["f","fail"],describe:"only list fails",type:"boolean",default:!1}}),r=>new Pn().argHandler(r.passwords,r.fails)).command("decrypt","decrypt notes to plain text given a password list and an output directory",r=>r.option({passwords:Fs,outdir:{alias:["o","out","to"],describe:"output directory",type:"string",demandOption:!0},dryrun:{alias:["dr","dry"],describe:"dry run",type:"boolean",default:!1}}),r=>new Sn().argHandler(r.passwords,r.outdir,r.dryrun!==!1)).demandCommand().help().wrap(null).example([["$0 list","Processes all *.md and *.mdenc files and list any encrypted artifacts within the current directory"],["$0 test --passwords pw1 pw2","check that all notes can be decrypted with the given password list"],["$0 decrypt --pw pw1 pw2 --outdir \\path\\to\\output\\","decrypt notes to an output directory"]]).parse();
/**
 * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js
 * CJS and ESM environments.
 *
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
//# sourceMappingURL=data:application/json;base64,
